ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB16:
  26              		.file 1 "FreeRTOS\\src\\tasks.c"
   1:FreeRTOS\src/tasks.c **** /*
   2:FreeRTOS\src/tasks.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS\src/tasks.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS\src/tasks.c ****  *
   5:FreeRTOS\src/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS\src/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS\src/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS\src/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS\src/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS\src/tasks.c ****  * subject to the following conditions:
  11:FreeRTOS\src/tasks.c ****  *
  12:FreeRTOS\src/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS\src/tasks.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS\src/tasks.c ****  *
  15:FreeRTOS\src/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS\src/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS\src/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS\src/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS\src/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS\src/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS\src/tasks.c ****  *
  22:FreeRTOS\src/tasks.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS\src/tasks.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS\src/tasks.c ****  *
  25:FreeRTOS\src/tasks.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS\src/tasks.c ****  */
  27:FreeRTOS\src/tasks.c **** 
  28:FreeRTOS\src/tasks.c **** /* Standard includes. */
  29:FreeRTOS\src/tasks.c **** #include <stdlib.h>
  30:FreeRTOS\src/tasks.c **** #include <string.h>
  31:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 2


  32:FreeRTOS\src/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS\src/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS\src/tasks.c **** task.h is included from an application file. */
  35:FreeRTOS\src/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS\src/tasks.c **** 
  37:FreeRTOS\src/tasks.c **** /* FreeRTOS includes. */
  38:FreeRTOS\src/tasks.c **** #include "FreeRTOS.h"
  39:FreeRTOS\src/tasks.c **** #include "task.h"
  40:FreeRTOS\src/tasks.c **** #include "timers.h"
  41:FreeRTOS\src/tasks.c **** #include "stack_macros.h"
  42:FreeRTOS\src/tasks.c **** 
  43:FreeRTOS\src/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:FreeRTOS\src/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:FreeRTOS\src/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:FreeRTOS\src/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:FreeRTOS\src/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:FreeRTOS\src/tasks.c **** 
  49:FreeRTOS\src/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:FreeRTOS\src/tasks.c **** functions but without including stdio.h here. */
  51:FreeRTOS\src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:FreeRTOS\src/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:FreeRTOS\src/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:FreeRTOS\src/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:FreeRTOS\src/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:FreeRTOS\src/tasks.c **** 	#include <stdio.h>
  57:FreeRTOS\src/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:FreeRTOS\src/tasks.c **** 
  59:FreeRTOS\src/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:FreeRTOS\src/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:FreeRTOS\src/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:FreeRTOS\src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:FreeRTOS\src/tasks.c **** #else
  64:FreeRTOS\src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:FreeRTOS\src/tasks.c **** #endif
  66:FreeRTOS\src/tasks.c **** 
  67:FreeRTOS\src/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:FreeRTOS\src/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:FreeRTOS\src/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:FreeRTOS\src/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:FreeRTOS\src/tasks.c **** 
  72:FreeRTOS\src/tasks.c **** /*
  73:FreeRTOS\src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:FreeRTOS\src/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:FreeRTOS\src/tasks.c ****  */
  76:FreeRTOS\src/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:FreeRTOS\src/tasks.c **** 
  78:FreeRTOS\src/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:FreeRTOS\src/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:FreeRTOS\src/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:FreeRTOS\src/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:FreeRTOS\src/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:FreeRTOS\src/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:FreeRTOS\src/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:FreeRTOS\src/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:FreeRTOS\src/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:FreeRTOS\src/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:FreeRTOS\src/tasks.c **** made to free the RAM that was allocated statically.
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 3


  89:FreeRTOS\src/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:FreeRTOS\src/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:FreeRTOS\src/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:FreeRTOS\src/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:FreeRTOS\src/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:FreeRTOS\src/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:FreeRTOS\src/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:FreeRTOS\src/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:FreeRTOS\src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:FreeRTOS\src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:FreeRTOS\src/tasks.c **** 
 100:FreeRTOS\src/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:FreeRTOS\src/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:FreeRTOS\src/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:FreeRTOS\src/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:FreeRTOS\src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:FreeRTOS\src/tasks.c **** #else
 106:FreeRTOS\src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:FreeRTOS\src/tasks.c **** #endif
 108:FreeRTOS\src/tasks.c **** 
 109:FreeRTOS\src/tasks.c **** /*
 110:FreeRTOS\src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:FreeRTOS\src/tasks.c ****  */
 112:FreeRTOS\src/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:FreeRTOS\src/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:FreeRTOS\src/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:FreeRTOS\src/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:FreeRTOS\src/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:FreeRTOS\src/tasks.c **** 
 118:FreeRTOS\src/tasks.c **** /*
 119:FreeRTOS\src/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:FreeRTOS\src/tasks.c ****  * global, rather than file scope.
 121:FreeRTOS\src/tasks.c ****  */
 122:FreeRTOS\src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:FreeRTOS\src/tasks.c **** 	#define static
 124:FreeRTOS\src/tasks.c **** #endif
 125:FreeRTOS\src/tasks.c **** 
 126:FreeRTOS\src/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:FreeRTOS\src/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:FreeRTOS\src/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:FreeRTOS\src/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:FreeRTOS\src/tasks.c **** #endif
 131:FreeRTOS\src/tasks.c **** 
 132:FreeRTOS\src/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:FreeRTOS\src/tasks.c **** 
 134:FreeRTOS\src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:FreeRTOS\src/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:FreeRTOS\src/tasks.c **** 	microcontroller architecture. */
 137:FreeRTOS\src/tasks.c **** 
 138:FreeRTOS\src/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:FreeRTOS\src/tasks.c **** 	state task. */
 140:FreeRTOS\src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:FreeRTOS\src/tasks.c **** 	{																									\
 142:FreeRTOS\src/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:FreeRTOS\src/tasks.c **** 		{																								\
 144:FreeRTOS\src/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:FreeRTOS\src/tasks.c **** 		}																								\
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 4


 146:FreeRTOS\src/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:FreeRTOS\src/tasks.c **** 
 148:FreeRTOS\src/tasks.c **** 	/*-----------------------------------------------------------*/
 149:FreeRTOS\src/tasks.c **** 
 150:FreeRTOS\src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:FreeRTOS\src/tasks.c **** 	{																									\
 152:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:FreeRTOS\src/tasks.c **** 																										\
 154:FreeRTOS\src/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:FreeRTOS\src/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:FreeRTOS\src/tasks.c **** 		{																								\
 157:FreeRTOS\src/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:FreeRTOS\src/tasks.c **** 			--uxTopPriority;																			\
 159:FreeRTOS\src/tasks.c **** 		}																								\
 160:FreeRTOS\src/tasks.c **** 																										\
 161:FreeRTOS\src/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:FreeRTOS\src/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:FreeRTOS\src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:FreeRTOS\src/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:FreeRTOS\src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:FreeRTOS\src/tasks.c **** 
 167:FreeRTOS\src/tasks.c **** 	/*-----------------------------------------------------------*/
 168:FreeRTOS\src/tasks.c **** 
 169:FreeRTOS\src/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:FreeRTOS\src/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:FreeRTOS\src/tasks.c **** 	being used. */
 172:FreeRTOS\src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:FreeRTOS\src/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:FreeRTOS\src/tasks.c **** 
 175:FreeRTOS\src/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:FreeRTOS\src/tasks.c **** 
 177:FreeRTOS\src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:FreeRTOS\src/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:FreeRTOS\src/tasks.c **** 	architecture being used. */
 180:FreeRTOS\src/tasks.c **** 
 181:FreeRTOS\src/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:FreeRTOS\src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:FreeRTOS\src/tasks.c **** 
 184:FreeRTOS\src/tasks.c **** 	/*-----------------------------------------------------------*/
 185:FreeRTOS\src/tasks.c **** 
 186:FreeRTOS\src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:FreeRTOS\src/tasks.c **** 	{																								\
 188:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:FreeRTOS\src/tasks.c **** 																									\
 190:FreeRTOS\src/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:FreeRTOS\src/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:FreeRTOS\src/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:FreeRTOS\src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:FreeRTOS\src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:FreeRTOS\src/tasks.c **** 
 196:FreeRTOS\src/tasks.c **** 	/*-----------------------------------------------------------*/
 197:FreeRTOS\src/tasks.c **** 
 198:FreeRTOS\src/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:FreeRTOS\src/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:FreeRTOS\src/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:FreeRTOS\src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:FreeRTOS\src/tasks.c **** 	{																									\
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 5


 203:FreeRTOS\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:FreeRTOS\src/tasks.c **** 		{																								\
 205:FreeRTOS\src/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:FreeRTOS\src/tasks.c **** 		}																								\
 207:FreeRTOS\src/tasks.c **** 	}
 208:FreeRTOS\src/tasks.c **** 
 209:FreeRTOS\src/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:FreeRTOS\src/tasks.c **** 
 211:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 212:FreeRTOS\src/tasks.c **** 
 213:FreeRTOS\src/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:FreeRTOS\src/tasks.c **** count overflows. */
 215:FreeRTOS\src/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:FreeRTOS\src/tasks.c **** {																									\
 217:FreeRTOS\src/tasks.c **** 	List_t *pxTemp;																					\
 218:FreeRTOS\src/tasks.c **** 																									\
 219:FreeRTOS\src/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:FreeRTOS\src/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:FreeRTOS\src/tasks.c **** 																									\
 222:FreeRTOS\src/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:FreeRTOS\src/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:FreeRTOS\src/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:FreeRTOS\src/tasks.c **** 	xNumOfOverflows++;																				\
 226:FreeRTOS\src/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:FreeRTOS\src/tasks.c **** }
 228:FreeRTOS\src/tasks.c **** 
 229:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 230:FreeRTOS\src/tasks.c **** 
 231:FreeRTOS\src/tasks.c **** /*
 232:FreeRTOS\src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:FreeRTOS\src/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:FreeRTOS\src/tasks.c ****  */
 235:FreeRTOS\src/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:FreeRTOS\src/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:FreeRTOS\src/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:FreeRTOS\src/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:FreeRTOS\src/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 241:FreeRTOS\src/tasks.c **** 
 242:FreeRTOS\src/tasks.c **** /*
 243:FreeRTOS\src/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:FreeRTOS\src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:FreeRTOS\src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:FreeRTOS\src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:FreeRTOS\src/tasks.c ****  */
 248:FreeRTOS\src/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 249:FreeRTOS\src/tasks.c **** 
 250:FreeRTOS\src/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:FreeRTOS\src/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:FreeRTOS\src/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:FreeRTOS\src/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:FreeRTOS\src/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:FreeRTOS\src/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:FreeRTOS\src/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:FreeRTOS\src/tasks.c **** to its original value when it is released. */
 258:FreeRTOS\src/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:FreeRTOS\src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 6


 260:FreeRTOS\src/tasks.c **** #else
 261:FreeRTOS\src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:FreeRTOS\src/tasks.c **** #endif
 263:FreeRTOS\src/tasks.c **** 
 264:FreeRTOS\src/tasks.c **** /*
 265:FreeRTOS\src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:FreeRTOS\src/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:FreeRTOS\src/tasks.c ****  * (the task's run time environment, including register values)
 268:FreeRTOS\src/tasks.c ****  */
 269:FreeRTOS\src/tasks.c **** typedef struct tskTaskControlBlock /* The old naming convention is used to prevent breaking kernel 
 270:FreeRTOS\src/tasks.c **** {
 271:FreeRTOS\src/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:FreeRTOS\src/tasks.c **** 
 273:FreeRTOS\src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:FreeRTOS\src/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:FreeRTOS\src/tasks.c **** 	#endif
 276:FreeRTOS\src/tasks.c **** 
 277:FreeRTOS\src/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:FreeRTOS\src/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:FreeRTOS\src/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:FreeRTOS\src/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:FreeRTOS\src/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:FreeRTOS\src/tasks.c **** 
 283:FreeRTOS\src/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:FreeRTOS\src/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:FreeRTOS\src/tasks.c **** 	#endif
 286:FreeRTOS\src/tasks.c **** 
 287:FreeRTOS\src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:FreeRTOS\src/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:FreeRTOS\src/tasks.c **** 	#endif
 290:FreeRTOS\src/tasks.c **** 
 291:FreeRTOS\src/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:FreeRTOS\src/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:FreeRTOS\src/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:FreeRTOS\src/tasks.c **** 	#endif
 295:FreeRTOS\src/tasks.c **** 
 296:FreeRTOS\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:FreeRTOS\src/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:FreeRTOS\src/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:FreeRTOS\src/tasks.c **** 	#endif
 300:FreeRTOS\src/tasks.c **** 
 301:FreeRTOS\src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:FreeRTOS\src/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:FreeRTOS\src/tasks.c **** 	#endif
 304:FreeRTOS\src/tasks.c **** 
 305:FreeRTOS\src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:FreeRTOS\src/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:FreeRTOS\src/tasks.c **** 	#endif
 308:FreeRTOS\src/tasks.c **** 
 309:FreeRTOS\src/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:FreeRTOS\src/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:FreeRTOS\src/tasks.c **** 	#endif
 312:FreeRTOS\src/tasks.c **** 
 313:FreeRTOS\src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:FreeRTOS\src/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:FreeRTOS\src/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:FreeRTOS\src/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 7


 317:FreeRTOS\src/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:FreeRTOS\src/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:FreeRTOS\src/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:FreeRTOS\src/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:FreeRTOS\src/tasks.c **** 		struct	_reent xNewLib_reent;
 322:FreeRTOS\src/tasks.c **** 	#endif
 323:FreeRTOS\src/tasks.c **** 
 324:FreeRTOS\src/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:FreeRTOS\src/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:FreeRTOS\src/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:FreeRTOS\src/tasks.c **** 	#endif
 328:FreeRTOS\src/tasks.c **** 
 329:FreeRTOS\src/tasks.c **** 	/* See the comments above the definition of
 330:FreeRTOS\src/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:FreeRTOS\src/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 332:FreeRTOS\src/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:FreeRTOS\src/tasks.c **** 	#endif
 334:FreeRTOS\src/tasks.c **** 
 335:FreeRTOS\src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:FreeRTOS\src/tasks.c **** 		uint8_t ucDelayAborted;
 337:FreeRTOS\src/tasks.c **** 	#endif
 338:FreeRTOS\src/tasks.c **** 
 339:FreeRTOS\src/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 340:FreeRTOS\src/tasks.c **** 		int iTaskErrno;
 341:FreeRTOS\src/tasks.c **** 	#endif
 342:FreeRTOS\src/tasks.c **** 
 343:FreeRTOS\src/tasks.c **** } tskTCB;
 344:FreeRTOS\src/tasks.c **** 
 345:FreeRTOS\src/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 346:FreeRTOS\src/tasks.c **** below to enable the use of older kernel aware debuggers. */
 347:FreeRTOS\src/tasks.c **** typedef tskTCB TCB_t;
 348:FreeRTOS\src/tasks.c **** 
 349:FreeRTOS\src/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 350:FreeRTOS\src/tasks.c **** which static variables must be declared volatile. */
 351:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 352:FreeRTOS\src/tasks.c **** 
 353:FreeRTOS\src/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 354:FreeRTOS\src/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 355:FreeRTOS\src/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 356:FreeRTOS\src/tasks.c **** the static qualifier. */
 357:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 358:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 359:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 360:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 361:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 362:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 363:FreeRTOS\src/tasks.c **** 
 364:FreeRTOS\src/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 365:FreeRTOS\src/tasks.c **** 
 366:FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 367:FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 368:FreeRTOS\src/tasks.c **** 
 369:FreeRTOS\src/tasks.c **** #endif
 370:FreeRTOS\src/tasks.c **** 
 371:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 372:FreeRTOS\src/tasks.c **** 
 373:FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 8


 374:FreeRTOS\src/tasks.c **** 
 375:FreeRTOS\src/tasks.c **** #endif
 376:FreeRTOS\src/tasks.c **** 
 377:FreeRTOS\src/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 378:FreeRTOS\src/tasks.c **** the errno of the currently running task. */
 379:FreeRTOS\src/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 380:FreeRTOS\src/tasks.c **** 	int FreeRTOS_errno = 0;
 381:FreeRTOS\src/tasks.c **** #endif
 382:FreeRTOS\src/tasks.c **** 
 383:FreeRTOS\src/tasks.c **** /* Other file private variables. --------------------------------*/
 384:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 385:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 386:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 387:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 388:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 389:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 390:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 391:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 392:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 393:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 394:FreeRTOS\src/tasks.c **** 
 395:FreeRTOS\src/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 396:FreeRTOS\src/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 397:FreeRTOS\src/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 398:FreeRTOS\src/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 399:FreeRTOS\src/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 400:FreeRTOS\src/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 401:FreeRTOS\src/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 402:FreeRTOS\src/tasks.c **** accessed from a critical section. */
 403:FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 404:FreeRTOS\src/tasks.c **** 
 405:FreeRTOS\src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 406:FreeRTOS\src/tasks.c **** 
 407:FreeRTOS\src/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 408:FreeRTOS\src/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 409:FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 410:FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 411:FreeRTOS\src/tasks.c **** 
 412:FreeRTOS\src/tasks.c **** #endif
 413:FreeRTOS\src/tasks.c **** 
 414:FreeRTOS\src/tasks.c **** /*lint -restore */
 415:FreeRTOS\src/tasks.c **** 
 416:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 417:FreeRTOS\src/tasks.c **** 
 418:FreeRTOS\src/tasks.c **** /* Callback function prototypes. --------------------------*/
 419:FreeRTOS\src/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 420:FreeRTOS\src/tasks.c **** 
 421:FreeRTOS\src/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 422:FreeRTOS\src/tasks.c **** 
 423:FreeRTOS\src/tasks.c **** #endif
 424:FreeRTOS\src/tasks.c **** 
 425:FreeRTOS\src/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 426:FreeRTOS\src/tasks.c **** 
 427:FreeRTOS\src/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 428:FreeRTOS\src/tasks.c **** 
 429:FreeRTOS\src/tasks.c **** #endif
 430:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 9


 431:FreeRTOS\src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 432:FreeRTOS\src/tasks.c **** 
 433:FreeRTOS\src/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 434:FreeRTOS\src/tasks.c **** 
 435:FreeRTOS\src/tasks.c **** #endif
 436:FreeRTOS\src/tasks.c **** 
 437:FreeRTOS\src/tasks.c **** /* File private functions. --------------------------------*/
 438:FreeRTOS\src/tasks.c **** 
 439:FreeRTOS\src/tasks.c **** /**
 440:FreeRTOS\src/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 441:FreeRTOS\src/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 442:FreeRTOS\src/tasks.c ****  * is in any other state.
 443:FreeRTOS\src/tasks.c ****  */
 444:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 445:FreeRTOS\src/tasks.c **** 
 446:FreeRTOS\src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 447:FreeRTOS\src/tasks.c **** 
 448:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 449:FreeRTOS\src/tasks.c **** 
 450:FreeRTOS\src/tasks.c **** /*
 451:FreeRTOS\src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 452:FreeRTOS\src/tasks.c ****  * automatically upon the creation of the first task.
 453:FreeRTOS\src/tasks.c ****  */
 454:FreeRTOS\src/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 455:FreeRTOS\src/tasks.c **** 
 456:FreeRTOS\src/tasks.c **** /*
 457:FreeRTOS\src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 458:FreeRTOS\src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 459:FreeRTOS\src/tasks.c ****  * creation of the first user task.
 460:FreeRTOS\src/tasks.c ****  *
 461:FreeRTOS\src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 462:FreeRTOS\src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 463:FreeRTOS\src/tasks.c ****  *
 464:FreeRTOS\src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 465:FreeRTOS\src/tasks.c ****  *
 466:FreeRTOS\src/tasks.c ****  */
 467:FreeRTOS\src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 468:FreeRTOS\src/tasks.c **** 
 469:FreeRTOS\src/tasks.c **** /*
 470:FreeRTOS\src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 471:FreeRTOS\src/tasks.c ****  * including the stack pointed to by the TCB.
 472:FreeRTOS\src/tasks.c ****  *
 473:FreeRTOS\src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 474:FreeRTOS\src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 475:FreeRTOS\src/tasks.c ****  */
 476:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 477:FreeRTOS\src/tasks.c **** 
 478:FreeRTOS\src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 479:FreeRTOS\src/tasks.c **** 
 480:FreeRTOS\src/tasks.c **** #endif
 481:FreeRTOS\src/tasks.c **** 
 482:FreeRTOS\src/tasks.c **** /*
 483:FreeRTOS\src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 484:FreeRTOS\src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 485:FreeRTOS\src/tasks.c ****  * and its TCB deleted.
 486:FreeRTOS\src/tasks.c ****  */
 487:FreeRTOS\src/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 10


 488:FreeRTOS\src/tasks.c **** 
 489:FreeRTOS\src/tasks.c **** /*
 490:FreeRTOS\src/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 491:FreeRTOS\src/tasks.c ****  * either the current or the overflow delayed task list.
 492:FreeRTOS\src/tasks.c ****  */
 493:FreeRTOS\src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 494:FreeRTOS\src/tasks.c **** 
 495:FreeRTOS\src/tasks.c **** /*
 496:FreeRTOS\src/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 497:FreeRTOS\src/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 498:FreeRTOS\src/tasks.c ****  * a suspended list, etc.).
 499:FreeRTOS\src/tasks.c ****  *
 500:FreeRTOS\src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 501:FreeRTOS\src/tasks.c ****  * NORMAL APPLICATION CODE.
 502:FreeRTOS\src/tasks.c ****  */
 503:FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 504:FreeRTOS\src/tasks.c **** 
 505:FreeRTOS\src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 506:FreeRTOS\src/tasks.c **** 
 507:FreeRTOS\src/tasks.c **** #endif
 508:FreeRTOS\src/tasks.c **** 
 509:FreeRTOS\src/tasks.c **** /*
 510:FreeRTOS\src/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 511:FreeRTOS\src/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 512:FreeRTOS\src/tasks.c ****  */
 513:FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 514:FreeRTOS\src/tasks.c **** 
 515:FreeRTOS\src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 516:FreeRTOS\src/tasks.c **** 
 517:FreeRTOS\src/tasks.c **** #endif
 518:FreeRTOS\src/tasks.c **** 
 519:FreeRTOS\src/tasks.c **** /*
 520:FreeRTOS\src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 521:FreeRTOS\src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 522:FreeRTOS\src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 523:FreeRTOS\src/tasks.c ****  */
 524:FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 525:FreeRTOS\src/tasks.c **** 
 526:FreeRTOS\src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 527:FreeRTOS\src/tasks.c **** 
 528:FreeRTOS\src/tasks.c **** #endif
 529:FreeRTOS\src/tasks.c **** 
 530:FreeRTOS\src/tasks.c **** /*
 531:FreeRTOS\src/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 532:FreeRTOS\src/tasks.c ****  * next move a task from the Blocked state to the Running state.
 533:FreeRTOS\src/tasks.c ****  *
 534:FreeRTOS\src/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 535:FreeRTOS\src/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 536:FreeRTOS\src/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 537:FreeRTOS\src/tasks.c ****  * set to a value other than 1.
 538:FreeRTOS\src/tasks.c ****  */
 539:FreeRTOS\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 540:FreeRTOS\src/tasks.c **** 
 541:FreeRTOS\src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 542:FreeRTOS\src/tasks.c **** 
 543:FreeRTOS\src/tasks.c **** #endif
 544:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 11


 545:FreeRTOS\src/tasks.c **** /*
 546:FreeRTOS\src/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 547:FreeRTOS\src/tasks.c ****  * will exit the Blocked state.
 548:FreeRTOS\src/tasks.c ****  */
 549:FreeRTOS\src/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 550:FreeRTOS\src/tasks.c **** 
 551:FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 552:FreeRTOS\src/tasks.c **** 
 553:FreeRTOS\src/tasks.c **** 	/*
 554:FreeRTOS\src/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 555:FreeRTOS\src/tasks.c **** 	 * human readable tables of task information.
 556:FreeRTOS\src/tasks.c **** 	 */
 557:FreeRTOS\src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 558:FreeRTOS\src/tasks.c **** 
 559:FreeRTOS\src/tasks.c **** #endif
 560:FreeRTOS\src/tasks.c **** 
 561:FreeRTOS\src/tasks.c **** /*
 562:FreeRTOS\src/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 563:FreeRTOS\src/tasks.c ****  * dynamically to fill in the structure's members.
 564:FreeRTOS\src/tasks.c ****  */
 565:FreeRTOS\src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 566:FreeRTOS\src/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 567:FreeRTOS\src/tasks.c **** 									const uint32_t ulStackDepth,
 568:FreeRTOS\src/tasks.c **** 									void * const pvParameters,
 569:FreeRTOS\src/tasks.c **** 									UBaseType_t uxPriority,
 570:FreeRTOS\src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 571:FreeRTOS\src/tasks.c **** 									TCB_t *pxNewTCB,
 572:FreeRTOS\src/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 573:FreeRTOS\src/tasks.c **** 
 574:FreeRTOS\src/tasks.c **** /*
 575:FreeRTOS\src/tasks.c ****  * Called after a new task has been created and initialised to place the task
 576:FreeRTOS\src/tasks.c ****  * under the control of the scheduler.
 577:FreeRTOS\src/tasks.c ****  */
 578:FreeRTOS\src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 579:FreeRTOS\src/tasks.c **** 
 580:FreeRTOS\src/tasks.c **** /*
 581:FreeRTOS\src/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 582:FreeRTOS\src/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 583:FreeRTOS\src/tasks.c ****  * called by the function.
 584:FreeRTOS\src/tasks.c ****  */
 585:FreeRTOS\src/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 586:FreeRTOS\src/tasks.c **** 
 587:FreeRTOS\src/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 588:FreeRTOS\src/tasks.c **** 
 589:FreeRTOS\src/tasks.c **** #endif
 590:FreeRTOS\src/tasks.c **** 
 591:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 592:FreeRTOS\src/tasks.c **** 
 593:FreeRTOS\src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 594:FreeRTOS\src/tasks.c **** 
 595:FreeRTOS\src/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 596:FreeRTOS\src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 597:FreeRTOS\src/tasks.c **** 									const uint32_t ulStackDepth,
 598:FreeRTOS\src/tasks.c **** 									void * const pvParameters,
 599:FreeRTOS\src/tasks.c **** 									UBaseType_t uxPriority,
 600:FreeRTOS\src/tasks.c **** 									StackType_t * const puxStackBuffer,
 601:FreeRTOS\src/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 12


 602:FreeRTOS\src/tasks.c **** 	{
 603:FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 604:FreeRTOS\src/tasks.c **** 	TaskHandle_t xReturn;
 605:FreeRTOS\src/tasks.c **** 
 606:FreeRTOS\src/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 607:FreeRTOS\src/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 608:FreeRTOS\src/tasks.c **** 
 609:FreeRTOS\src/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 610:FreeRTOS\src/tasks.c **** 		{
 611:FreeRTOS\src/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 612:FreeRTOS\src/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 613:FreeRTOS\src/tasks.c **** 			structure. */
 614:FreeRTOS\src/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 615:FreeRTOS\src/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 616:FreeRTOS\src/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 617:FreeRTOS\src/tasks.c **** 		}
 618:FreeRTOS\src/tasks.c **** 		#endif /* configASSERT_DEFINED */
 619:FreeRTOS\src/tasks.c **** 
 620:FreeRTOS\src/tasks.c **** 
 621:FreeRTOS\src/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 622:FreeRTOS\src/tasks.c **** 		{
 623:FreeRTOS\src/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 624:FreeRTOS\src/tasks.c **** 			function - use them. */
 625:FreeRTOS\src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 626:FreeRTOS\src/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 627:FreeRTOS\src/tasks.c **** 
 628:FreeRTOS\src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 629:FreeRTOS\src/tasks.c **** 			{
 630:FreeRTOS\src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 631:FreeRTOS\src/tasks.c **** 				task was created statically in case the task is later deleted. */
 632:FreeRTOS\src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 633:FreeRTOS\src/tasks.c **** 			}
 634:FreeRTOS\src/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 635:FreeRTOS\src/tasks.c **** 
 636:FreeRTOS\src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 637:FreeRTOS\src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 638:FreeRTOS\src/tasks.c **** 		}
 639:FreeRTOS\src/tasks.c **** 		else
 640:FreeRTOS\src/tasks.c **** 		{
 641:FreeRTOS\src/tasks.c **** 			xReturn = NULL;
 642:FreeRTOS\src/tasks.c **** 		}
 643:FreeRTOS\src/tasks.c **** 
 644:FreeRTOS\src/tasks.c **** 		return xReturn;
 645:FreeRTOS\src/tasks.c **** 	}
 646:FreeRTOS\src/tasks.c **** 
 647:FreeRTOS\src/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 648:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 649:FreeRTOS\src/tasks.c **** 
 650:FreeRTOS\src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 651:FreeRTOS\src/tasks.c **** 
 652:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 653:FreeRTOS\src/tasks.c **** 	{
 654:FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 655:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 656:FreeRTOS\src/tasks.c **** 
 657:FreeRTOS\src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 658:FreeRTOS\src/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 13


 659:FreeRTOS\src/tasks.c **** 
 660:FreeRTOS\src/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 661:FreeRTOS\src/tasks.c **** 		{
 662:FreeRTOS\src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 663:FreeRTOS\src/tasks.c **** 			on the implementation of the port malloc function and whether or
 664:FreeRTOS\src/tasks.c **** 			not static allocation is being used. */
 665:FreeRTOS\src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 666:FreeRTOS\src/tasks.c **** 
 667:FreeRTOS\src/tasks.c **** 			/* Store the stack location in the TCB. */
 668:FreeRTOS\src/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 669:FreeRTOS\src/tasks.c **** 
 670:FreeRTOS\src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 671:FreeRTOS\src/tasks.c **** 			{
 672:FreeRTOS\src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 673:FreeRTOS\src/tasks.c **** 				task was created statically in case the task is later deleted. */
 674:FreeRTOS\src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 675:FreeRTOS\src/tasks.c **** 			}
 676:FreeRTOS\src/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 677:FreeRTOS\src/tasks.c **** 
 678:FreeRTOS\src/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 679:FreeRTOS\src/tasks.c **** 									pxTaskDefinition->pcName,
 680:FreeRTOS\src/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 681:FreeRTOS\src/tasks.c **** 									pxTaskDefinition->pvParameters,
 682:FreeRTOS\src/tasks.c **** 									pxTaskDefinition->uxPriority,
 683:FreeRTOS\src/tasks.c **** 									pxCreatedTask, pxNewTCB,
 684:FreeRTOS\src/tasks.c **** 									pxTaskDefinition->xRegions );
 685:FreeRTOS\src/tasks.c **** 
 686:FreeRTOS\src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 687:FreeRTOS\src/tasks.c **** 			xReturn = pdPASS;
 688:FreeRTOS\src/tasks.c **** 		}
 689:FreeRTOS\src/tasks.c **** 
 690:FreeRTOS\src/tasks.c **** 		return xReturn;
 691:FreeRTOS\src/tasks.c **** 	}
 692:FreeRTOS\src/tasks.c **** 
 693:FreeRTOS\src/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 694:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 695:FreeRTOS\src/tasks.c **** 
 696:FreeRTOS\src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 697:FreeRTOS\src/tasks.c **** 
 698:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 699:FreeRTOS\src/tasks.c **** 	{
 700:FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 701:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 702:FreeRTOS\src/tasks.c **** 
 703:FreeRTOS\src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 704:FreeRTOS\src/tasks.c **** 
 705:FreeRTOS\src/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 706:FreeRTOS\src/tasks.c **** 		{
 707:FreeRTOS\src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 708:FreeRTOS\src/tasks.c **** 			on the implementation of the port malloc function and whether or
 709:FreeRTOS\src/tasks.c **** 			not static allocation is being used. */
 710:FreeRTOS\src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 711:FreeRTOS\src/tasks.c **** 
 712:FreeRTOS\src/tasks.c **** 			if( pxNewTCB != NULL )
 713:FreeRTOS\src/tasks.c **** 			{
 714:FreeRTOS\src/tasks.c **** 				/* Store the stack location in the TCB. */
 715:FreeRTOS\src/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 14


 716:FreeRTOS\src/tasks.c **** 
 717:FreeRTOS\src/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 718:FreeRTOS\src/tasks.c **** 				{
 719:FreeRTOS\src/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 720:FreeRTOS\src/tasks.c **** 					this task had a statically allocated stack in case it is
 721:FreeRTOS\src/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 722:FreeRTOS\src/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 723:FreeRTOS\src/tasks.c **** 				}
 724:FreeRTOS\src/tasks.c **** 				#endif
 725:FreeRTOS\src/tasks.c **** 
 726:FreeRTOS\src/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 727:FreeRTOS\src/tasks.c **** 										pxTaskDefinition->pcName,
 728:FreeRTOS\src/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 729:FreeRTOS\src/tasks.c **** 										pxTaskDefinition->pvParameters,
 730:FreeRTOS\src/tasks.c **** 										pxTaskDefinition->uxPriority,
 731:FreeRTOS\src/tasks.c **** 										pxCreatedTask, pxNewTCB,
 732:FreeRTOS\src/tasks.c **** 										pxTaskDefinition->xRegions );
 733:FreeRTOS\src/tasks.c **** 
 734:FreeRTOS\src/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 735:FreeRTOS\src/tasks.c **** 				xReturn = pdPASS;
 736:FreeRTOS\src/tasks.c **** 			}
 737:FreeRTOS\src/tasks.c **** 		}
 738:FreeRTOS\src/tasks.c **** 
 739:FreeRTOS\src/tasks.c **** 		return xReturn;
 740:FreeRTOS\src/tasks.c **** 	}
 741:FreeRTOS\src/tasks.c **** 
 742:FreeRTOS\src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 743:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 744:FreeRTOS\src/tasks.c **** 
 745:FreeRTOS\src/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 746:FreeRTOS\src/tasks.c **** 
 747:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 748:FreeRTOS\src/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 749:FreeRTOS\src/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 750:FreeRTOS\src/tasks.c **** 							void * const pvParameters,
 751:FreeRTOS\src/tasks.c **** 							UBaseType_t uxPriority,
 752:FreeRTOS\src/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 753:FreeRTOS\src/tasks.c **** 	{
 754:FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 755:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
 756:FreeRTOS\src/tasks.c **** 
 757:FreeRTOS\src/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 758:FreeRTOS\src/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 759:FreeRTOS\src/tasks.c **** 		the TCB then the stack. */
 760:FreeRTOS\src/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 761:FreeRTOS\src/tasks.c **** 		{
 762:FreeRTOS\src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 763:FreeRTOS\src/tasks.c **** 			the implementation of the port malloc function and whether or not static
 764:FreeRTOS\src/tasks.c **** 			allocation is being used. */
 765:FreeRTOS\src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 766:FreeRTOS\src/tasks.c **** 
 767:FreeRTOS\src/tasks.c **** 			if( pxNewTCB != NULL )
 768:FreeRTOS\src/tasks.c **** 			{
 769:FreeRTOS\src/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 770:FreeRTOS\src/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 771:FreeRTOS\src/tasks.c **** 				be deleted later if required. */
 772:FreeRTOS\src/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 15


 773:FreeRTOS\src/tasks.c **** 
 774:FreeRTOS\src/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 775:FreeRTOS\src/tasks.c **** 				{
 776:FreeRTOS\src/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 777:FreeRTOS\src/tasks.c **** 					vPortFree( pxNewTCB );
 778:FreeRTOS\src/tasks.c **** 					pxNewTCB = NULL;
 779:FreeRTOS\src/tasks.c **** 				}
 780:FreeRTOS\src/tasks.c **** 			}
 781:FreeRTOS\src/tasks.c **** 		}
 782:FreeRTOS\src/tasks.c **** 		#else /* portSTACK_GROWTH */
 783:FreeRTOS\src/tasks.c **** 		{
 784:FreeRTOS\src/tasks.c **** 		StackType_t *pxStack;
 785:FreeRTOS\src/tasks.c **** 
 786:FreeRTOS\src/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 787:FreeRTOS\src/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 788:FreeRTOS\src/tasks.c **** 
 789:FreeRTOS\src/tasks.c **** 			if( pxStack != NULL )
 790:FreeRTOS\src/tasks.c **** 			{
 791:FreeRTOS\src/tasks.c **** 				/* Allocate space for the TCB. */
 792:FreeRTOS\src/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 793:FreeRTOS\src/tasks.c **** 
 794:FreeRTOS\src/tasks.c **** 				if( pxNewTCB != NULL )
 795:FreeRTOS\src/tasks.c **** 				{
 796:FreeRTOS\src/tasks.c **** 					/* Store the stack location in the TCB. */
 797:FreeRTOS\src/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 798:FreeRTOS\src/tasks.c **** 				}
 799:FreeRTOS\src/tasks.c **** 				else
 800:FreeRTOS\src/tasks.c **** 				{
 801:FreeRTOS\src/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 802:FreeRTOS\src/tasks.c **** 					it again. */
 803:FreeRTOS\src/tasks.c **** 					vPortFree( pxStack );
 804:FreeRTOS\src/tasks.c **** 				}
 805:FreeRTOS\src/tasks.c **** 			}
 806:FreeRTOS\src/tasks.c **** 			else
 807:FreeRTOS\src/tasks.c **** 			{
 808:FreeRTOS\src/tasks.c **** 				pxNewTCB = NULL;
 809:FreeRTOS\src/tasks.c **** 			}
 810:FreeRTOS\src/tasks.c **** 		}
 811:FreeRTOS\src/tasks.c **** 		#endif /* portSTACK_GROWTH */
 812:FreeRTOS\src/tasks.c **** 
 813:FreeRTOS\src/tasks.c **** 		if( pxNewTCB != NULL )
 814:FreeRTOS\src/tasks.c **** 		{
 815:FreeRTOS\src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 816:FreeRTOS\src/tasks.c **** 			{
 817:FreeRTOS\src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 818:FreeRTOS\src/tasks.c **** 				task was created dynamically in case it is later deleted. */
 819:FreeRTOS\src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 820:FreeRTOS\src/tasks.c **** 			}
 821:FreeRTOS\src/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 822:FreeRTOS\src/tasks.c **** 
 823:FreeRTOS\src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 824:FreeRTOS\src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 825:FreeRTOS\src/tasks.c **** 			xReturn = pdPASS;
 826:FreeRTOS\src/tasks.c **** 		}
 827:FreeRTOS\src/tasks.c **** 		else
 828:FreeRTOS\src/tasks.c **** 		{
 829:FreeRTOS\src/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 16


 830:FreeRTOS\src/tasks.c **** 		}
 831:FreeRTOS\src/tasks.c **** 
 832:FreeRTOS\src/tasks.c **** 		return xReturn;
 833:FreeRTOS\src/tasks.c **** 	}
 834:FreeRTOS\src/tasks.c **** 
 835:FreeRTOS\src/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 836:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 837:FreeRTOS\src/tasks.c **** 
 838:FreeRTOS\src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 839:FreeRTOS\src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 840:FreeRTOS\src/tasks.c **** 									const uint32_t ulStackDepth,
 841:FreeRTOS\src/tasks.c **** 									void * const pvParameters,
 842:FreeRTOS\src/tasks.c **** 									UBaseType_t uxPriority,
 843:FreeRTOS\src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 844:FreeRTOS\src/tasks.c **** 									TCB_t *pxNewTCB,
 845:FreeRTOS\src/tasks.c **** 									const MemoryRegion_t * const xRegions )
 846:FreeRTOS\src/tasks.c **** {
 847:FreeRTOS\src/tasks.c **** StackType_t *pxTopOfStack;
 848:FreeRTOS\src/tasks.c **** UBaseType_t x;
 849:FreeRTOS\src/tasks.c **** 
 850:FreeRTOS\src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 851:FreeRTOS\src/tasks.c **** 		/* Should the task be created in privileged mode? */
 852:FreeRTOS\src/tasks.c **** 		BaseType_t xRunPrivileged;
 853:FreeRTOS\src/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 854:FreeRTOS\src/tasks.c **** 		{
 855:FreeRTOS\src/tasks.c **** 			xRunPrivileged = pdTRUE;
 856:FreeRTOS\src/tasks.c **** 		}
 857:FreeRTOS\src/tasks.c **** 		else
 858:FreeRTOS\src/tasks.c **** 		{
 859:FreeRTOS\src/tasks.c **** 			xRunPrivileged = pdFALSE;
 860:FreeRTOS\src/tasks.c **** 		}
 861:FreeRTOS\src/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 862:FreeRTOS\src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 863:FreeRTOS\src/tasks.c **** 
 864:FreeRTOS\src/tasks.c **** 	configASSERT( pcName );
 865:FreeRTOS\src/tasks.c **** 
 866:FreeRTOS\src/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 867:FreeRTOS\src/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 868:FreeRTOS\src/tasks.c **** 	{
 869:FreeRTOS\src/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 870:FreeRTOS\src/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 871:FreeRTOS\src/tasks.c **** 	}
 872:FreeRTOS\src/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 873:FreeRTOS\src/tasks.c **** 
 874:FreeRTOS\src/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 875:FreeRTOS\src/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 876:FreeRTOS\src/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 877:FreeRTOS\src/tasks.c **** 	by the port. */
 878:FreeRTOS\src/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 879:FreeRTOS\src/tasks.c **** 	{
 880:FreeRTOS\src/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 881:FreeRTOS\src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 882:FreeRTOS\src/tasks.c **** 
 883:FreeRTOS\src/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 884:FreeRTOS\src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 885:FreeRTOS\src/tasks.c **** 
 886:FreeRTOS\src/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 17


 887:FreeRTOS\src/tasks.c **** 		{
 888:FreeRTOS\src/tasks.c **** 			/* Also record the stack's high address, which may assist
 889:FreeRTOS\src/tasks.c **** 			debugging. */
 890:FreeRTOS\src/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 891:FreeRTOS\src/tasks.c **** 		}
 892:FreeRTOS\src/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 893:FreeRTOS\src/tasks.c **** 	}
 894:FreeRTOS\src/tasks.c **** 	#else /* portSTACK_GROWTH */
 895:FreeRTOS\src/tasks.c **** 	{
 896:FreeRTOS\src/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 897:FreeRTOS\src/tasks.c **** 
 898:FreeRTOS\src/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 899:FreeRTOS\src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 900:FreeRTOS\src/tasks.c **** 
 901:FreeRTOS\src/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 902:FreeRTOS\src/tasks.c **** 		performed. */
 903:FreeRTOS\src/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 904:FreeRTOS\src/tasks.c **** 	}
 905:FreeRTOS\src/tasks.c **** 	#endif /* portSTACK_GROWTH */
 906:FreeRTOS\src/tasks.c **** 
 907:FreeRTOS\src/tasks.c **** 	/* Store the task name in the TCB. */
 908:FreeRTOS\src/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 909:FreeRTOS\src/tasks.c **** 	{
 910:FreeRTOS\src/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 911:FreeRTOS\src/tasks.c **** 
 912:FreeRTOS\src/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 913:FreeRTOS\src/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 914:FreeRTOS\src/tasks.c **** 		string is not accessible (extremely unlikely). */
 915:FreeRTOS\src/tasks.c **** 		if( pcName[ x ] == ( char ) 0x00 )
 916:FreeRTOS\src/tasks.c **** 		{
 917:FreeRTOS\src/tasks.c **** 			break;
 918:FreeRTOS\src/tasks.c **** 		}
 919:FreeRTOS\src/tasks.c **** 		else
 920:FreeRTOS\src/tasks.c **** 		{
 921:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 922:FreeRTOS\src/tasks.c **** 		}
 923:FreeRTOS\src/tasks.c **** 	}
 924:FreeRTOS\src/tasks.c **** 
 925:FreeRTOS\src/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 926:FreeRTOS\src/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 927:FreeRTOS\src/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 928:FreeRTOS\src/tasks.c **** 
 929:FreeRTOS\src/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 930:FreeRTOS\src/tasks.c **** 	remove the privilege bit if one is present. */
 931:FreeRTOS\src/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 932:FreeRTOS\src/tasks.c **** 	{
 933:FreeRTOS\src/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 934:FreeRTOS\src/tasks.c **** 	}
 935:FreeRTOS\src/tasks.c **** 	else
 936:FreeRTOS\src/tasks.c **** 	{
 937:FreeRTOS\src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 938:FreeRTOS\src/tasks.c **** 	}
 939:FreeRTOS\src/tasks.c **** 
 940:FreeRTOS\src/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 941:FreeRTOS\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 942:FreeRTOS\src/tasks.c **** 	{
 943:FreeRTOS\src/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 18


 944:FreeRTOS\src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 945:FreeRTOS\src/tasks.c **** 	}
 946:FreeRTOS\src/tasks.c **** 	#endif /* configUSE_MUTEXES */
 947:FreeRTOS\src/tasks.c **** 
 948:FreeRTOS\src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 949:FreeRTOS\src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 950:FreeRTOS\src/tasks.c **** 
 951:FreeRTOS\src/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 952:FreeRTOS\src/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 953:FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 954:FreeRTOS\src/tasks.c **** 
 955:FreeRTOS\src/tasks.c **** 	/* Event lists are always in priority order. */
 956:FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 957:FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 958:FreeRTOS\src/tasks.c **** 
 959:FreeRTOS\src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 960:FreeRTOS\src/tasks.c **** 	{
 961:FreeRTOS\src/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 962:FreeRTOS\src/tasks.c **** 	}
 963:FreeRTOS\src/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 964:FreeRTOS\src/tasks.c **** 
 965:FreeRTOS\src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 966:FreeRTOS\src/tasks.c **** 	{
 967:FreeRTOS\src/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 968:FreeRTOS\src/tasks.c **** 	}
 969:FreeRTOS\src/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 970:FreeRTOS\src/tasks.c **** 
 971:FreeRTOS\src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 972:FreeRTOS\src/tasks.c **** 	{
 973:FreeRTOS\src/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 974:FreeRTOS\src/tasks.c **** 	}
 975:FreeRTOS\src/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 976:FreeRTOS\src/tasks.c **** 
 977:FreeRTOS\src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 978:FreeRTOS\src/tasks.c **** 	{
 979:FreeRTOS\src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 980:FreeRTOS\src/tasks.c **** 	}
 981:FreeRTOS\src/tasks.c **** 	#else
 982:FreeRTOS\src/tasks.c **** 	{
 983:FreeRTOS\src/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 984:FreeRTOS\src/tasks.c **** 		( void ) xRegions;
 985:FreeRTOS\src/tasks.c **** 	}
 986:FreeRTOS\src/tasks.c **** 	#endif
 987:FreeRTOS\src/tasks.c **** 
 988:FreeRTOS\src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 989:FreeRTOS\src/tasks.c **** 	{
 990:FreeRTOS\src/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 991:FreeRTOS\src/tasks.c **** 		{
 992:FreeRTOS\src/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 993:FreeRTOS\src/tasks.c **** 		}
 994:FreeRTOS\src/tasks.c **** 	}
 995:FreeRTOS\src/tasks.c **** 	#endif
 996:FreeRTOS\src/tasks.c **** 
 997:FreeRTOS\src/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 998:FreeRTOS\src/tasks.c **** 	{
 999:FreeRTOS\src/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
1000:FreeRTOS\src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 19


1001:FreeRTOS\src/tasks.c **** 	}
1002:FreeRTOS\src/tasks.c **** 	#endif
1003:FreeRTOS\src/tasks.c **** 
1004:FreeRTOS\src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
1005:FreeRTOS\src/tasks.c **** 	{
1006:FreeRTOS\src/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
1007:FreeRTOS\src/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1008:FreeRTOS\src/tasks.c **** 	}
1009:FreeRTOS\src/tasks.c **** 	#endif
1010:FreeRTOS\src/tasks.c **** 
1011:FreeRTOS\src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1012:FreeRTOS\src/tasks.c **** 	{
1013:FreeRTOS\src/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1014:FreeRTOS\src/tasks.c **** 	}
1015:FreeRTOS\src/tasks.c **** 	#endif
1016:FreeRTOS\src/tasks.c **** 
1017:FreeRTOS\src/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1018:FreeRTOS\src/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1019:FreeRTOS\src/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1020:FreeRTOS\src/tasks.c **** 	the top of stack variable is updated. */
1021:FreeRTOS\src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1022:FreeRTOS\src/tasks.c **** 	{
1023:FreeRTOS\src/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1024:FreeRTOS\src/tasks.c **** 	}
1025:FreeRTOS\src/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1026:FreeRTOS\src/tasks.c **** 	{
1027:FreeRTOS\src/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1028:FreeRTOS\src/tasks.c **** 	}
1029:FreeRTOS\src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1030:FreeRTOS\src/tasks.c **** 
1031:FreeRTOS\src/tasks.c **** 	if( pxCreatedTask != NULL )
1032:FreeRTOS\src/tasks.c **** 	{
1033:FreeRTOS\src/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1034:FreeRTOS\src/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1035:FreeRTOS\src/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1036:FreeRTOS\src/tasks.c **** 	}
1037:FreeRTOS\src/tasks.c **** 	else
1038:FreeRTOS\src/tasks.c **** 	{
1039:FreeRTOS\src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1040:FreeRTOS\src/tasks.c **** 	}
1041:FreeRTOS\src/tasks.c **** }
1042:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1043:FreeRTOS\src/tasks.c **** 
1044:FreeRTOS\src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1045:FreeRTOS\src/tasks.c **** {
1046:FreeRTOS\src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1047:FreeRTOS\src/tasks.c **** 	updated. */
1048:FreeRTOS\src/tasks.c **** 	taskENTER_CRITICAL();
1049:FreeRTOS\src/tasks.c **** 	{
1050:FreeRTOS\src/tasks.c **** 		uxCurrentNumberOfTasks++;
1051:FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB == NULL )
1052:FreeRTOS\src/tasks.c **** 		{
1053:FreeRTOS\src/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1054:FreeRTOS\src/tasks.c **** 			the suspended state - make this the current task. */
1055:FreeRTOS\src/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1056:FreeRTOS\src/tasks.c **** 
1057:FreeRTOS\src/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 20


1058:FreeRTOS\src/tasks.c **** 			{
1059:FreeRTOS\src/tasks.c **** 				/* This is the first task to be created so do the preliminary
1060:FreeRTOS\src/tasks.c **** 				initialisation required.  We will not recover if this call
1061:FreeRTOS\src/tasks.c **** 				fails, but we will report the failure. */
1062:FreeRTOS\src/tasks.c **** 				prvInitialiseTaskLists();
1063:FreeRTOS\src/tasks.c **** 			}
1064:FreeRTOS\src/tasks.c **** 			else
1065:FreeRTOS\src/tasks.c **** 			{
1066:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1067:FreeRTOS\src/tasks.c **** 			}
1068:FreeRTOS\src/tasks.c **** 		}
1069:FreeRTOS\src/tasks.c **** 		else
1070:FreeRTOS\src/tasks.c **** 		{
1071:FreeRTOS\src/tasks.c **** 			/* If the scheduler is not already running, make this task the
1072:FreeRTOS\src/tasks.c **** 			current task if it is the highest priority task to be created
1073:FreeRTOS\src/tasks.c **** 			so far. */
1074:FreeRTOS\src/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1075:FreeRTOS\src/tasks.c **** 			{
1076:FreeRTOS\src/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1077:FreeRTOS\src/tasks.c **** 				{
1078:FreeRTOS\src/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1079:FreeRTOS\src/tasks.c **** 				}
1080:FreeRTOS\src/tasks.c **** 				else
1081:FreeRTOS\src/tasks.c **** 				{
1082:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1083:FreeRTOS\src/tasks.c **** 				}
1084:FreeRTOS\src/tasks.c **** 			}
1085:FreeRTOS\src/tasks.c **** 			else
1086:FreeRTOS\src/tasks.c **** 			{
1087:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1088:FreeRTOS\src/tasks.c **** 			}
1089:FreeRTOS\src/tasks.c **** 		}
1090:FreeRTOS\src/tasks.c **** 
1091:FreeRTOS\src/tasks.c **** 		uxTaskNumber++;
1092:FreeRTOS\src/tasks.c **** 
1093:FreeRTOS\src/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1094:FreeRTOS\src/tasks.c **** 		{
1095:FreeRTOS\src/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1096:FreeRTOS\src/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1097:FreeRTOS\src/tasks.c **** 		}
1098:FreeRTOS\src/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1099:FreeRTOS\src/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1100:FreeRTOS\src/tasks.c **** 
1101:FreeRTOS\src/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1102:FreeRTOS\src/tasks.c **** 
1103:FreeRTOS\src/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1104:FreeRTOS\src/tasks.c **** 	}
1105:FreeRTOS\src/tasks.c **** 	taskEXIT_CRITICAL();
1106:FreeRTOS\src/tasks.c **** 
1107:FreeRTOS\src/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1108:FreeRTOS\src/tasks.c **** 	{
1109:FreeRTOS\src/tasks.c **** 		/* If the created task is of a higher priority than the current task
1110:FreeRTOS\src/tasks.c **** 		then it should run now. */
1111:FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1112:FreeRTOS\src/tasks.c **** 		{
1113:FreeRTOS\src/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1114:FreeRTOS\src/tasks.c **** 		}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 21


1115:FreeRTOS\src/tasks.c **** 		else
1116:FreeRTOS\src/tasks.c **** 		{
1117:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1118:FreeRTOS\src/tasks.c **** 		}
1119:FreeRTOS\src/tasks.c **** 	}
1120:FreeRTOS\src/tasks.c **** 	else
1121:FreeRTOS\src/tasks.c **** 	{
1122:FreeRTOS\src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1123:FreeRTOS\src/tasks.c **** 	}
1124:FreeRTOS\src/tasks.c **** }
1125:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1126:FreeRTOS\src/tasks.c **** 
1127:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1128:FreeRTOS\src/tasks.c **** 
1129:FreeRTOS\src/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1130:FreeRTOS\src/tasks.c **** 	{
1131:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
1132:FreeRTOS\src/tasks.c **** 
1133:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
1134:FreeRTOS\src/tasks.c **** 		{
1135:FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1136:FreeRTOS\src/tasks.c **** 			being deleted. */
1137:FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1138:FreeRTOS\src/tasks.c **** 
1139:FreeRTOS\src/tasks.c **** 			/* Remove task from the ready list. */
1140:FreeRTOS\src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1141:FreeRTOS\src/tasks.c **** 			{
1142:FreeRTOS\src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1143:FreeRTOS\src/tasks.c **** 			}
1144:FreeRTOS\src/tasks.c **** 			else
1145:FreeRTOS\src/tasks.c **** 			{
1146:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1147:FreeRTOS\src/tasks.c **** 			}
1148:FreeRTOS\src/tasks.c **** 
1149:FreeRTOS\src/tasks.c **** 			/* Is the task waiting on an event also? */
1150:FreeRTOS\src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1151:FreeRTOS\src/tasks.c **** 			{
1152:FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1153:FreeRTOS\src/tasks.c **** 			}
1154:FreeRTOS\src/tasks.c **** 			else
1155:FreeRTOS\src/tasks.c **** 			{
1156:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1157:FreeRTOS\src/tasks.c **** 			}
1158:FreeRTOS\src/tasks.c **** 
1159:FreeRTOS\src/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1160:FreeRTOS\src/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1161:FreeRTOS\src/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1162:FreeRTOS\src/tasks.c **** 			not return. */
1163:FreeRTOS\src/tasks.c **** 			uxTaskNumber++;
1164:FreeRTOS\src/tasks.c **** 
1165:FreeRTOS\src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1166:FreeRTOS\src/tasks.c **** 			{
1167:FreeRTOS\src/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1168:FreeRTOS\src/tasks.c **** 				task itself, as a context switch to another task is required.
1169:FreeRTOS\src/tasks.c **** 				Place the task in the termination list.  The idle task will
1170:FreeRTOS\src/tasks.c **** 				check the termination list and free up any memory allocated by
1171:FreeRTOS\src/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 22


1172:FreeRTOS\src/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1173:FreeRTOS\src/tasks.c **** 
1174:FreeRTOS\src/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1175:FreeRTOS\src/tasks.c **** 				there is a task that has been deleted and that it should therefore
1176:FreeRTOS\src/tasks.c **** 				check the xTasksWaitingTermination list. */
1177:FreeRTOS\src/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1178:FreeRTOS\src/tasks.c **** 
1179:FreeRTOS\src/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1180:FreeRTOS\src/tasks.c **** 				in which Windows specific clean up operations are performed,
1181:FreeRTOS\src/tasks.c **** 				after which it is not possible to yield away from this task -
1182:FreeRTOS\src/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1183:FreeRTOS\src/tasks.c **** 				required. */
1184:FreeRTOS\src/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1185:FreeRTOS\src/tasks.c **** 			}
1186:FreeRTOS\src/tasks.c **** 			else
1187:FreeRTOS\src/tasks.c **** 			{
1188:FreeRTOS\src/tasks.c **** 				--uxCurrentNumberOfTasks;
1189:FreeRTOS\src/tasks.c **** 				prvDeleteTCB( pxTCB );
1190:FreeRTOS\src/tasks.c **** 
1191:FreeRTOS\src/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1192:FreeRTOS\src/tasks.c **** 				the task that has just been deleted. */
1193:FreeRTOS\src/tasks.c **** 				prvResetNextTaskUnblockTime();
1194:FreeRTOS\src/tasks.c **** 			}
1195:FreeRTOS\src/tasks.c **** 
1196:FreeRTOS\src/tasks.c **** 			traceTASK_DELETE( pxTCB );
1197:FreeRTOS\src/tasks.c **** 		}
1198:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
1199:FreeRTOS\src/tasks.c **** 
1200:FreeRTOS\src/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1201:FreeRTOS\src/tasks.c **** 		been deleted. */
1202:FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1203:FreeRTOS\src/tasks.c **** 		{
1204:FreeRTOS\src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1205:FreeRTOS\src/tasks.c **** 			{
1206:FreeRTOS\src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1207:FreeRTOS\src/tasks.c **** 				portYIELD_WITHIN_API();
1208:FreeRTOS\src/tasks.c **** 			}
1209:FreeRTOS\src/tasks.c **** 			else
1210:FreeRTOS\src/tasks.c **** 			{
1211:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1212:FreeRTOS\src/tasks.c **** 			}
1213:FreeRTOS\src/tasks.c **** 		}
1214:FreeRTOS\src/tasks.c **** 	}
1215:FreeRTOS\src/tasks.c **** 
1216:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1217:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1218:FreeRTOS\src/tasks.c **** 
1219:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1220:FreeRTOS\src/tasks.c **** 
1221:FreeRTOS\src/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1222:FreeRTOS\src/tasks.c **** 	{
1223:FreeRTOS\src/tasks.c **** 	TickType_t xTimeToWake;
1224:FreeRTOS\src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1225:FreeRTOS\src/tasks.c **** 
1226:FreeRTOS\src/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1227:FreeRTOS\src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1228:FreeRTOS\src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 23


1229:FreeRTOS\src/tasks.c **** 
1230:FreeRTOS\src/tasks.c **** 		vTaskSuspendAll();
1231:FreeRTOS\src/tasks.c **** 		{
1232:FreeRTOS\src/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1233:FreeRTOS\src/tasks.c **** 			block. */
1234:FreeRTOS\src/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1235:FreeRTOS\src/tasks.c **** 
1236:FreeRTOS\src/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1237:FreeRTOS\src/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1238:FreeRTOS\src/tasks.c **** 
1239:FreeRTOS\src/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1240:FreeRTOS\src/tasks.c **** 			{
1241:FreeRTOS\src/tasks.c **** 				/* The tick count has overflowed since this function was
1242:FreeRTOS\src/tasks.c **** 				lasted called.  In this case the only time we should ever
1243:FreeRTOS\src/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1244:FreeRTOS\src/tasks.c **** 				and the wake time is greater than the tick time.  When this
1245:FreeRTOS\src/tasks.c **** 				is the case it is as if neither time had overflowed. */
1246:FreeRTOS\src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1247:FreeRTOS\src/tasks.c **** 				{
1248:FreeRTOS\src/tasks.c **** 					xShouldDelay = pdTRUE;
1249:FreeRTOS\src/tasks.c **** 				}
1250:FreeRTOS\src/tasks.c **** 				else
1251:FreeRTOS\src/tasks.c **** 				{
1252:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1253:FreeRTOS\src/tasks.c **** 				}
1254:FreeRTOS\src/tasks.c **** 			}
1255:FreeRTOS\src/tasks.c **** 			else
1256:FreeRTOS\src/tasks.c **** 			{
1257:FreeRTOS\src/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1258:FreeRTOS\src/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1259:FreeRTOS\src/tasks.c **** 				tick time is less than the wake time. */
1260:FreeRTOS\src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1261:FreeRTOS\src/tasks.c **** 				{
1262:FreeRTOS\src/tasks.c **** 					xShouldDelay = pdTRUE;
1263:FreeRTOS\src/tasks.c **** 				}
1264:FreeRTOS\src/tasks.c **** 				else
1265:FreeRTOS\src/tasks.c **** 				{
1266:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1267:FreeRTOS\src/tasks.c **** 				}
1268:FreeRTOS\src/tasks.c **** 			}
1269:FreeRTOS\src/tasks.c **** 
1270:FreeRTOS\src/tasks.c **** 			/* Update the wake time ready for the next call. */
1271:FreeRTOS\src/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1272:FreeRTOS\src/tasks.c **** 
1273:FreeRTOS\src/tasks.c **** 			if( xShouldDelay != pdFALSE )
1274:FreeRTOS\src/tasks.c **** 			{
1275:FreeRTOS\src/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1276:FreeRTOS\src/tasks.c **** 
1277:FreeRTOS\src/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1278:FreeRTOS\src/tasks.c **** 				the time to wake, so subtract the current tick count. */
1279:FreeRTOS\src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1280:FreeRTOS\src/tasks.c **** 			}
1281:FreeRTOS\src/tasks.c **** 			else
1282:FreeRTOS\src/tasks.c **** 			{
1283:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1284:FreeRTOS\src/tasks.c **** 			}
1285:FreeRTOS\src/tasks.c **** 		}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 24


1286:FreeRTOS\src/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1287:FreeRTOS\src/tasks.c **** 
1288:FreeRTOS\src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1289:FreeRTOS\src/tasks.c **** 		have put ourselves to sleep. */
1290:FreeRTOS\src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1291:FreeRTOS\src/tasks.c **** 		{
1292:FreeRTOS\src/tasks.c **** 			portYIELD_WITHIN_API();
1293:FreeRTOS\src/tasks.c **** 		}
1294:FreeRTOS\src/tasks.c **** 		else
1295:FreeRTOS\src/tasks.c **** 		{
1296:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1297:FreeRTOS\src/tasks.c **** 		}
1298:FreeRTOS\src/tasks.c **** 	}
1299:FreeRTOS\src/tasks.c **** 
1300:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1301:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1302:FreeRTOS\src/tasks.c **** 
1303:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1304:FreeRTOS\src/tasks.c **** 
1305:FreeRTOS\src/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1306:FreeRTOS\src/tasks.c **** 	{
1307:FreeRTOS\src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1308:FreeRTOS\src/tasks.c **** 
1309:FreeRTOS\src/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1310:FreeRTOS\src/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1311:FreeRTOS\src/tasks.c **** 		{
1312:FreeRTOS\src/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1313:FreeRTOS\src/tasks.c **** 			vTaskSuspendAll();
1314:FreeRTOS\src/tasks.c **** 			{
1315:FreeRTOS\src/tasks.c **** 				traceTASK_DELAY();
1316:FreeRTOS\src/tasks.c **** 
1317:FreeRTOS\src/tasks.c **** 				/* A task that is removed from the event list while the
1318:FreeRTOS\src/tasks.c **** 				scheduler is suspended will not get placed in the ready
1319:FreeRTOS\src/tasks.c **** 				list or removed from the blocked list until the scheduler
1320:FreeRTOS\src/tasks.c **** 				is resumed.
1321:FreeRTOS\src/tasks.c **** 
1322:FreeRTOS\src/tasks.c **** 				This task cannot be in an event list as it is the currently
1323:FreeRTOS\src/tasks.c **** 				executing task. */
1324:FreeRTOS\src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1325:FreeRTOS\src/tasks.c **** 			}
1326:FreeRTOS\src/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1327:FreeRTOS\src/tasks.c **** 		}
1328:FreeRTOS\src/tasks.c **** 		else
1329:FreeRTOS\src/tasks.c **** 		{
1330:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1331:FreeRTOS\src/tasks.c **** 		}
1332:FreeRTOS\src/tasks.c **** 
1333:FreeRTOS\src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1334:FreeRTOS\src/tasks.c **** 		have put ourselves to sleep. */
1335:FreeRTOS\src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1336:FreeRTOS\src/tasks.c **** 		{
1337:FreeRTOS\src/tasks.c **** 			portYIELD_WITHIN_API();
1338:FreeRTOS\src/tasks.c **** 		}
1339:FreeRTOS\src/tasks.c **** 		else
1340:FreeRTOS\src/tasks.c **** 		{
1341:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1342:FreeRTOS\src/tasks.c **** 		}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 25


1343:FreeRTOS\src/tasks.c **** 	}
1344:FreeRTOS\src/tasks.c **** 
1345:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1346:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1347:FreeRTOS\src/tasks.c **** 
1348:FreeRTOS\src/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1349:FreeRTOS\src/tasks.c **** 
1350:FreeRTOS\src/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1351:FreeRTOS\src/tasks.c **** 	{
1352:FreeRTOS\src/tasks.c **** 	eTaskState eReturn;
1353:FreeRTOS\src/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1354:FreeRTOS\src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1355:FreeRTOS\src/tasks.c **** 
1356:FreeRTOS\src/tasks.c **** 		configASSERT( pxTCB );
1357:FreeRTOS\src/tasks.c **** 
1358:FreeRTOS\src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1359:FreeRTOS\src/tasks.c **** 		{
1360:FreeRTOS\src/tasks.c **** 			/* The task calling this function is querying its own state. */
1361:FreeRTOS\src/tasks.c **** 			eReturn = eRunning;
1362:FreeRTOS\src/tasks.c **** 		}
1363:FreeRTOS\src/tasks.c **** 		else
1364:FreeRTOS\src/tasks.c **** 		{
1365:FreeRTOS\src/tasks.c **** 			taskENTER_CRITICAL();
1366:FreeRTOS\src/tasks.c **** 			{
1367:FreeRTOS\src/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1368:FreeRTOS\src/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1369:FreeRTOS\src/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1370:FreeRTOS\src/tasks.c **** 			}
1371:FreeRTOS\src/tasks.c **** 			taskEXIT_CRITICAL();
1372:FreeRTOS\src/tasks.c **** 
1373:FreeRTOS\src/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1374:FreeRTOS\src/tasks.c **** 			{
1375:FreeRTOS\src/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1376:FreeRTOS\src/tasks.c **** 				lists. */
1377:FreeRTOS\src/tasks.c **** 				eReturn = eBlocked;
1378:FreeRTOS\src/tasks.c **** 			}
1379:FreeRTOS\src/tasks.c **** 
1380:FreeRTOS\src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1381:FreeRTOS\src/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1382:FreeRTOS\src/tasks.c **** 				{
1383:FreeRTOS\src/tasks.c **** 					/* The task being queried is referenced from the suspended
1384:FreeRTOS\src/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1385:FreeRTOS\src/tasks.c **** 					indefinitely? */
1386:FreeRTOS\src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1387:FreeRTOS\src/tasks.c **** 					{
1388:FreeRTOS\src/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1389:FreeRTOS\src/tasks.c **** 						{
1390:FreeRTOS\src/tasks.c **** 							/* The task does not appear on the event list item of
1391:FreeRTOS\src/tasks.c **** 							and of the RTOS objects, but could still be in the
1392:FreeRTOS\src/tasks.c **** 							blocked state if it is waiting on its notification
1393:FreeRTOS\src/tasks.c **** 							rather than waiting on an object. */
1394:FreeRTOS\src/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1395:FreeRTOS\src/tasks.c **** 							{
1396:FreeRTOS\src/tasks.c **** 								eReturn = eBlocked;
1397:FreeRTOS\src/tasks.c **** 							}
1398:FreeRTOS\src/tasks.c **** 							else
1399:FreeRTOS\src/tasks.c **** 							{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 26


1400:FreeRTOS\src/tasks.c **** 								eReturn = eSuspended;
1401:FreeRTOS\src/tasks.c **** 							}
1402:FreeRTOS\src/tasks.c **** 						}
1403:FreeRTOS\src/tasks.c **** 						#else
1404:FreeRTOS\src/tasks.c **** 						{
1405:FreeRTOS\src/tasks.c **** 							eReturn = eSuspended;
1406:FreeRTOS\src/tasks.c **** 						}
1407:FreeRTOS\src/tasks.c **** 						#endif
1408:FreeRTOS\src/tasks.c **** 					}
1409:FreeRTOS\src/tasks.c **** 					else
1410:FreeRTOS\src/tasks.c **** 					{
1411:FreeRTOS\src/tasks.c **** 						eReturn = eBlocked;
1412:FreeRTOS\src/tasks.c **** 					}
1413:FreeRTOS\src/tasks.c **** 				}
1414:FreeRTOS\src/tasks.c **** 			#endif
1415:FreeRTOS\src/tasks.c **** 
1416:FreeRTOS\src/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1417:FreeRTOS\src/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1418:FreeRTOS\src/tasks.c **** 				{
1419:FreeRTOS\src/tasks.c **** 					/* The task being queried is referenced from the deleted
1420:FreeRTOS\src/tasks.c **** 					tasks list, or it is not referenced from any lists at
1421:FreeRTOS\src/tasks.c **** 					all. */
1422:FreeRTOS\src/tasks.c **** 					eReturn = eDeleted;
1423:FreeRTOS\src/tasks.c **** 				}
1424:FreeRTOS\src/tasks.c **** 			#endif
1425:FreeRTOS\src/tasks.c **** 
1426:FreeRTOS\src/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1427:FreeRTOS\src/tasks.c **** 			{
1428:FreeRTOS\src/tasks.c **** 				/* If the task is not in any other state, it must be in the
1429:FreeRTOS\src/tasks.c **** 				Ready (including pending ready) state. */
1430:FreeRTOS\src/tasks.c **** 				eReturn = eReady;
1431:FreeRTOS\src/tasks.c **** 			}
1432:FreeRTOS\src/tasks.c **** 		}
1433:FreeRTOS\src/tasks.c **** 
1434:FreeRTOS\src/tasks.c **** 		return eReturn;
1435:FreeRTOS\src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1436:FreeRTOS\src/tasks.c **** 
1437:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1438:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1439:FreeRTOS\src/tasks.c **** 
1440:FreeRTOS\src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1441:FreeRTOS\src/tasks.c **** 
1442:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1443:FreeRTOS\src/tasks.c **** 	{
1444:FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
1445:FreeRTOS\src/tasks.c **** 	UBaseType_t uxReturn;
1446:FreeRTOS\src/tasks.c **** 
1447:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
1448:FreeRTOS\src/tasks.c **** 		{
1449:FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1450:FreeRTOS\src/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1451:FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1452:FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1453:FreeRTOS\src/tasks.c **** 		}
1454:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
1455:FreeRTOS\src/tasks.c **** 
1456:FreeRTOS\src/tasks.c **** 		return uxReturn;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 27


1457:FreeRTOS\src/tasks.c **** 	}
1458:FreeRTOS\src/tasks.c **** 
1459:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1460:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1461:FreeRTOS\src/tasks.c **** 
1462:FreeRTOS\src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1463:FreeRTOS\src/tasks.c **** 
1464:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1465:FreeRTOS\src/tasks.c **** 	{
1466:FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
1467:FreeRTOS\src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1468:FreeRTOS\src/tasks.c **** 
1469:FreeRTOS\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1470:FreeRTOS\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1471:FreeRTOS\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1472:FreeRTOS\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1473:FreeRTOS\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1474:FreeRTOS\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1475:FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1476:FreeRTOS\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1477:FreeRTOS\src/tasks.c **** 		been assigned a priority above the configured maximum system call
1478:FreeRTOS\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1479:FreeRTOS\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1480:FreeRTOS\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1481:FreeRTOS\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1482:FreeRTOS\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1483:FreeRTOS\src/tasks.c **** 		provided on the following link:
1484:FreeRTOS\src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1485:FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1486:FreeRTOS\src/tasks.c **** 
1487:FreeRTOS\src/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1488:FreeRTOS\src/tasks.c **** 		{
1489:FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1490:FreeRTOS\src/tasks.c **** 			task that is being queried. */
1491:FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1492:FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1493:FreeRTOS\src/tasks.c **** 		}
1494:FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1495:FreeRTOS\src/tasks.c **** 
1496:FreeRTOS\src/tasks.c **** 		return uxReturn;
1497:FreeRTOS\src/tasks.c **** 	}
1498:FreeRTOS\src/tasks.c **** 
1499:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1500:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1501:FreeRTOS\src/tasks.c **** 
1502:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1503:FreeRTOS\src/tasks.c **** 
1504:FreeRTOS\src/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1505:FreeRTOS\src/tasks.c **** 	{
1506:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
1507:FreeRTOS\src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1508:FreeRTOS\src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1509:FreeRTOS\src/tasks.c **** 
1510:FreeRTOS\src/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1511:FreeRTOS\src/tasks.c **** 
1512:FreeRTOS\src/tasks.c **** 		/* Ensure the new priority is valid. */
1513:FreeRTOS\src/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 28


1514:FreeRTOS\src/tasks.c **** 		{
1515:FreeRTOS\src/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1516:FreeRTOS\src/tasks.c **** 		}
1517:FreeRTOS\src/tasks.c **** 		else
1518:FreeRTOS\src/tasks.c **** 		{
1519:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1520:FreeRTOS\src/tasks.c **** 		}
1521:FreeRTOS\src/tasks.c **** 
1522:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
1523:FreeRTOS\src/tasks.c **** 		{
1524:FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1525:FreeRTOS\src/tasks.c **** 			task that is being changed. */
1526:FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1527:FreeRTOS\src/tasks.c **** 
1528:FreeRTOS\src/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1529:FreeRTOS\src/tasks.c **** 
1530:FreeRTOS\src/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1531:FreeRTOS\src/tasks.c **** 			{
1532:FreeRTOS\src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1533:FreeRTOS\src/tasks.c **** 			}
1534:FreeRTOS\src/tasks.c **** 			#else
1535:FreeRTOS\src/tasks.c **** 			{
1536:FreeRTOS\src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1537:FreeRTOS\src/tasks.c **** 			}
1538:FreeRTOS\src/tasks.c **** 			#endif
1539:FreeRTOS\src/tasks.c **** 
1540:FreeRTOS\src/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1541:FreeRTOS\src/tasks.c **** 			{
1542:FreeRTOS\src/tasks.c **** 				/* The priority change may have readied a task of higher
1543:FreeRTOS\src/tasks.c **** 				priority than the calling task. */
1544:FreeRTOS\src/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1545:FreeRTOS\src/tasks.c **** 				{
1546:FreeRTOS\src/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1547:FreeRTOS\src/tasks.c **** 					{
1548:FreeRTOS\src/tasks.c **** 						/* The priority of a task other than the currently
1549:FreeRTOS\src/tasks.c **** 						running task is being raised.  Is the priority being
1550:FreeRTOS\src/tasks.c **** 						raised above that of the running task? */
1551:FreeRTOS\src/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1552:FreeRTOS\src/tasks.c **** 						{
1553:FreeRTOS\src/tasks.c **** 							xYieldRequired = pdTRUE;
1554:FreeRTOS\src/tasks.c **** 						}
1555:FreeRTOS\src/tasks.c **** 						else
1556:FreeRTOS\src/tasks.c **** 						{
1557:FreeRTOS\src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1558:FreeRTOS\src/tasks.c **** 						}
1559:FreeRTOS\src/tasks.c **** 					}
1560:FreeRTOS\src/tasks.c **** 					else
1561:FreeRTOS\src/tasks.c **** 					{
1562:FreeRTOS\src/tasks.c **** 						/* The priority of the running task is being raised,
1563:FreeRTOS\src/tasks.c **** 						but the running task must already be the highest
1564:FreeRTOS\src/tasks.c **** 						priority task able to run so no yield is required. */
1565:FreeRTOS\src/tasks.c **** 					}
1566:FreeRTOS\src/tasks.c **** 				}
1567:FreeRTOS\src/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1568:FreeRTOS\src/tasks.c **** 				{
1569:FreeRTOS\src/tasks.c **** 					/* Setting the priority of the running task down means
1570:FreeRTOS\src/tasks.c **** 					there may now be another task of higher priority that
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 29


1571:FreeRTOS\src/tasks.c **** 					is ready to execute. */
1572:FreeRTOS\src/tasks.c **** 					xYieldRequired = pdTRUE;
1573:FreeRTOS\src/tasks.c **** 				}
1574:FreeRTOS\src/tasks.c **** 				else
1575:FreeRTOS\src/tasks.c **** 				{
1576:FreeRTOS\src/tasks.c **** 					/* Setting the priority of any other task down does not
1577:FreeRTOS\src/tasks.c **** 					require a yield as the running task must be above the
1578:FreeRTOS\src/tasks.c **** 					new priority of the task being modified. */
1579:FreeRTOS\src/tasks.c **** 				}
1580:FreeRTOS\src/tasks.c **** 
1581:FreeRTOS\src/tasks.c **** 				/* Remember the ready list the task might be referenced from
1582:FreeRTOS\src/tasks.c **** 				before its uxPriority member is changed so the
1583:FreeRTOS\src/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1584:FreeRTOS\src/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1585:FreeRTOS\src/tasks.c **** 
1586:FreeRTOS\src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1587:FreeRTOS\src/tasks.c **** 				{
1588:FreeRTOS\src/tasks.c **** 					/* Only change the priority being used if the task is not
1589:FreeRTOS\src/tasks.c **** 					currently using an inherited priority. */
1590:FreeRTOS\src/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1591:FreeRTOS\src/tasks.c **** 					{
1592:FreeRTOS\src/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1593:FreeRTOS\src/tasks.c **** 					}
1594:FreeRTOS\src/tasks.c **** 					else
1595:FreeRTOS\src/tasks.c **** 					{
1596:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1597:FreeRTOS\src/tasks.c **** 					}
1598:FreeRTOS\src/tasks.c **** 
1599:FreeRTOS\src/tasks.c **** 					/* The base priority gets set whatever. */
1600:FreeRTOS\src/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1601:FreeRTOS\src/tasks.c **** 				}
1602:FreeRTOS\src/tasks.c **** 				#else
1603:FreeRTOS\src/tasks.c **** 				{
1604:FreeRTOS\src/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1605:FreeRTOS\src/tasks.c **** 				}
1606:FreeRTOS\src/tasks.c **** 				#endif
1607:FreeRTOS\src/tasks.c **** 
1608:FreeRTOS\src/tasks.c **** 				/* Only reset the event list item value if the value is not
1609:FreeRTOS\src/tasks.c **** 				being used for anything else. */
1610:FreeRTOS\src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1611:FreeRTOS\src/tasks.c **** 				{
1612:FreeRTOS\src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1613:FreeRTOS\src/tasks.c **** 				}
1614:FreeRTOS\src/tasks.c **** 				else
1615:FreeRTOS\src/tasks.c **** 				{
1616:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1617:FreeRTOS\src/tasks.c **** 				}
1618:FreeRTOS\src/tasks.c **** 
1619:FreeRTOS\src/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1620:FreeRTOS\src/tasks.c **** 				nothing more than change its priority variable. However, if
1621:FreeRTOS\src/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1622:FreeRTOS\src/tasks.c **** 				in the list appropriate to its new priority. */
1623:FreeRTOS\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1624:FreeRTOS\src/tasks.c **** 				{
1625:FreeRTOS\src/tasks.c **** 					/* The task is currently in its ready list - remove before
1626:FreeRTOS\src/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1627:FreeRTOS\src/tasks.c **** 					section we can do this even if the scheduler is suspended. */
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 30


1628:FreeRTOS\src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1629:FreeRTOS\src/tasks.c **** 					{
1630:FreeRTOS\src/tasks.c **** 						/* It is known that the task is in its ready list so
1631:FreeRTOS\src/tasks.c **** 						there is no need to check again and the port level
1632:FreeRTOS\src/tasks.c **** 						reset macro can be called directly. */
1633:FreeRTOS\src/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1634:FreeRTOS\src/tasks.c **** 					}
1635:FreeRTOS\src/tasks.c **** 					else
1636:FreeRTOS\src/tasks.c **** 					{
1637:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1638:FreeRTOS\src/tasks.c **** 					}
1639:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1640:FreeRTOS\src/tasks.c **** 				}
1641:FreeRTOS\src/tasks.c **** 				else
1642:FreeRTOS\src/tasks.c **** 				{
1643:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1644:FreeRTOS\src/tasks.c **** 				}
1645:FreeRTOS\src/tasks.c **** 
1646:FreeRTOS\src/tasks.c **** 				if( xYieldRequired != pdFALSE )
1647:FreeRTOS\src/tasks.c **** 				{
1648:FreeRTOS\src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1649:FreeRTOS\src/tasks.c **** 				}
1650:FreeRTOS\src/tasks.c **** 				else
1651:FreeRTOS\src/tasks.c **** 				{
1652:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:FreeRTOS\src/tasks.c **** 				}
1654:FreeRTOS\src/tasks.c **** 
1655:FreeRTOS\src/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1656:FreeRTOS\src/tasks.c **** 				optimised task selection is not being used. */
1657:FreeRTOS\src/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1658:FreeRTOS\src/tasks.c **** 			}
1659:FreeRTOS\src/tasks.c **** 		}
1660:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
1661:FreeRTOS\src/tasks.c **** 	}
1662:FreeRTOS\src/tasks.c **** 
1663:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1664:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1665:FreeRTOS\src/tasks.c **** 
1666:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1667:FreeRTOS\src/tasks.c **** 
1668:FreeRTOS\src/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1669:FreeRTOS\src/tasks.c **** 	{
1670:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
1671:FreeRTOS\src/tasks.c **** 
1672:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
1673:FreeRTOS\src/tasks.c **** 		{
1674:FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the running task that is
1675:FreeRTOS\src/tasks.c **** 			being suspended. */
1676:FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1677:FreeRTOS\src/tasks.c **** 
1678:FreeRTOS\src/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1679:FreeRTOS\src/tasks.c **** 
1680:FreeRTOS\src/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1681:FreeRTOS\src/tasks.c **** 			suspended list. */
1682:FreeRTOS\src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1683:FreeRTOS\src/tasks.c **** 			{
1684:FreeRTOS\src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 31


1685:FreeRTOS\src/tasks.c **** 			}
1686:FreeRTOS\src/tasks.c **** 			else
1687:FreeRTOS\src/tasks.c **** 			{
1688:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1689:FreeRTOS\src/tasks.c **** 			}
1690:FreeRTOS\src/tasks.c **** 
1691:FreeRTOS\src/tasks.c **** 			/* Is the task waiting on an event also? */
1692:FreeRTOS\src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1693:FreeRTOS\src/tasks.c **** 			{
1694:FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1695:FreeRTOS\src/tasks.c **** 			}
1696:FreeRTOS\src/tasks.c **** 			else
1697:FreeRTOS\src/tasks.c **** 			{
1698:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1699:FreeRTOS\src/tasks.c **** 			}
1700:FreeRTOS\src/tasks.c **** 
1701:FreeRTOS\src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1702:FreeRTOS\src/tasks.c **** 
1703:FreeRTOS\src/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1704:FreeRTOS\src/tasks.c **** 			{
1705:FreeRTOS\src/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1706:FreeRTOS\src/tasks.c **** 				{
1707:FreeRTOS\src/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1708:FreeRTOS\src/tasks.c **** 					now suspended, so no notification was received. */
1709:FreeRTOS\src/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1710:FreeRTOS\src/tasks.c **** 				}
1711:FreeRTOS\src/tasks.c **** 			}
1712:FreeRTOS\src/tasks.c **** 			#endif
1713:FreeRTOS\src/tasks.c **** 		}
1714:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
1715:FreeRTOS\src/tasks.c **** 
1716:FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1717:FreeRTOS\src/tasks.c **** 		{
1718:FreeRTOS\src/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1719:FreeRTOS\src/tasks.c **** 			task that is now in the Suspended state. */
1720:FreeRTOS\src/tasks.c **** 			taskENTER_CRITICAL();
1721:FreeRTOS\src/tasks.c **** 			{
1722:FreeRTOS\src/tasks.c **** 				prvResetNextTaskUnblockTime();
1723:FreeRTOS\src/tasks.c **** 			}
1724:FreeRTOS\src/tasks.c **** 			taskEXIT_CRITICAL();
1725:FreeRTOS\src/tasks.c **** 		}
1726:FreeRTOS\src/tasks.c **** 		else
1727:FreeRTOS\src/tasks.c **** 		{
1728:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1729:FreeRTOS\src/tasks.c **** 		}
1730:FreeRTOS\src/tasks.c **** 
1731:FreeRTOS\src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1732:FreeRTOS\src/tasks.c **** 		{
1733:FreeRTOS\src/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1734:FreeRTOS\src/tasks.c **** 			{
1735:FreeRTOS\src/tasks.c **** 				/* The current task has just been suspended. */
1736:FreeRTOS\src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1737:FreeRTOS\src/tasks.c **** 				portYIELD_WITHIN_API();
1738:FreeRTOS\src/tasks.c **** 			}
1739:FreeRTOS\src/tasks.c **** 			else
1740:FreeRTOS\src/tasks.c **** 			{
1741:FreeRTOS\src/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 32


1742:FreeRTOS\src/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1743:FreeRTOS\src/tasks.c **** 				must be adjusted to point to a different task. */
1744:FreeRTOS\src/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1745:FreeRTOS\src/tasks.c **** 				{
1746:FreeRTOS\src/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1747:FreeRTOS\src/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1748:FreeRTOS\src/tasks.c **** 					be set to point to it no matter what its relative priority
1749:FreeRTOS\src/tasks.c **** 					is. */
1750:FreeRTOS\src/tasks.c **** 					pxCurrentTCB = NULL;
1751:FreeRTOS\src/tasks.c **** 				}
1752:FreeRTOS\src/tasks.c **** 				else
1753:FreeRTOS\src/tasks.c **** 				{
1754:FreeRTOS\src/tasks.c **** 					vTaskSwitchContext();
1755:FreeRTOS\src/tasks.c **** 				}
1756:FreeRTOS\src/tasks.c **** 			}
1757:FreeRTOS\src/tasks.c **** 		}
1758:FreeRTOS\src/tasks.c **** 		else
1759:FreeRTOS\src/tasks.c **** 		{
1760:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:FreeRTOS\src/tasks.c **** 		}
1762:FreeRTOS\src/tasks.c **** 	}
1763:FreeRTOS\src/tasks.c **** 
1764:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1765:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1766:FreeRTOS\src/tasks.c **** 
1767:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1768:FreeRTOS\src/tasks.c **** 
1769:FreeRTOS\src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1770:FreeRTOS\src/tasks.c **** 	{
  27              		.loc 1 1770 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1771:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1772:FreeRTOS\src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1773:FreeRTOS\src/tasks.c **** 
1774:FreeRTOS\src/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1775:FreeRTOS\src/tasks.c **** 		section. */
1776:FreeRTOS\src/tasks.c **** 
1777:FreeRTOS\src/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1778:FreeRTOS\src/tasks.c **** 		configASSERT( xTask );
1779:FreeRTOS\src/tasks.c **** 
1780:FreeRTOS\src/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1781:FreeRTOS\src/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1781 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 084B     		ldr	r3, .L6
  36 0004 9A42     		cmp	r2, r3
  37 0006 06D1     		bne	.L3
1782:FreeRTOS\src/tasks.c **** 		{
1783:FreeRTOS\src/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1784:FreeRTOS\src/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  38              		.loc 1 1784 0
  39 0008 836A     		ldr	r3, [r0, #40]
  40 000a 074A     		ldr	r2, .L6+4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 33


  41 000c 9342     		cmp	r3, r2
  42 000e 04D0     		beq	.L4
1785:FreeRTOS\src/tasks.c **** 			{
1786:FreeRTOS\src/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1787:FreeRTOS\src/tasks.c **** 				state, or because is is blocked with no timeout? */
1788:FreeRTOS\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  43              		.loc 1 1788 0
  44 0010 2BB1     		cbz	r3, .L5
1771:FreeRTOS\src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1771 0
  46 0012 0020     		movs	r0, #0
  47              	.LVL1:
  48 0014 7047     		bx	lr
  49              	.LVL2:
  50              	.L3:
  51 0016 0020     		movs	r0, #0
  52              	.LVL3:
  53 0018 7047     		bx	lr
  54              	.LVL4:
  55              	.L4:
  56 001a 0020     		movs	r0, #0
  57              	.LVL5:
  58 001c 7047     		bx	lr
  59              	.LVL6:
  60              	.L5:
1789:FreeRTOS\src/tasks.c **** 				{
1790:FreeRTOS\src/tasks.c **** 					xReturn = pdTRUE;
  61              		.loc 1 1790 0
  62 001e 0120     		movs	r0, #1
  63              	.LVL7:
1791:FreeRTOS\src/tasks.c **** 				}
1792:FreeRTOS\src/tasks.c **** 				else
1793:FreeRTOS\src/tasks.c **** 				{
1794:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1795:FreeRTOS\src/tasks.c **** 				}
1796:FreeRTOS\src/tasks.c **** 			}
1797:FreeRTOS\src/tasks.c **** 			else
1798:FreeRTOS\src/tasks.c **** 			{
1799:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1800:FreeRTOS\src/tasks.c **** 			}
1801:FreeRTOS\src/tasks.c **** 		}
1802:FreeRTOS\src/tasks.c **** 		else
1803:FreeRTOS\src/tasks.c **** 		{
1804:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1805:FreeRTOS\src/tasks.c **** 		}
1806:FreeRTOS\src/tasks.c **** 
1807:FreeRTOS\src/tasks.c **** 		return xReturn;
1808:FreeRTOS\src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  64              		.loc 1 1808 0
  65 0020 7047     		bx	lr
  66              	.L7:
  67 0022 00BF     		.align	2
  68              	.L6:
  69 0024 00000000 		.word	.LANCHOR0
  70 0028 14000000 		.word	.LANCHOR0+20
  71              		.cfi_endproc
  72              	.LFE16:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 34


  73              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  74              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  78              		.type	prvTaskCheckFreeStackSpace, %function
  79              	prvTaskCheckFreeStackSpace:
  80              	.LFB41:
1809:FreeRTOS\src/tasks.c **** 
1810:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1811:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1812:FreeRTOS\src/tasks.c **** 
1813:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1814:FreeRTOS\src/tasks.c **** 
1815:FreeRTOS\src/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1816:FreeRTOS\src/tasks.c **** 	{
1817:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1818:FreeRTOS\src/tasks.c **** 
1819:FreeRTOS\src/tasks.c **** 		/* It does not make sense to resume the calling task. */
1820:FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToResume );
1821:FreeRTOS\src/tasks.c **** 
1822:FreeRTOS\src/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1823:FreeRTOS\src/tasks.c **** 		currently executing task. */
1824:FreeRTOS\src/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1825:FreeRTOS\src/tasks.c **** 		{
1826:FreeRTOS\src/tasks.c **** 			taskENTER_CRITICAL();
1827:FreeRTOS\src/tasks.c **** 			{
1828:FreeRTOS\src/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1829:FreeRTOS\src/tasks.c **** 				{
1830:FreeRTOS\src/tasks.c **** 					traceTASK_RESUME( pxTCB );
1831:FreeRTOS\src/tasks.c **** 
1832:FreeRTOS\src/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1833:FreeRTOS\src/tasks.c **** 					suspended because this is inside a critical section. */
1834:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1835:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1836:FreeRTOS\src/tasks.c **** 
1837:FreeRTOS\src/tasks.c **** 					/* A higher priority task may have just been resumed. */
1838:FreeRTOS\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1839:FreeRTOS\src/tasks.c **** 					{
1840:FreeRTOS\src/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1841:FreeRTOS\src/tasks.c **** 						but will leave the lists in the correct state for the
1842:FreeRTOS\src/tasks.c **** 						next yield. */
1843:FreeRTOS\src/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1844:FreeRTOS\src/tasks.c **** 					}
1845:FreeRTOS\src/tasks.c **** 					else
1846:FreeRTOS\src/tasks.c **** 					{
1847:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1848:FreeRTOS\src/tasks.c **** 					}
1849:FreeRTOS\src/tasks.c **** 				}
1850:FreeRTOS\src/tasks.c **** 				else
1851:FreeRTOS\src/tasks.c **** 				{
1852:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1853:FreeRTOS\src/tasks.c **** 				}
1854:FreeRTOS\src/tasks.c **** 			}
1855:FreeRTOS\src/tasks.c **** 			taskEXIT_CRITICAL();
1856:FreeRTOS\src/tasks.c **** 		}
1857:FreeRTOS\src/tasks.c **** 		else
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 35


1858:FreeRTOS\src/tasks.c **** 		{
1859:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1860:FreeRTOS\src/tasks.c **** 		}
1861:FreeRTOS\src/tasks.c **** 	}
1862:FreeRTOS\src/tasks.c **** 
1863:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1864:FreeRTOS\src/tasks.c **** 
1865:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1866:FreeRTOS\src/tasks.c **** 
1867:FreeRTOS\src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1868:FreeRTOS\src/tasks.c **** 
1869:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1870:FreeRTOS\src/tasks.c **** 	{
1871:FreeRTOS\src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1872:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1873:FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1874:FreeRTOS\src/tasks.c **** 
1875:FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToResume );
1876:FreeRTOS\src/tasks.c **** 
1877:FreeRTOS\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1878:FreeRTOS\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1879:FreeRTOS\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1880:FreeRTOS\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1881:FreeRTOS\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1882:FreeRTOS\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1883:FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1884:FreeRTOS\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1885:FreeRTOS\src/tasks.c **** 		been assigned a priority above the configured maximum system call
1886:FreeRTOS\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1887:FreeRTOS\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1888:FreeRTOS\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1889:FreeRTOS\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1890:FreeRTOS\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1891:FreeRTOS\src/tasks.c **** 		provided on the following link:
1892:FreeRTOS\src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1893:FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1894:FreeRTOS\src/tasks.c **** 
1895:FreeRTOS\src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1896:FreeRTOS\src/tasks.c **** 		{
1897:FreeRTOS\src/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1898:FreeRTOS\src/tasks.c **** 			{
1899:FreeRTOS\src/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1900:FreeRTOS\src/tasks.c **** 
1901:FreeRTOS\src/tasks.c **** 				/* Check the ready lists can be accessed. */
1902:FreeRTOS\src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1903:FreeRTOS\src/tasks.c **** 				{
1904:FreeRTOS\src/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1905:FreeRTOS\src/tasks.c **** 					suspended list to the ready list directly. */
1906:FreeRTOS\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1907:FreeRTOS\src/tasks.c **** 					{
1908:FreeRTOS\src/tasks.c **** 						xYieldRequired = pdTRUE;
1909:FreeRTOS\src/tasks.c **** 					}
1910:FreeRTOS\src/tasks.c **** 					else
1911:FreeRTOS\src/tasks.c **** 					{
1912:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1913:FreeRTOS\src/tasks.c **** 					}
1914:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 36


1915:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1916:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1917:FreeRTOS\src/tasks.c **** 				}
1918:FreeRTOS\src/tasks.c **** 				else
1919:FreeRTOS\src/tasks.c **** 				{
1920:FreeRTOS\src/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1921:FreeRTOS\src/tasks.c **** 					is held in the pending ready list until the scheduler is
1922:FreeRTOS\src/tasks.c **** 					unsuspended. */
1923:FreeRTOS\src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1924:FreeRTOS\src/tasks.c **** 				}
1925:FreeRTOS\src/tasks.c **** 			}
1926:FreeRTOS\src/tasks.c **** 			else
1927:FreeRTOS\src/tasks.c **** 			{
1928:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1929:FreeRTOS\src/tasks.c **** 			}
1930:FreeRTOS\src/tasks.c **** 		}
1931:FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1932:FreeRTOS\src/tasks.c **** 
1933:FreeRTOS\src/tasks.c **** 		return xYieldRequired;
1934:FreeRTOS\src/tasks.c **** 	}
1935:FreeRTOS\src/tasks.c **** 
1936:FreeRTOS\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1937:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1938:FreeRTOS\src/tasks.c **** 
1939:FreeRTOS\src/tasks.c **** void vTaskStartScheduler( void )
1940:FreeRTOS\src/tasks.c **** {
1941:FreeRTOS\src/tasks.c **** BaseType_t xReturn;
1942:FreeRTOS\src/tasks.c **** 
1943:FreeRTOS\src/tasks.c **** 	/* Add the idle task at the lowest priority. */
1944:FreeRTOS\src/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1945:FreeRTOS\src/tasks.c **** 	{
1946:FreeRTOS\src/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1947:FreeRTOS\src/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1948:FreeRTOS\src/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1949:FreeRTOS\src/tasks.c **** 
1950:FreeRTOS\src/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1951:FreeRTOS\src/tasks.c **** 		address of the RAM then create the idle task. */
1952:FreeRTOS\src/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1953:FreeRTOS\src/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1954:FreeRTOS\src/tasks.c **** 												configIDLE_TASK_NAME,
1955:FreeRTOS\src/tasks.c **** 												ulIdleTaskStackSize,
1956:FreeRTOS\src/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1957:FreeRTOS\src/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1958:FreeRTOS\src/tasks.c **** 												pxIdleTaskStackBuffer,
1959:FreeRTOS\src/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1960:FreeRTOS\src/tasks.c **** 
1961:FreeRTOS\src/tasks.c **** 		if( xIdleTaskHandle != NULL )
1962:FreeRTOS\src/tasks.c **** 		{
1963:FreeRTOS\src/tasks.c **** 			xReturn = pdPASS;
1964:FreeRTOS\src/tasks.c **** 		}
1965:FreeRTOS\src/tasks.c **** 		else
1966:FreeRTOS\src/tasks.c **** 		{
1967:FreeRTOS\src/tasks.c **** 			xReturn = pdFAIL;
1968:FreeRTOS\src/tasks.c **** 		}
1969:FreeRTOS\src/tasks.c **** 	}
1970:FreeRTOS\src/tasks.c **** 	#else
1971:FreeRTOS\src/tasks.c **** 	{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 37


1972:FreeRTOS\src/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1973:FreeRTOS\src/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1974:FreeRTOS\src/tasks.c **** 								configIDLE_TASK_NAME,
1975:FreeRTOS\src/tasks.c **** 								configMINIMAL_STACK_SIZE,
1976:FreeRTOS\src/tasks.c **** 								( void * ) NULL,
1977:FreeRTOS\src/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
1978:FreeRTOS\src/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1979:FreeRTOS\src/tasks.c **** 	}
1980:FreeRTOS\src/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1981:FreeRTOS\src/tasks.c **** 
1982:FreeRTOS\src/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1983:FreeRTOS\src/tasks.c **** 	{
1984:FreeRTOS\src/tasks.c **** 		if( xReturn == pdPASS )
1985:FreeRTOS\src/tasks.c **** 		{
1986:FreeRTOS\src/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1987:FreeRTOS\src/tasks.c **** 		}
1988:FreeRTOS\src/tasks.c **** 		else
1989:FreeRTOS\src/tasks.c **** 		{
1990:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1991:FreeRTOS\src/tasks.c **** 		}
1992:FreeRTOS\src/tasks.c **** 	}
1993:FreeRTOS\src/tasks.c **** 	#endif /* configUSE_TIMERS */
1994:FreeRTOS\src/tasks.c **** 
1995:FreeRTOS\src/tasks.c **** 	if( xReturn == pdPASS )
1996:FreeRTOS\src/tasks.c **** 	{
1997:FreeRTOS\src/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1998:FreeRTOS\src/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1999:FreeRTOS\src/tasks.c **** 		the only macro called by the function. */
2000:FreeRTOS\src/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2001:FreeRTOS\src/tasks.c **** 		{
2002:FreeRTOS\src/tasks.c **** 			freertos_tasks_c_additions_init();
2003:FreeRTOS\src/tasks.c **** 		}
2004:FreeRTOS\src/tasks.c **** 		#endif
2005:FreeRTOS\src/tasks.c **** 
2006:FreeRTOS\src/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2007:FreeRTOS\src/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2008:FreeRTOS\src/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2009:FreeRTOS\src/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2010:FreeRTOS\src/tasks.c **** 		starts to run. */
2011:FreeRTOS\src/tasks.c **** 		portDISABLE_INTERRUPTS();
2012:FreeRTOS\src/tasks.c **** 
2013:FreeRTOS\src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2014:FreeRTOS\src/tasks.c **** 		{
2015:FreeRTOS\src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2016:FreeRTOS\src/tasks.c **** 			structure specific to the task that will run first. */
2017:FreeRTOS\src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2018:FreeRTOS\src/tasks.c **** 		}
2019:FreeRTOS\src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2020:FreeRTOS\src/tasks.c **** 
2021:FreeRTOS\src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2022:FreeRTOS\src/tasks.c **** 		xSchedulerRunning = pdTRUE;
2023:FreeRTOS\src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2024:FreeRTOS\src/tasks.c **** 
2025:FreeRTOS\src/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2026:FreeRTOS\src/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2027:FreeRTOS\src/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2028:FreeRTOS\src/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 38


2029:FreeRTOS\src/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2030:FreeRTOS\src/tasks.c **** 		FreeRTOSConfig.h file. */
2031:FreeRTOS\src/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2032:FreeRTOS\src/tasks.c **** 
2033:FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
2034:FreeRTOS\src/tasks.c **** 
2035:FreeRTOS\src/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2036:FreeRTOS\src/tasks.c **** 		portable interface. */
2037:FreeRTOS\src/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2038:FreeRTOS\src/tasks.c **** 		{
2039:FreeRTOS\src/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2040:FreeRTOS\src/tasks.c **** 			function will not return. */
2041:FreeRTOS\src/tasks.c **** 		}
2042:FreeRTOS\src/tasks.c **** 		else
2043:FreeRTOS\src/tasks.c **** 		{
2044:FreeRTOS\src/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2045:FreeRTOS\src/tasks.c **** 		}
2046:FreeRTOS\src/tasks.c **** 	}
2047:FreeRTOS\src/tasks.c **** 	else
2048:FreeRTOS\src/tasks.c **** 	{
2049:FreeRTOS\src/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2050:FreeRTOS\src/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2051:FreeRTOS\src/tasks.c **** 		or the timer task. */
2052:FreeRTOS\src/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2053:FreeRTOS\src/tasks.c **** 	}
2054:FreeRTOS\src/tasks.c **** 
2055:FreeRTOS\src/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2056:FreeRTOS\src/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2057:FreeRTOS\src/tasks.c **** 	( void ) xIdleTaskHandle;
2058:FreeRTOS\src/tasks.c **** }
2059:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2060:FreeRTOS\src/tasks.c **** 
2061:FreeRTOS\src/tasks.c **** void vTaskEndScheduler( void )
2062:FreeRTOS\src/tasks.c **** {
2063:FreeRTOS\src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2064:FreeRTOS\src/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2065:FreeRTOS\src/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2066:FreeRTOS\src/tasks.c **** 	portDISABLE_INTERRUPTS();
2067:FreeRTOS\src/tasks.c **** 	xSchedulerRunning = pdFALSE;
2068:FreeRTOS\src/tasks.c **** 	vPortEndScheduler();
2069:FreeRTOS\src/tasks.c **** }
2070:FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2071:FreeRTOS\src/tasks.c **** 
2072:FreeRTOS\src/tasks.c **** void vTaskSuspendAll( void )
2073:FreeRTOS\src/tasks.c **** {
2074:FreeRTOS\src/tasks.c **** 	/* A critical section is not required as the variable is of type
2075:FreeRTOS\src/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2076:FreeRTOS\src/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2077:FreeRTOS\src/tasks.c **** 	http://goo.gl/wu4acr */
2078:FreeRTOS\src/tasks.c **** 	++uxSchedulerSuspended;
2079:FreeRTOS\src/tasks.c **** }
2080:FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2081:FreeRTOS\src/tasks.c **** 
2082:FreeRTOS\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2083:FreeRTOS\src/tasks.c **** 
2084:FreeRTOS\src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2085:FreeRTOS\src/tasks.c **** 	{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 39


2086:FreeRTOS\src/tasks.c **** 	TickType_t xReturn;
2087:FreeRTOS\src/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2088:FreeRTOS\src/tasks.c **** 
2089:FreeRTOS\src/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2090:FreeRTOS\src/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2091:FreeRTOS\src/tasks.c **** 		task that are in the Ready state, even though the idle task is
2092:FreeRTOS\src/tasks.c **** 		running. */
2093:FreeRTOS\src/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2094:FreeRTOS\src/tasks.c **** 		{
2095:FreeRTOS\src/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2096:FreeRTOS\src/tasks.c **** 			{
2097:FreeRTOS\src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2098:FreeRTOS\src/tasks.c **** 			}
2099:FreeRTOS\src/tasks.c **** 		}
2100:FreeRTOS\src/tasks.c **** 		#else
2101:FreeRTOS\src/tasks.c **** 		{
2102:FreeRTOS\src/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2103:FreeRTOS\src/tasks.c **** 
2104:FreeRTOS\src/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2105:FreeRTOS\src/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2106:FreeRTOS\src/tasks.c **** 			significant bit are set then there are tasks that have a priority
2107:FreeRTOS\src/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2108:FreeRTOS\src/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2109:FreeRTOS\src/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2110:FreeRTOS\src/tasks.c **** 			{
2111:FreeRTOS\src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2112:FreeRTOS\src/tasks.c **** 			}
2113:FreeRTOS\src/tasks.c **** 		}
2114:FreeRTOS\src/tasks.c **** 		#endif
2115:FreeRTOS\src/tasks.c **** 
2116:FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2117:FreeRTOS\src/tasks.c **** 		{
2118:FreeRTOS\src/tasks.c **** 			xReturn = 0;
2119:FreeRTOS\src/tasks.c **** 		}
2120:FreeRTOS\src/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2121:FreeRTOS\src/tasks.c **** 		{
2122:FreeRTOS\src/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2123:FreeRTOS\src/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2124:FreeRTOS\src/tasks.c **** 			processed. */
2125:FreeRTOS\src/tasks.c **** 			xReturn = 0;
2126:FreeRTOS\src/tasks.c **** 		}
2127:FreeRTOS\src/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2128:FreeRTOS\src/tasks.c **** 		{
2129:FreeRTOS\src/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2130:FreeRTOS\src/tasks.c **** 			idle priority.  This path can only be reached if
2131:FreeRTOS\src/tasks.c **** 			configUSE_PREEMPTION is 0. */
2132:FreeRTOS\src/tasks.c **** 			xReturn = 0;
2133:FreeRTOS\src/tasks.c **** 		}
2134:FreeRTOS\src/tasks.c **** 		else
2135:FreeRTOS\src/tasks.c **** 		{
2136:FreeRTOS\src/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2137:FreeRTOS\src/tasks.c **** 		}
2138:FreeRTOS\src/tasks.c **** 
2139:FreeRTOS\src/tasks.c **** 		return xReturn;
2140:FreeRTOS\src/tasks.c **** 	}
2141:FreeRTOS\src/tasks.c **** 
2142:FreeRTOS\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 40


2143:FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2144:FreeRTOS\src/tasks.c **** 
2145:FreeRTOS\src/tasks.c **** BaseType_t xTaskResumeAll( void )
2146:FreeRTOS\src/tasks.c **** {
2147:FreeRTOS\src/tasks.c **** TCB_t *pxTCB = NULL;
2148:FreeRTOS\src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2149:FreeRTOS\src/tasks.c **** 
2150:FreeRTOS\src/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2151:FreeRTOS\src/tasks.c **** 	previous call to vTaskSuspendAll(). */
2152:FreeRTOS\src/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2153:FreeRTOS\src/tasks.c **** 
2154:FreeRTOS\src/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2155:FreeRTOS\src/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2156:FreeRTOS\src/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2157:FreeRTOS\src/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2158:FreeRTOS\src/tasks.c **** 	tasks from this list into their appropriate ready list. */
2159:FreeRTOS\src/tasks.c **** 	taskENTER_CRITICAL();
2160:FreeRTOS\src/tasks.c **** 	{
2161:FreeRTOS\src/tasks.c **** 		--uxSchedulerSuspended;
2162:FreeRTOS\src/tasks.c **** 
2163:FreeRTOS\src/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2164:FreeRTOS\src/tasks.c **** 		{
2165:FreeRTOS\src/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2166:FreeRTOS\src/tasks.c **** 			{
2167:FreeRTOS\src/tasks.c **** 				/* Move any readied tasks from the pending list into the
2168:FreeRTOS\src/tasks.c **** 				appropriate ready list. */
2169:FreeRTOS\src/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2170:FreeRTOS\src/tasks.c **** 				{
2171:FreeRTOS\src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2172:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2173:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2174:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2175:FreeRTOS\src/tasks.c **** 
2176:FreeRTOS\src/tasks.c **** 					/* If the moved task has a priority higher than the current
2177:FreeRTOS\src/tasks.c **** 					task then a yield must be performed. */
2178:FreeRTOS\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2179:FreeRTOS\src/tasks.c **** 					{
2180:FreeRTOS\src/tasks.c **** 						xYieldPending = pdTRUE;
2181:FreeRTOS\src/tasks.c **** 					}
2182:FreeRTOS\src/tasks.c **** 					else
2183:FreeRTOS\src/tasks.c **** 					{
2184:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2185:FreeRTOS\src/tasks.c **** 					}
2186:FreeRTOS\src/tasks.c **** 				}
2187:FreeRTOS\src/tasks.c **** 
2188:FreeRTOS\src/tasks.c **** 				if( pxTCB != NULL )
2189:FreeRTOS\src/tasks.c **** 				{
2190:FreeRTOS\src/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2191:FreeRTOS\src/tasks.c **** 					which may have prevented the next unblock time from being
2192:FreeRTOS\src/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2193:FreeRTOS\src/tasks.c **** 					important for low power tickless implementations, where
2194:FreeRTOS\src/tasks.c **** 					this can prevent an unnecessary exit from low power
2195:FreeRTOS\src/tasks.c **** 					state. */
2196:FreeRTOS\src/tasks.c **** 					prvResetNextTaskUnblockTime();
2197:FreeRTOS\src/tasks.c **** 				}
2198:FreeRTOS\src/tasks.c **** 
2199:FreeRTOS\src/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 41


2200:FreeRTOS\src/tasks.c **** 				they should be processed now.  This ensures the tick count does
2201:FreeRTOS\src/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2202:FreeRTOS\src/tasks.c **** 				time. */
2203:FreeRTOS\src/tasks.c **** 				{
2204:FreeRTOS\src/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2205:FreeRTOS\src/tasks.c **** 
2206:FreeRTOS\src/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2207:FreeRTOS\src/tasks.c **** 					{
2208:FreeRTOS\src/tasks.c **** 						do
2209:FreeRTOS\src/tasks.c **** 						{
2210:FreeRTOS\src/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2211:FreeRTOS\src/tasks.c **** 							{
2212:FreeRTOS\src/tasks.c **** 								xYieldPending = pdTRUE;
2213:FreeRTOS\src/tasks.c **** 							}
2214:FreeRTOS\src/tasks.c **** 							else
2215:FreeRTOS\src/tasks.c **** 							{
2216:FreeRTOS\src/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2217:FreeRTOS\src/tasks.c **** 							}
2218:FreeRTOS\src/tasks.c **** 							--uxPendedCounts;
2219:FreeRTOS\src/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2220:FreeRTOS\src/tasks.c **** 
2221:FreeRTOS\src/tasks.c **** 						uxPendedTicks = 0;
2222:FreeRTOS\src/tasks.c **** 					}
2223:FreeRTOS\src/tasks.c **** 					else
2224:FreeRTOS\src/tasks.c **** 					{
2225:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2226:FreeRTOS\src/tasks.c **** 					}
2227:FreeRTOS\src/tasks.c **** 				}
2228:FreeRTOS\src/tasks.c **** 
2229:FreeRTOS\src/tasks.c **** 				if( xYieldPending != pdFALSE )
2230:FreeRTOS\src/tasks.c **** 				{
2231:FreeRTOS\src/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2232:FreeRTOS\src/tasks.c **** 					{
2233:FreeRTOS\src/tasks.c **** 						xAlreadyYielded = pdTRUE;
2234:FreeRTOS\src/tasks.c **** 					}
2235:FreeRTOS\src/tasks.c **** 					#endif
2236:FreeRTOS\src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2237:FreeRTOS\src/tasks.c **** 				}
2238:FreeRTOS\src/tasks.c **** 				else
2239:FreeRTOS\src/tasks.c **** 				{
2240:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2241:FreeRTOS\src/tasks.c **** 				}
2242:FreeRTOS\src/tasks.c **** 			}
2243:FreeRTOS\src/tasks.c **** 		}
2244:FreeRTOS\src/tasks.c **** 		else
2245:FreeRTOS\src/tasks.c **** 		{
2246:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2247:FreeRTOS\src/tasks.c **** 		}
2248:FreeRTOS\src/tasks.c **** 	}
2249:FreeRTOS\src/tasks.c **** 	taskEXIT_CRITICAL();
2250:FreeRTOS\src/tasks.c **** 
2251:FreeRTOS\src/tasks.c **** 	return xAlreadyYielded;
2252:FreeRTOS\src/tasks.c **** }
2253:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2254:FreeRTOS\src/tasks.c **** 
2255:FreeRTOS\src/tasks.c **** TickType_t xTaskGetTickCount( void )
2256:FreeRTOS\src/tasks.c **** {
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 42


2257:FreeRTOS\src/tasks.c **** TickType_t xTicks;
2258:FreeRTOS\src/tasks.c **** 
2259:FreeRTOS\src/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2260:FreeRTOS\src/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2261:FreeRTOS\src/tasks.c **** 	{
2262:FreeRTOS\src/tasks.c **** 		xTicks = xTickCount;
2263:FreeRTOS\src/tasks.c **** 	}
2264:FreeRTOS\src/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2265:FreeRTOS\src/tasks.c **** 
2266:FreeRTOS\src/tasks.c **** 	return xTicks;
2267:FreeRTOS\src/tasks.c **** }
2268:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2269:FreeRTOS\src/tasks.c **** 
2270:FreeRTOS\src/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2271:FreeRTOS\src/tasks.c **** {
2272:FreeRTOS\src/tasks.c **** TickType_t xReturn;
2273:FreeRTOS\src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2274:FreeRTOS\src/tasks.c **** 
2275:FreeRTOS\src/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2276:FreeRTOS\src/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2277:FreeRTOS\src/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2278:FreeRTOS\src/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2279:FreeRTOS\src/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2280:FreeRTOS\src/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2281:FreeRTOS\src/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2282:FreeRTOS\src/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2283:FreeRTOS\src/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2284:FreeRTOS\src/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2285:FreeRTOS\src/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2286:FreeRTOS\src/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2287:FreeRTOS\src/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2288:FreeRTOS\src/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2289:FreeRTOS\src/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2290:FreeRTOS\src/tasks.c **** 
2291:FreeRTOS\src/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2292:FreeRTOS\src/tasks.c **** 	{
2293:FreeRTOS\src/tasks.c **** 		xReturn = xTickCount;
2294:FreeRTOS\src/tasks.c **** 	}
2295:FreeRTOS\src/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2296:FreeRTOS\src/tasks.c **** 
2297:FreeRTOS\src/tasks.c **** 	return xReturn;
2298:FreeRTOS\src/tasks.c **** }
2299:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2300:FreeRTOS\src/tasks.c **** 
2301:FreeRTOS\src/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2302:FreeRTOS\src/tasks.c **** {
2303:FreeRTOS\src/tasks.c **** 	/* A critical section is not required because the variables are of type
2304:FreeRTOS\src/tasks.c **** 	BaseType_t. */
2305:FreeRTOS\src/tasks.c **** 	return uxCurrentNumberOfTasks;
2306:FreeRTOS\src/tasks.c **** }
2307:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2308:FreeRTOS\src/tasks.c **** 
2309:FreeRTOS\src/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2310:FreeRTOS\src/tasks.c **** {
2311:FreeRTOS\src/tasks.c **** TCB_t *pxTCB;
2312:FreeRTOS\src/tasks.c **** 
2313:FreeRTOS\src/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 43


2314:FreeRTOS\src/tasks.c **** 	queried. */
2315:FreeRTOS\src/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2316:FreeRTOS\src/tasks.c **** 	configASSERT( pxTCB );
2317:FreeRTOS\src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2318:FreeRTOS\src/tasks.c **** }
2319:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2320:FreeRTOS\src/tasks.c **** 
2321:FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2322:FreeRTOS\src/tasks.c **** 
2323:FreeRTOS\src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2324:FreeRTOS\src/tasks.c **** 	{
2325:FreeRTOS\src/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2326:FreeRTOS\src/tasks.c **** 	UBaseType_t x;
2327:FreeRTOS\src/tasks.c **** 	char cNextChar;
2328:FreeRTOS\src/tasks.c **** 	BaseType_t xBreakLoop;
2329:FreeRTOS\src/tasks.c **** 
2330:FreeRTOS\src/tasks.c **** 		/* This function is called with the scheduler suspended. */
2331:FreeRTOS\src/tasks.c **** 
2332:FreeRTOS\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2333:FreeRTOS\src/tasks.c **** 		{
2334:FreeRTOS\src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2335:FreeRTOS\src/tasks.c **** 
2336:FreeRTOS\src/tasks.c **** 			do
2337:FreeRTOS\src/tasks.c **** 			{
2338:FreeRTOS\src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2339:FreeRTOS\src/tasks.c **** 
2340:FreeRTOS\src/tasks.c **** 				/* Check each character in the name looking for a match or
2341:FreeRTOS\src/tasks.c **** 				mismatch. */
2342:FreeRTOS\src/tasks.c **** 				xBreakLoop = pdFALSE;
2343:FreeRTOS\src/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2344:FreeRTOS\src/tasks.c **** 				{
2345:FreeRTOS\src/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2346:FreeRTOS\src/tasks.c **** 
2347:FreeRTOS\src/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2348:FreeRTOS\src/tasks.c **** 					{
2349:FreeRTOS\src/tasks.c **** 						/* Characters didn't match. */
2350:FreeRTOS\src/tasks.c **** 						xBreakLoop = pdTRUE;
2351:FreeRTOS\src/tasks.c **** 					}
2352:FreeRTOS\src/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2353:FreeRTOS\src/tasks.c **** 					{
2354:FreeRTOS\src/tasks.c **** 						/* Both strings terminated, a match must have been
2355:FreeRTOS\src/tasks.c **** 						found. */
2356:FreeRTOS\src/tasks.c **** 						pxReturn = pxNextTCB;
2357:FreeRTOS\src/tasks.c **** 						xBreakLoop = pdTRUE;
2358:FreeRTOS\src/tasks.c **** 					}
2359:FreeRTOS\src/tasks.c **** 					else
2360:FreeRTOS\src/tasks.c **** 					{
2361:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2362:FreeRTOS\src/tasks.c **** 					}
2363:FreeRTOS\src/tasks.c **** 
2364:FreeRTOS\src/tasks.c **** 					if( xBreakLoop != pdFALSE )
2365:FreeRTOS\src/tasks.c **** 					{
2366:FreeRTOS\src/tasks.c **** 						break;
2367:FreeRTOS\src/tasks.c **** 					}
2368:FreeRTOS\src/tasks.c **** 				}
2369:FreeRTOS\src/tasks.c **** 
2370:FreeRTOS\src/tasks.c **** 				if( pxReturn != NULL )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 44


2371:FreeRTOS\src/tasks.c **** 				{
2372:FreeRTOS\src/tasks.c **** 					/* The handle has been found. */
2373:FreeRTOS\src/tasks.c **** 					break;
2374:FreeRTOS\src/tasks.c **** 				}
2375:FreeRTOS\src/tasks.c **** 
2376:FreeRTOS\src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2377:FreeRTOS\src/tasks.c **** 		}
2378:FreeRTOS\src/tasks.c **** 		else
2379:FreeRTOS\src/tasks.c **** 		{
2380:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2381:FreeRTOS\src/tasks.c **** 		}
2382:FreeRTOS\src/tasks.c **** 
2383:FreeRTOS\src/tasks.c **** 		return pxReturn;
2384:FreeRTOS\src/tasks.c **** 	}
2385:FreeRTOS\src/tasks.c **** 
2386:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2387:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2388:FreeRTOS\src/tasks.c **** 
2389:FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2390:FreeRTOS\src/tasks.c **** 
2391:FreeRTOS\src/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2392:FreeRTOS\src/tasks.c **** 	{
2393:FreeRTOS\src/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2394:FreeRTOS\src/tasks.c **** 	TCB_t* pxTCB;
2395:FreeRTOS\src/tasks.c **** 
2396:FreeRTOS\src/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2397:FreeRTOS\src/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2398:FreeRTOS\src/tasks.c **** 
2399:FreeRTOS\src/tasks.c **** 		vTaskSuspendAll();
2400:FreeRTOS\src/tasks.c **** 		{
2401:FreeRTOS\src/tasks.c **** 			/* Search the ready lists. */
2402:FreeRTOS\src/tasks.c **** 			do
2403:FreeRTOS\src/tasks.c **** 			{
2404:FreeRTOS\src/tasks.c **** 				uxQueue--;
2405:FreeRTOS\src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2406:FreeRTOS\src/tasks.c **** 
2407:FreeRTOS\src/tasks.c **** 				if( pxTCB != NULL )
2408:FreeRTOS\src/tasks.c **** 				{
2409:FreeRTOS\src/tasks.c **** 					/* Found the handle. */
2410:FreeRTOS\src/tasks.c **** 					break;
2411:FreeRTOS\src/tasks.c **** 				}
2412:FreeRTOS\src/tasks.c **** 
2413:FreeRTOS\src/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2414:FreeRTOS\src/tasks.c **** 
2415:FreeRTOS\src/tasks.c **** 			/* Search the delayed lists. */
2416:FreeRTOS\src/tasks.c **** 			if( pxTCB == NULL )
2417:FreeRTOS\src/tasks.c **** 			{
2418:FreeRTOS\src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2419:FreeRTOS\src/tasks.c **** 			}
2420:FreeRTOS\src/tasks.c **** 
2421:FreeRTOS\src/tasks.c **** 			if( pxTCB == NULL )
2422:FreeRTOS\src/tasks.c **** 			{
2423:FreeRTOS\src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2424:FreeRTOS\src/tasks.c **** 			}
2425:FreeRTOS\src/tasks.c **** 
2426:FreeRTOS\src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2427:FreeRTOS\src/tasks.c **** 			{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 45


2428:FreeRTOS\src/tasks.c **** 				if( pxTCB == NULL )
2429:FreeRTOS\src/tasks.c **** 				{
2430:FreeRTOS\src/tasks.c **** 					/* Search the suspended list. */
2431:FreeRTOS\src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2432:FreeRTOS\src/tasks.c **** 				}
2433:FreeRTOS\src/tasks.c **** 			}
2434:FreeRTOS\src/tasks.c **** 			#endif
2435:FreeRTOS\src/tasks.c **** 
2436:FreeRTOS\src/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2437:FreeRTOS\src/tasks.c **** 			{
2438:FreeRTOS\src/tasks.c **** 				if( pxTCB == NULL )
2439:FreeRTOS\src/tasks.c **** 				{
2440:FreeRTOS\src/tasks.c **** 					/* Search the deleted list. */
2441:FreeRTOS\src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2442:FreeRTOS\src/tasks.c **** 				}
2443:FreeRTOS\src/tasks.c **** 			}
2444:FreeRTOS\src/tasks.c **** 			#endif
2445:FreeRTOS\src/tasks.c **** 		}
2446:FreeRTOS\src/tasks.c **** 		( void ) xTaskResumeAll();
2447:FreeRTOS\src/tasks.c **** 
2448:FreeRTOS\src/tasks.c **** 		return pxTCB;
2449:FreeRTOS\src/tasks.c **** 	}
2450:FreeRTOS\src/tasks.c **** 
2451:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2452:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2453:FreeRTOS\src/tasks.c **** 
2454:FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2455:FreeRTOS\src/tasks.c **** 
2456:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2457:FreeRTOS\src/tasks.c **** 	{
2458:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2459:FreeRTOS\src/tasks.c **** 
2460:FreeRTOS\src/tasks.c **** 		vTaskSuspendAll();
2461:FreeRTOS\src/tasks.c **** 		{
2462:FreeRTOS\src/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2463:FreeRTOS\src/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2464:FreeRTOS\src/tasks.c **** 			{
2465:FreeRTOS\src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2466:FreeRTOS\src/tasks.c **** 				task in the Ready state. */
2467:FreeRTOS\src/tasks.c **** 				do
2468:FreeRTOS\src/tasks.c **** 				{
2469:FreeRTOS\src/tasks.c **** 					uxQueue--;
2470:FreeRTOS\src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2471:FreeRTOS\src/tasks.c **** 
2472:FreeRTOS\src/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2473:FreeRTOS\src/tasks.c **** 
2474:FreeRTOS\src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2475:FreeRTOS\src/tasks.c **** 				task in the Blocked state. */
2476:FreeRTOS\src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2477:FreeRTOS\src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2478:FreeRTOS\src/tasks.c **** 
2479:FreeRTOS\src/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2480:FreeRTOS\src/tasks.c **** 				{
2481:FreeRTOS\src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2482:FreeRTOS\src/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2483:FreeRTOS\src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2484:FreeRTOS\src/tasks.c **** 				}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 46


2485:FreeRTOS\src/tasks.c **** 				#endif
2486:FreeRTOS\src/tasks.c **** 
2487:FreeRTOS\src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2488:FreeRTOS\src/tasks.c **** 				{
2489:FreeRTOS\src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2490:FreeRTOS\src/tasks.c **** 					each task in the Suspended state. */
2491:FreeRTOS\src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2492:FreeRTOS\src/tasks.c **** 				}
2493:FreeRTOS\src/tasks.c **** 				#endif
2494:FreeRTOS\src/tasks.c **** 
2495:FreeRTOS\src/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2496:FreeRTOS\src/tasks.c **** 				{
2497:FreeRTOS\src/tasks.c **** 					if( pulTotalRunTime != NULL )
2498:FreeRTOS\src/tasks.c **** 					{
2499:FreeRTOS\src/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2500:FreeRTOS\src/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2501:FreeRTOS\src/tasks.c **** 						#else
2502:FreeRTOS\src/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2503:FreeRTOS\src/tasks.c **** 						#endif
2504:FreeRTOS\src/tasks.c **** 					}
2505:FreeRTOS\src/tasks.c **** 				}
2506:FreeRTOS\src/tasks.c **** 				#else
2507:FreeRTOS\src/tasks.c **** 				{
2508:FreeRTOS\src/tasks.c **** 					if( pulTotalRunTime != NULL )
2509:FreeRTOS\src/tasks.c **** 					{
2510:FreeRTOS\src/tasks.c **** 						*pulTotalRunTime = 0;
2511:FreeRTOS\src/tasks.c **** 					}
2512:FreeRTOS\src/tasks.c **** 				}
2513:FreeRTOS\src/tasks.c **** 				#endif
2514:FreeRTOS\src/tasks.c **** 			}
2515:FreeRTOS\src/tasks.c **** 			else
2516:FreeRTOS\src/tasks.c **** 			{
2517:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2518:FreeRTOS\src/tasks.c **** 			}
2519:FreeRTOS\src/tasks.c **** 		}
2520:FreeRTOS\src/tasks.c **** 		( void ) xTaskResumeAll();
2521:FreeRTOS\src/tasks.c **** 
2522:FreeRTOS\src/tasks.c **** 		return uxTask;
2523:FreeRTOS\src/tasks.c **** 	}
2524:FreeRTOS\src/tasks.c **** 
2525:FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2526:FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2527:FreeRTOS\src/tasks.c **** 
2528:FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2529:FreeRTOS\src/tasks.c **** 
2530:FreeRTOS\src/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2531:FreeRTOS\src/tasks.c **** 	{
2532:FreeRTOS\src/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2533:FreeRTOS\src/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2534:FreeRTOS\src/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2535:FreeRTOS\src/tasks.c **** 		return xIdleTaskHandle;
2536:FreeRTOS\src/tasks.c **** 	}
2537:FreeRTOS\src/tasks.c **** 
2538:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2539:FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2540:FreeRTOS\src/tasks.c **** 
2541:FreeRTOS\src/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 47


2542:FreeRTOS\src/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2543:FreeRTOS\src/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2544:FreeRTOS\src/tasks.c **** 1. */
2545:FreeRTOS\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2546:FreeRTOS\src/tasks.c **** 
2547:FreeRTOS\src/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2548:FreeRTOS\src/tasks.c **** 	{
2549:FreeRTOS\src/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2550:FreeRTOS\src/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2551:FreeRTOS\src/tasks.c **** 		each stepped tick. */
2552:FreeRTOS\src/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2553:FreeRTOS\src/tasks.c **** 		xTickCount += xTicksToJump;
2554:FreeRTOS\src/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2555:FreeRTOS\src/tasks.c **** 	}
2556:FreeRTOS\src/tasks.c **** 
2557:FreeRTOS\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2558:FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2559:FreeRTOS\src/tasks.c **** 
2560:FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2561:FreeRTOS\src/tasks.c **** 
2562:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2563:FreeRTOS\src/tasks.c **** 	{
2564:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB = xTask;
2565:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
2566:FreeRTOS\src/tasks.c **** 
2567:FreeRTOS\src/tasks.c **** 		configASSERT( pxTCB );
2568:FreeRTOS\src/tasks.c **** 
2569:FreeRTOS\src/tasks.c **** 		vTaskSuspendAll();
2570:FreeRTOS\src/tasks.c **** 		{
2571:FreeRTOS\src/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2572:FreeRTOS\src/tasks.c **** 			it is actually in the Blocked state. */
2573:FreeRTOS\src/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2574:FreeRTOS\src/tasks.c **** 			{
2575:FreeRTOS\src/tasks.c **** 				xReturn = pdPASS;
2576:FreeRTOS\src/tasks.c **** 
2577:FreeRTOS\src/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2578:FreeRTOS\src/tasks.c **** 				interrupt won't touch the xStateListItem because the
2579:FreeRTOS\src/tasks.c **** 				scheduler is suspended. */
2580:FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2581:FreeRTOS\src/tasks.c **** 
2582:FreeRTOS\src/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2583:FreeRTOS\src/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2584:FreeRTOS\src/tasks.c **** 				even though the scheduler is suspended, so a critical section
2585:FreeRTOS\src/tasks.c **** 				is used. */
2586:FreeRTOS\src/tasks.c **** 				taskENTER_CRITICAL();
2587:FreeRTOS\src/tasks.c **** 				{
2588:FreeRTOS\src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2589:FreeRTOS\src/tasks.c **** 					{
2590:FreeRTOS\src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2591:FreeRTOS\src/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2592:FreeRTOS\src/tasks.c **** 					}
2593:FreeRTOS\src/tasks.c **** 					else
2594:FreeRTOS\src/tasks.c **** 					{
2595:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2596:FreeRTOS\src/tasks.c **** 					}
2597:FreeRTOS\src/tasks.c **** 				}
2598:FreeRTOS\src/tasks.c **** 				taskEXIT_CRITICAL();
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 48


2599:FreeRTOS\src/tasks.c **** 
2600:FreeRTOS\src/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2601:FreeRTOS\src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2602:FreeRTOS\src/tasks.c **** 
2603:FreeRTOS\src/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2604:FreeRTOS\src/tasks.c **** 				switch if preemption is turned off. */
2605:FreeRTOS\src/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2606:FreeRTOS\src/tasks.c **** 				{
2607:FreeRTOS\src/tasks.c **** 					/* Preemption is on, but a context switch should only be
2608:FreeRTOS\src/tasks.c **** 					performed if the unblocked task has a priority that is
2609:FreeRTOS\src/tasks.c **** 					equal to or higher than the currently executing task. */
2610:FreeRTOS\src/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2611:FreeRTOS\src/tasks.c **** 					{
2612:FreeRTOS\src/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2613:FreeRTOS\src/tasks.c **** 						is unsuspended. */
2614:FreeRTOS\src/tasks.c **** 						xYieldPending = pdTRUE;
2615:FreeRTOS\src/tasks.c **** 					}
2616:FreeRTOS\src/tasks.c **** 					else
2617:FreeRTOS\src/tasks.c **** 					{
2618:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2619:FreeRTOS\src/tasks.c **** 					}
2620:FreeRTOS\src/tasks.c **** 				}
2621:FreeRTOS\src/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2622:FreeRTOS\src/tasks.c **** 			}
2623:FreeRTOS\src/tasks.c **** 			else
2624:FreeRTOS\src/tasks.c **** 			{
2625:FreeRTOS\src/tasks.c **** 				xReturn = pdFAIL;
2626:FreeRTOS\src/tasks.c **** 			}
2627:FreeRTOS\src/tasks.c **** 		}
2628:FreeRTOS\src/tasks.c **** 		( void ) xTaskResumeAll();
2629:FreeRTOS\src/tasks.c **** 
2630:FreeRTOS\src/tasks.c **** 		return xReturn;
2631:FreeRTOS\src/tasks.c **** 	}
2632:FreeRTOS\src/tasks.c **** 
2633:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2634:FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2635:FreeRTOS\src/tasks.c **** 
2636:FreeRTOS\src/tasks.c **** BaseType_t xTaskIncrementTick( void )
2637:FreeRTOS\src/tasks.c **** {
2638:FreeRTOS\src/tasks.c **** TCB_t * pxTCB;
2639:FreeRTOS\src/tasks.c **** TickType_t xItemValue;
2640:FreeRTOS\src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2641:FreeRTOS\src/tasks.c **** 
2642:FreeRTOS\src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2643:FreeRTOS\src/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2644:FreeRTOS\src/tasks.c **** 	tasks to be unblocked. */
2645:FreeRTOS\src/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2646:FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2647:FreeRTOS\src/tasks.c **** 	{
2648:FreeRTOS\src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2649:FreeRTOS\src/tasks.c **** 		block. */
2650:FreeRTOS\src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2651:FreeRTOS\src/tasks.c **** 
2652:FreeRTOS\src/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2653:FreeRTOS\src/tasks.c **** 		delayed lists if it wraps to 0. */
2654:FreeRTOS\src/tasks.c **** 		xTickCount = xConstTickCount;
2655:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 49


2656:FreeRTOS\src/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2657:FreeRTOS\src/tasks.c **** 		{
2658:FreeRTOS\src/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2659:FreeRTOS\src/tasks.c **** 		}
2660:FreeRTOS\src/tasks.c **** 		else
2661:FreeRTOS\src/tasks.c **** 		{
2662:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:FreeRTOS\src/tasks.c **** 		}
2664:FreeRTOS\src/tasks.c **** 
2665:FreeRTOS\src/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2666:FreeRTOS\src/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2667:FreeRTOS\src/tasks.c **** 		has been found whose block time has not expired there is no need to
2668:FreeRTOS\src/tasks.c **** 		look any further down the list. */
2669:FreeRTOS\src/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2670:FreeRTOS\src/tasks.c **** 		{
2671:FreeRTOS\src/tasks.c **** 			for( ;; )
2672:FreeRTOS\src/tasks.c **** 			{
2673:FreeRTOS\src/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2674:FreeRTOS\src/tasks.c **** 				{
2675:FreeRTOS\src/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2676:FreeRTOS\src/tasks.c **** 					to the maximum possible value so it is extremely
2677:FreeRTOS\src/tasks.c **** 					unlikely that the
2678:FreeRTOS\src/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2679:FreeRTOS\src/tasks.c **** 					next time through. */
2680:FreeRTOS\src/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2681:FreeRTOS\src/tasks.c **** 					break;
2682:FreeRTOS\src/tasks.c **** 				}
2683:FreeRTOS\src/tasks.c **** 				else
2684:FreeRTOS\src/tasks.c **** 				{
2685:FreeRTOS\src/tasks.c **** 					/* The delayed list is not empty, get the value of the
2686:FreeRTOS\src/tasks.c **** 					item at the head of the delayed list.  This is the time
2687:FreeRTOS\src/tasks.c **** 					at which the task at the head of the delayed list must
2688:FreeRTOS\src/tasks.c **** 					be removed from the Blocked state. */
2689:FreeRTOS\src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2690:FreeRTOS\src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2691:FreeRTOS\src/tasks.c **** 
2692:FreeRTOS\src/tasks.c **** 					if( xConstTickCount < xItemValue )
2693:FreeRTOS\src/tasks.c **** 					{
2694:FreeRTOS\src/tasks.c **** 						/* It is not time to unblock this item yet, but the
2695:FreeRTOS\src/tasks.c **** 						item value is the time at which the task at the head
2696:FreeRTOS\src/tasks.c **** 						of the blocked list must be removed from the Blocked
2697:FreeRTOS\src/tasks.c **** 						state -	so record the item value in
2698:FreeRTOS\src/tasks.c **** 						xNextTaskUnblockTime. */
2699:FreeRTOS\src/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2700:FreeRTOS\src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2701:FreeRTOS\src/tasks.c **** 					}
2702:FreeRTOS\src/tasks.c **** 					else
2703:FreeRTOS\src/tasks.c **** 					{
2704:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2705:FreeRTOS\src/tasks.c **** 					}
2706:FreeRTOS\src/tasks.c **** 
2707:FreeRTOS\src/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2708:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2709:FreeRTOS\src/tasks.c **** 
2710:FreeRTOS\src/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2711:FreeRTOS\src/tasks.c **** 					it from the event list. */
2712:FreeRTOS\src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 50


2713:FreeRTOS\src/tasks.c **** 					{
2714:FreeRTOS\src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2715:FreeRTOS\src/tasks.c **** 					}
2716:FreeRTOS\src/tasks.c **** 					else
2717:FreeRTOS\src/tasks.c **** 					{
2718:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2719:FreeRTOS\src/tasks.c **** 					}
2720:FreeRTOS\src/tasks.c **** 
2721:FreeRTOS\src/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2722:FreeRTOS\src/tasks.c **** 					list. */
2723:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2724:FreeRTOS\src/tasks.c **** 
2725:FreeRTOS\src/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2726:FreeRTOS\src/tasks.c **** 					context switch if preemption is turned off. */
2727:FreeRTOS\src/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2728:FreeRTOS\src/tasks.c **** 					{
2729:FreeRTOS\src/tasks.c **** 						/* Preemption is on, but a context switch should
2730:FreeRTOS\src/tasks.c **** 						only be performed if the unblocked task has a
2731:FreeRTOS\src/tasks.c **** 						priority that is equal to or higher than the
2732:FreeRTOS\src/tasks.c **** 						currently executing task. */
2733:FreeRTOS\src/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2734:FreeRTOS\src/tasks.c **** 						{
2735:FreeRTOS\src/tasks.c **** 							xSwitchRequired = pdTRUE;
2736:FreeRTOS\src/tasks.c **** 						}
2737:FreeRTOS\src/tasks.c **** 						else
2738:FreeRTOS\src/tasks.c **** 						{
2739:FreeRTOS\src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2740:FreeRTOS\src/tasks.c **** 						}
2741:FreeRTOS\src/tasks.c **** 					}
2742:FreeRTOS\src/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2743:FreeRTOS\src/tasks.c **** 				}
2744:FreeRTOS\src/tasks.c **** 			}
2745:FreeRTOS\src/tasks.c **** 		}
2746:FreeRTOS\src/tasks.c **** 
2747:FreeRTOS\src/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2748:FreeRTOS\src/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2749:FreeRTOS\src/tasks.c **** 		writer has not explicitly turned time slicing off. */
2750:FreeRTOS\src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2751:FreeRTOS\src/tasks.c **** 		{
2752:FreeRTOS\src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2753:FreeRTOS\src/tasks.c **** 			{
2754:FreeRTOS\src/tasks.c **** 				xSwitchRequired = pdTRUE;
2755:FreeRTOS\src/tasks.c **** 			}
2756:FreeRTOS\src/tasks.c **** 			else
2757:FreeRTOS\src/tasks.c **** 			{
2758:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2759:FreeRTOS\src/tasks.c **** 			}
2760:FreeRTOS\src/tasks.c **** 		}
2761:FreeRTOS\src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2762:FreeRTOS\src/tasks.c **** 
2763:FreeRTOS\src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2764:FreeRTOS\src/tasks.c **** 		{
2765:FreeRTOS\src/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2766:FreeRTOS\src/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2767:FreeRTOS\src/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2768:FreeRTOS\src/tasks.c **** 			{
2769:FreeRTOS\src/tasks.c **** 				vApplicationTickHook();
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 51


2770:FreeRTOS\src/tasks.c **** 			}
2771:FreeRTOS\src/tasks.c **** 			else
2772:FreeRTOS\src/tasks.c **** 			{
2773:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2774:FreeRTOS\src/tasks.c **** 			}
2775:FreeRTOS\src/tasks.c **** 		}
2776:FreeRTOS\src/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2777:FreeRTOS\src/tasks.c **** 	}
2778:FreeRTOS\src/tasks.c **** 	else
2779:FreeRTOS\src/tasks.c **** 	{
2780:FreeRTOS\src/tasks.c **** 		++uxPendedTicks;
2781:FreeRTOS\src/tasks.c **** 
2782:FreeRTOS\src/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2783:FreeRTOS\src/tasks.c **** 		scheduler is locked. */
2784:FreeRTOS\src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2785:FreeRTOS\src/tasks.c **** 		{
2786:FreeRTOS\src/tasks.c **** 			vApplicationTickHook();
2787:FreeRTOS\src/tasks.c **** 		}
2788:FreeRTOS\src/tasks.c **** 		#endif
2789:FreeRTOS\src/tasks.c **** 	}
2790:FreeRTOS\src/tasks.c **** 
2791:FreeRTOS\src/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2792:FreeRTOS\src/tasks.c **** 	{
2793:FreeRTOS\src/tasks.c **** 		if( xYieldPending != pdFALSE )
2794:FreeRTOS\src/tasks.c **** 		{
2795:FreeRTOS\src/tasks.c **** 			xSwitchRequired = pdTRUE;
2796:FreeRTOS\src/tasks.c **** 		}
2797:FreeRTOS\src/tasks.c **** 		else
2798:FreeRTOS\src/tasks.c **** 		{
2799:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2800:FreeRTOS\src/tasks.c **** 		}
2801:FreeRTOS\src/tasks.c **** 	}
2802:FreeRTOS\src/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2803:FreeRTOS\src/tasks.c **** 
2804:FreeRTOS\src/tasks.c **** 	return xSwitchRequired;
2805:FreeRTOS\src/tasks.c **** }
2806:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2807:FreeRTOS\src/tasks.c **** 
2808:FreeRTOS\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2809:FreeRTOS\src/tasks.c **** 
2810:FreeRTOS\src/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2811:FreeRTOS\src/tasks.c **** 	{
2812:FreeRTOS\src/tasks.c **** 	TCB_t *xTCB;
2813:FreeRTOS\src/tasks.c **** 
2814:FreeRTOS\src/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2815:FreeRTOS\src/tasks.c **** 		getting set. */
2816:FreeRTOS\src/tasks.c **** 		if( xTask == NULL )
2817:FreeRTOS\src/tasks.c **** 		{
2818:FreeRTOS\src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2819:FreeRTOS\src/tasks.c **** 		}
2820:FreeRTOS\src/tasks.c **** 		else
2821:FreeRTOS\src/tasks.c **** 		{
2822:FreeRTOS\src/tasks.c **** 			xTCB = xTask;
2823:FreeRTOS\src/tasks.c **** 		}
2824:FreeRTOS\src/tasks.c **** 
2825:FreeRTOS\src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2826:FreeRTOS\src/tasks.c **** 		the value can be accessed from an interrupt. */
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 52


2827:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
2828:FreeRTOS\src/tasks.c **** 		{
2829:FreeRTOS\src/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2830:FreeRTOS\src/tasks.c **** 		}
2831:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
2832:FreeRTOS\src/tasks.c **** 	}
2833:FreeRTOS\src/tasks.c **** 
2834:FreeRTOS\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2835:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2836:FreeRTOS\src/tasks.c **** 
2837:FreeRTOS\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:FreeRTOS\src/tasks.c **** 
2839:FreeRTOS\src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2840:FreeRTOS\src/tasks.c **** 	{
2841:FreeRTOS\src/tasks.c **** 	TCB_t *xTCB;
2842:FreeRTOS\src/tasks.c **** 	TaskHookFunction_t xReturn;
2843:FreeRTOS\src/tasks.c **** 
2844:FreeRTOS\src/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2845:FreeRTOS\src/tasks.c **** 		if( xTask == NULL )
2846:FreeRTOS\src/tasks.c **** 		{
2847:FreeRTOS\src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:FreeRTOS\src/tasks.c **** 		}
2849:FreeRTOS\src/tasks.c **** 		else
2850:FreeRTOS\src/tasks.c **** 		{
2851:FreeRTOS\src/tasks.c **** 			xTCB = xTask;
2852:FreeRTOS\src/tasks.c **** 		}
2853:FreeRTOS\src/tasks.c **** 
2854:FreeRTOS\src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:FreeRTOS\src/tasks.c **** 		the value can be accessed from an interrupt. */
2856:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
2857:FreeRTOS\src/tasks.c **** 		{
2858:FreeRTOS\src/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2859:FreeRTOS\src/tasks.c **** 		}
2860:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
2861:FreeRTOS\src/tasks.c **** 
2862:FreeRTOS\src/tasks.c **** 		return xReturn;
2863:FreeRTOS\src/tasks.c **** 	}
2864:FreeRTOS\src/tasks.c **** 
2865:FreeRTOS\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2866:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2867:FreeRTOS\src/tasks.c **** 
2868:FreeRTOS\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2869:FreeRTOS\src/tasks.c **** 
2870:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2871:FreeRTOS\src/tasks.c **** 	{
2872:FreeRTOS\src/tasks.c **** 	TCB_t *xTCB;
2873:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
2874:FreeRTOS\src/tasks.c **** 
2875:FreeRTOS\src/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2876:FreeRTOS\src/tasks.c **** 		if( xTask == NULL )
2877:FreeRTOS\src/tasks.c **** 		{
2878:FreeRTOS\src/tasks.c **** 			xTCB = pxCurrentTCB;
2879:FreeRTOS\src/tasks.c **** 		}
2880:FreeRTOS\src/tasks.c **** 		else
2881:FreeRTOS\src/tasks.c **** 		{
2882:FreeRTOS\src/tasks.c **** 			xTCB = xTask;
2883:FreeRTOS\src/tasks.c **** 		}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 53


2884:FreeRTOS\src/tasks.c **** 
2885:FreeRTOS\src/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2886:FreeRTOS\src/tasks.c **** 		{
2887:FreeRTOS\src/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2888:FreeRTOS\src/tasks.c **** 		}
2889:FreeRTOS\src/tasks.c **** 		else
2890:FreeRTOS\src/tasks.c **** 		{
2891:FreeRTOS\src/tasks.c **** 			xReturn = pdFAIL;
2892:FreeRTOS\src/tasks.c **** 		}
2893:FreeRTOS\src/tasks.c **** 
2894:FreeRTOS\src/tasks.c **** 		return xReturn;
2895:FreeRTOS\src/tasks.c **** 	}
2896:FreeRTOS\src/tasks.c **** 
2897:FreeRTOS\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2898:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2899:FreeRTOS\src/tasks.c **** 
2900:FreeRTOS\src/tasks.c **** void vTaskSwitchContext( void )
2901:FreeRTOS\src/tasks.c **** {
2902:FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2903:FreeRTOS\src/tasks.c **** 	{
2904:FreeRTOS\src/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2905:FreeRTOS\src/tasks.c **** 		switch. */
2906:FreeRTOS\src/tasks.c **** 		xYieldPending = pdTRUE;
2907:FreeRTOS\src/tasks.c **** 	}
2908:FreeRTOS\src/tasks.c **** 	else
2909:FreeRTOS\src/tasks.c **** 	{
2910:FreeRTOS\src/tasks.c **** 		xYieldPending = pdFALSE;
2911:FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_OUT();
2912:FreeRTOS\src/tasks.c **** 
2913:FreeRTOS\src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2914:FreeRTOS\src/tasks.c **** 		{
2915:FreeRTOS\src/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2916:FreeRTOS\src/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2917:FreeRTOS\src/tasks.c **** 				#else
2918:FreeRTOS\src/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2919:FreeRTOS\src/tasks.c **** 				#endif
2920:FreeRTOS\src/tasks.c **** 
2921:FreeRTOS\src/tasks.c **** 				/* Add the amount of time the task has been running to the
2922:FreeRTOS\src/tasks.c **** 				accumulated time so far.  The time the task started running was
2923:FreeRTOS\src/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2924:FreeRTOS\src/tasks.c **** 				protection here so count values are only valid until the timer
2925:FreeRTOS\src/tasks.c **** 				overflows.  The guard against negative values is to protect
2926:FreeRTOS\src/tasks.c **** 				against suspect run time stat counter implementations - which
2927:FreeRTOS\src/tasks.c **** 				are provided by the application, not the kernel. */
2928:FreeRTOS\src/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2929:FreeRTOS\src/tasks.c **** 				{
2930:FreeRTOS\src/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2931:FreeRTOS\src/tasks.c **** 				}
2932:FreeRTOS\src/tasks.c **** 				else
2933:FreeRTOS\src/tasks.c **** 				{
2934:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2935:FreeRTOS\src/tasks.c **** 				}
2936:FreeRTOS\src/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2937:FreeRTOS\src/tasks.c **** 		}
2938:FreeRTOS\src/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2939:FreeRTOS\src/tasks.c **** 
2940:FreeRTOS\src/tasks.c **** 		/* Check for stack overflow, if configured. */
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 54


2941:FreeRTOS\src/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2942:FreeRTOS\src/tasks.c **** 
2943:FreeRTOS\src/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2944:FreeRTOS\src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2945:FreeRTOS\src/tasks.c **** 		{
2946:FreeRTOS\src/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2947:FreeRTOS\src/tasks.c **** 		}
2948:FreeRTOS\src/tasks.c **** 		#endif
2949:FreeRTOS\src/tasks.c **** 
2950:FreeRTOS\src/tasks.c **** 		/* Select a new task to run using either the generic C or port
2951:FreeRTOS\src/tasks.c **** 		optimised asm code. */
2952:FreeRTOS\src/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
2953:FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
2954:FreeRTOS\src/tasks.c **** 
2955:FreeRTOS\src/tasks.c **** 		/* After the new task is switched in, update the global errno. */
2956:FreeRTOS\src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2957:FreeRTOS\src/tasks.c **** 		{
2958:FreeRTOS\src/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
2959:FreeRTOS\src/tasks.c **** 		}
2960:FreeRTOS\src/tasks.c **** 		#endif
2961:FreeRTOS\src/tasks.c **** 
2962:FreeRTOS\src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2963:FreeRTOS\src/tasks.c **** 		{
2964:FreeRTOS\src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2965:FreeRTOS\src/tasks.c **** 			structure specific to this task. */
2966:FreeRTOS\src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2967:FreeRTOS\src/tasks.c **** 		}
2968:FreeRTOS\src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2969:FreeRTOS\src/tasks.c **** 	}
2970:FreeRTOS\src/tasks.c **** }
2971:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2972:FreeRTOS\src/tasks.c **** 
2973:FreeRTOS\src/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2974:FreeRTOS\src/tasks.c **** {
2975:FreeRTOS\src/tasks.c **** 	configASSERT( pxEventList );
2976:FreeRTOS\src/tasks.c **** 
2977:FreeRTOS\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2978:FreeRTOS\src/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2979:FreeRTOS\src/tasks.c **** 
2980:FreeRTOS\src/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2981:FreeRTOS\src/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2982:FreeRTOS\src/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2983:FreeRTOS\src/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2984:FreeRTOS\src/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2985:FreeRTOS\src/tasks.c **** 
2986:FreeRTOS\src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2987:FreeRTOS\src/tasks.c **** }
2988:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2989:FreeRTOS\src/tasks.c **** 
2990:FreeRTOS\src/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2991:FreeRTOS\src/tasks.c **** {
2992:FreeRTOS\src/tasks.c **** 	configASSERT( pxEventList );
2993:FreeRTOS\src/tasks.c **** 
2994:FreeRTOS\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2995:FreeRTOS\src/tasks.c **** 	the event groups implementation. */
2996:FreeRTOS\src/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2997:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 55


2998:FreeRTOS\src/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2999:FreeRTOS\src/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3000:FreeRTOS\src/tasks.c **** 	task that is not in the Blocked state. */
3001:FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3002:FreeRTOS\src/tasks.c **** 
3003:FreeRTOS\src/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3004:FreeRTOS\src/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3005:FreeRTOS\src/tasks.c **** 	event group implementation - and interrupts don't access event groups
3006:FreeRTOS\src/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3007:FreeRTOS\src/tasks.c **** 	the task level). */
3008:FreeRTOS\src/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3009:FreeRTOS\src/tasks.c **** 
3010:FreeRTOS\src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3011:FreeRTOS\src/tasks.c **** }
3012:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3013:FreeRTOS\src/tasks.c **** 
3014:FreeRTOS\src/tasks.c **** #if( configUSE_TIMERS == 1 )
3015:FreeRTOS\src/tasks.c **** 
3016:FreeRTOS\src/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3017:FreeRTOS\src/tasks.c **** 	{
3018:FreeRTOS\src/tasks.c **** 		configASSERT( pxEventList );
3019:FreeRTOS\src/tasks.c **** 
3020:FreeRTOS\src/tasks.c **** 		/* This function should not be called by application code hence the
3021:FreeRTOS\src/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3022:FreeRTOS\src/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3023:FreeRTOS\src/tasks.c **** 		it should be called with the scheduler suspended. */
3024:FreeRTOS\src/tasks.c **** 
3025:FreeRTOS\src/tasks.c **** 
3026:FreeRTOS\src/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3027:FreeRTOS\src/tasks.c **** 		In this case it is assume that this is the only task that is going to
3028:FreeRTOS\src/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3029:FreeRTOS\src/tasks.c **** 		can be used in place of vListInsert. */
3030:FreeRTOS\src/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3031:FreeRTOS\src/tasks.c **** 
3032:FreeRTOS\src/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3033:FreeRTOS\src/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3034:FreeRTOS\src/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3035:FreeRTOS\src/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3036:FreeRTOS\src/tasks.c **** 		{
3037:FreeRTOS\src/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3038:FreeRTOS\src/tasks.c **** 		}
3039:FreeRTOS\src/tasks.c **** 
3040:FreeRTOS\src/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3041:FreeRTOS\src/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3042:FreeRTOS\src/tasks.c **** 	}
3043:FreeRTOS\src/tasks.c **** 
3044:FreeRTOS\src/tasks.c **** #endif /* configUSE_TIMERS */
3045:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3046:FreeRTOS\src/tasks.c **** 
3047:FreeRTOS\src/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3048:FreeRTOS\src/tasks.c **** {
3049:FreeRTOS\src/tasks.c **** TCB_t *pxUnblockedTCB;
3050:FreeRTOS\src/tasks.c **** BaseType_t xReturn;
3051:FreeRTOS\src/tasks.c **** 
3052:FreeRTOS\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3053:FreeRTOS\src/tasks.c **** 	called from a critical section within an ISR. */
3054:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 56


3055:FreeRTOS\src/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3056:FreeRTOS\src/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3057:FreeRTOS\src/tasks.c **** 	the delayed list, and add it to the ready list.
3058:FreeRTOS\src/tasks.c **** 
3059:FreeRTOS\src/tasks.c **** 	If an event is for a queue that is locked then this function will never
3060:FreeRTOS\src/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3061:FreeRTOS\src/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3062:FreeRTOS\src/tasks.c **** 
3063:FreeRTOS\src/tasks.c **** 	This function assumes that a check has already been made to ensure that
3064:FreeRTOS\src/tasks.c **** 	pxEventList is not empty. */
3065:FreeRTOS\src/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3066:FreeRTOS\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
3067:FreeRTOS\src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3068:FreeRTOS\src/tasks.c **** 
3069:FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3070:FreeRTOS\src/tasks.c **** 	{
3071:FreeRTOS\src/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3072:FreeRTOS\src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3073:FreeRTOS\src/tasks.c **** 	}
3074:FreeRTOS\src/tasks.c **** 	else
3075:FreeRTOS\src/tasks.c **** 	{
3076:FreeRTOS\src/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3077:FreeRTOS\src/tasks.c **** 		pending until the scheduler is resumed. */
3078:FreeRTOS\src/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3079:FreeRTOS\src/tasks.c **** 	}
3080:FreeRTOS\src/tasks.c **** 
3081:FreeRTOS\src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3082:FreeRTOS\src/tasks.c **** 	{
3083:FreeRTOS\src/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3084:FreeRTOS\src/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3085:FreeRTOS\src/tasks.c **** 		it should force a context switch now. */
3086:FreeRTOS\src/tasks.c **** 		xReturn = pdTRUE;
3087:FreeRTOS\src/tasks.c **** 
3088:FreeRTOS\src/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3089:FreeRTOS\src/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3090:FreeRTOS\src/tasks.c **** 		xYieldPending = pdTRUE;
3091:FreeRTOS\src/tasks.c **** 	}
3092:FreeRTOS\src/tasks.c **** 	else
3093:FreeRTOS\src/tasks.c **** 	{
3094:FreeRTOS\src/tasks.c **** 		xReturn = pdFALSE;
3095:FreeRTOS\src/tasks.c **** 	}
3096:FreeRTOS\src/tasks.c **** 
3097:FreeRTOS\src/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3098:FreeRTOS\src/tasks.c **** 	{
3099:FreeRTOS\src/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3100:FreeRTOS\src/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3101:FreeRTOS\src/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3102:FreeRTOS\src/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3103:FreeRTOS\src/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3104:FreeRTOS\src/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3105:FreeRTOS\src/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3106:FreeRTOS\src/tasks.c **** 		ensure it is updated at the earliest possible time. */
3107:FreeRTOS\src/tasks.c **** 		prvResetNextTaskUnblockTime();
3108:FreeRTOS\src/tasks.c **** 	}
3109:FreeRTOS\src/tasks.c **** 	#endif
3110:FreeRTOS\src/tasks.c **** 
3111:FreeRTOS\src/tasks.c **** 	return xReturn;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 57


3112:FreeRTOS\src/tasks.c **** }
3113:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3114:FreeRTOS\src/tasks.c **** 
3115:FreeRTOS\src/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3116:FreeRTOS\src/tasks.c **** {
3117:FreeRTOS\src/tasks.c **** TCB_t *pxUnblockedTCB;
3118:FreeRTOS\src/tasks.c **** 
3119:FreeRTOS\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3120:FreeRTOS\src/tasks.c **** 	the event flags implementation. */
3121:FreeRTOS\src/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3122:FreeRTOS\src/tasks.c **** 
3123:FreeRTOS\src/tasks.c **** 	/* Store the new item value in the event list. */
3124:FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3125:FreeRTOS\src/tasks.c **** 
3126:FreeRTOS\src/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3127:FreeRTOS\src/tasks.c **** 	event flags. */
3128:FreeRTOS\src/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3129:FreeRTOS\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
3130:FreeRTOS\src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3131:FreeRTOS\src/tasks.c **** 
3132:FreeRTOS\src/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3133:FreeRTOS\src/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3134:FreeRTOS\src/tasks.c **** 	lists. */
3135:FreeRTOS\src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3136:FreeRTOS\src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3137:FreeRTOS\src/tasks.c **** 
3138:FreeRTOS\src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3139:FreeRTOS\src/tasks.c **** 	{
3140:FreeRTOS\src/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3141:FreeRTOS\src/tasks.c **** 		a context switch is required.  This function is called with the
3142:FreeRTOS\src/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3143:FreeRTOS\src/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3144:FreeRTOS\src/tasks.c **** 		xYieldPending = pdTRUE;
3145:FreeRTOS\src/tasks.c **** 	}
3146:FreeRTOS\src/tasks.c **** }
3147:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3148:FreeRTOS\src/tasks.c **** 
3149:FreeRTOS\src/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3150:FreeRTOS\src/tasks.c **** {
3151:FreeRTOS\src/tasks.c **** 	configASSERT( pxTimeOut );
3152:FreeRTOS\src/tasks.c **** 	taskENTER_CRITICAL();
3153:FreeRTOS\src/tasks.c **** 	{
3154:FreeRTOS\src/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3155:FreeRTOS\src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3156:FreeRTOS\src/tasks.c **** 	}
3157:FreeRTOS\src/tasks.c **** 	taskEXIT_CRITICAL();
3158:FreeRTOS\src/tasks.c **** }
3159:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3160:FreeRTOS\src/tasks.c **** 
3161:FreeRTOS\src/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3162:FreeRTOS\src/tasks.c **** {
3163:FreeRTOS\src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3164:FreeRTOS\src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3165:FreeRTOS\src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3166:FreeRTOS\src/tasks.c **** }
3167:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3168:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 58


3169:FreeRTOS\src/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3170:FreeRTOS\src/tasks.c **** {
3171:FreeRTOS\src/tasks.c **** BaseType_t xReturn;
3172:FreeRTOS\src/tasks.c **** 
3173:FreeRTOS\src/tasks.c **** 	configASSERT( pxTimeOut );
3174:FreeRTOS\src/tasks.c **** 	configASSERT( pxTicksToWait );
3175:FreeRTOS\src/tasks.c **** 
3176:FreeRTOS\src/tasks.c **** 	taskENTER_CRITICAL();
3177:FreeRTOS\src/tasks.c **** 	{
3178:FreeRTOS\src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3179:FreeRTOS\src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3180:FreeRTOS\src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3181:FreeRTOS\src/tasks.c **** 
3182:FreeRTOS\src/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3183:FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3184:FreeRTOS\src/tasks.c **** 			{
3185:FreeRTOS\src/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3186:FreeRTOS\src/tasks.c **** 				but has the same result. */
3187:FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3188:FreeRTOS\src/tasks.c **** 				xReturn = pdTRUE;
3189:FreeRTOS\src/tasks.c **** 			}
3190:FreeRTOS\src/tasks.c **** 			else
3191:FreeRTOS\src/tasks.c **** 		#endif
3192:FreeRTOS\src/tasks.c **** 
3193:FreeRTOS\src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3194:FreeRTOS\src/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3195:FreeRTOS\src/tasks.c **** 			{
3196:FreeRTOS\src/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3197:FreeRTOS\src/tasks.c **** 				specified is the maximum block time then the task should block
3198:FreeRTOS\src/tasks.c **** 				indefinitely, and therefore never time out. */
3199:FreeRTOS\src/tasks.c **** 				xReturn = pdFALSE;
3200:FreeRTOS\src/tasks.c **** 			}
3201:FreeRTOS\src/tasks.c **** 			else
3202:FreeRTOS\src/tasks.c **** 		#endif
3203:FreeRTOS\src/tasks.c **** 
3204:FreeRTOS\src/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3205:FreeRTOS\src/tasks.c **** 		{
3206:FreeRTOS\src/tasks.c **** 			/* The tick count is greater than the time at which
3207:FreeRTOS\src/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3208:FreeRTOS\src/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3209:FreeRTOS\src/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3210:FreeRTOS\src/tasks.c **** 			was called. */
3211:FreeRTOS\src/tasks.c **** 			xReturn = pdTRUE;
3212:FreeRTOS\src/tasks.c **** 		}
3213:FreeRTOS\src/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3214:FreeRTOS\src/tasks.c **** 		{
3215:FreeRTOS\src/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3216:FreeRTOS\src/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3217:FreeRTOS\src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3218:FreeRTOS\src/tasks.c **** 			xReturn = pdFALSE;
3219:FreeRTOS\src/tasks.c **** 		}
3220:FreeRTOS\src/tasks.c **** 		else
3221:FreeRTOS\src/tasks.c **** 		{
3222:FreeRTOS\src/tasks.c **** 			*pxTicksToWait = 0;
3223:FreeRTOS\src/tasks.c **** 			xReturn = pdTRUE;
3224:FreeRTOS\src/tasks.c **** 		}
3225:FreeRTOS\src/tasks.c **** 	}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 59


3226:FreeRTOS\src/tasks.c **** 	taskEXIT_CRITICAL();
3227:FreeRTOS\src/tasks.c **** 
3228:FreeRTOS\src/tasks.c **** 	return xReturn;
3229:FreeRTOS\src/tasks.c **** }
3230:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3231:FreeRTOS\src/tasks.c **** 
3232:FreeRTOS\src/tasks.c **** void vTaskMissedYield( void )
3233:FreeRTOS\src/tasks.c **** {
3234:FreeRTOS\src/tasks.c **** 	xYieldPending = pdTRUE;
3235:FreeRTOS\src/tasks.c **** }
3236:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3237:FreeRTOS\src/tasks.c **** 
3238:FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3239:FreeRTOS\src/tasks.c **** 
3240:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3241:FreeRTOS\src/tasks.c **** 	{
3242:FreeRTOS\src/tasks.c **** 	UBaseType_t uxReturn;
3243:FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
3244:FreeRTOS\src/tasks.c **** 
3245:FreeRTOS\src/tasks.c **** 		if( xTask != NULL )
3246:FreeRTOS\src/tasks.c **** 		{
3247:FreeRTOS\src/tasks.c **** 			pxTCB = xTask;
3248:FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3249:FreeRTOS\src/tasks.c **** 		}
3250:FreeRTOS\src/tasks.c **** 		else
3251:FreeRTOS\src/tasks.c **** 		{
3252:FreeRTOS\src/tasks.c **** 			uxReturn = 0U;
3253:FreeRTOS\src/tasks.c **** 		}
3254:FreeRTOS\src/tasks.c **** 
3255:FreeRTOS\src/tasks.c **** 		return uxReturn;
3256:FreeRTOS\src/tasks.c **** 	}
3257:FreeRTOS\src/tasks.c **** 
3258:FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3259:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3260:FreeRTOS\src/tasks.c **** 
3261:FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3262:FreeRTOS\src/tasks.c **** 
3263:FreeRTOS\src/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3264:FreeRTOS\src/tasks.c **** 	{
3265:FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
3266:FreeRTOS\src/tasks.c **** 
3267:FreeRTOS\src/tasks.c **** 		if( xTask != NULL )
3268:FreeRTOS\src/tasks.c **** 		{
3269:FreeRTOS\src/tasks.c **** 			pxTCB = xTask;
3270:FreeRTOS\src/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3271:FreeRTOS\src/tasks.c **** 		}
3272:FreeRTOS\src/tasks.c **** 	}
3273:FreeRTOS\src/tasks.c **** 
3274:FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3275:FreeRTOS\src/tasks.c **** 
3276:FreeRTOS\src/tasks.c **** /*
3277:FreeRTOS\src/tasks.c ****  * -----------------------------------------------------------
3278:FreeRTOS\src/tasks.c ****  * The Idle task.
3279:FreeRTOS\src/tasks.c ****  * ----------------------------------------------------------
3280:FreeRTOS\src/tasks.c ****  *
3281:FreeRTOS\src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3282:FreeRTOS\src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 60


3283:FreeRTOS\src/tasks.c ****  *
3284:FreeRTOS\src/tasks.c ****  * void prvIdleTask( void *pvParameters );
3285:FreeRTOS\src/tasks.c ****  *
3286:FreeRTOS\src/tasks.c ****  */
3287:FreeRTOS\src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3288:FreeRTOS\src/tasks.c **** {
3289:FreeRTOS\src/tasks.c **** 	/* Stop warnings. */
3290:FreeRTOS\src/tasks.c **** 	( void ) pvParameters;
3291:FreeRTOS\src/tasks.c **** 
3292:FreeRTOS\src/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3293:FreeRTOS\src/tasks.c **** 	SCHEDULER IS STARTED. **/
3294:FreeRTOS\src/tasks.c **** 
3295:FreeRTOS\src/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3296:FreeRTOS\src/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3297:FreeRTOS\src/tasks.c **** 	any. */
3298:FreeRTOS\src/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3299:FreeRTOS\src/tasks.c **** 
3300:FreeRTOS\src/tasks.c **** 	for( ;; )
3301:FreeRTOS\src/tasks.c **** 	{
3302:FreeRTOS\src/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3303:FreeRTOS\src/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3304:FreeRTOS\src/tasks.c **** 		prvCheckTasksWaitingTermination();
3305:FreeRTOS\src/tasks.c **** 
3306:FreeRTOS\src/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3307:FreeRTOS\src/tasks.c **** 		{
3308:FreeRTOS\src/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3309:FreeRTOS\src/tasks.c **** 			see if any other task has become available.  If we are using
3310:FreeRTOS\src/tasks.c **** 			preemption we don't need to do this as any task becoming available
3311:FreeRTOS\src/tasks.c **** 			will automatically get the processor anyway. */
3312:FreeRTOS\src/tasks.c **** 			taskYIELD();
3313:FreeRTOS\src/tasks.c **** 		}
3314:FreeRTOS\src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3315:FreeRTOS\src/tasks.c **** 
3316:FreeRTOS\src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3317:FreeRTOS\src/tasks.c **** 		{
3318:FreeRTOS\src/tasks.c **** 			/* When using preemption tasks of equal priority will be
3319:FreeRTOS\src/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3320:FreeRTOS\src/tasks.c **** 			to run then the idle task should yield before the end of the
3321:FreeRTOS\src/tasks.c **** 			timeslice.
3322:FreeRTOS\src/tasks.c **** 
3323:FreeRTOS\src/tasks.c **** 			A critical region is not required here as we are just reading from
3324:FreeRTOS\src/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3325:FreeRTOS\src/tasks.c **** 			the ready list at the idle priority contains more than one task
3326:FreeRTOS\src/tasks.c **** 			then a task other than the idle task is ready to execute. */
3327:FreeRTOS\src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3328:FreeRTOS\src/tasks.c **** 			{
3329:FreeRTOS\src/tasks.c **** 				taskYIELD();
3330:FreeRTOS\src/tasks.c **** 			}
3331:FreeRTOS\src/tasks.c **** 			else
3332:FreeRTOS\src/tasks.c **** 			{
3333:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:FreeRTOS\src/tasks.c **** 			}
3335:FreeRTOS\src/tasks.c **** 		}
3336:FreeRTOS\src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3337:FreeRTOS\src/tasks.c **** 
3338:FreeRTOS\src/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3339:FreeRTOS\src/tasks.c **** 		{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 61


3340:FreeRTOS\src/tasks.c **** 			extern void vApplicationIdleHook( void );
3341:FreeRTOS\src/tasks.c **** 
3342:FreeRTOS\src/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3343:FreeRTOS\src/tasks.c **** 			allows the application designer to add background functionality
3344:FreeRTOS\src/tasks.c **** 			without the overhead of a separate task.
3345:FreeRTOS\src/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3346:FreeRTOS\src/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3347:FreeRTOS\src/tasks.c **** 			vApplicationIdleHook();
3348:FreeRTOS\src/tasks.c **** 		}
3349:FreeRTOS\src/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3350:FreeRTOS\src/tasks.c **** 
3351:FreeRTOS\src/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3352:FreeRTOS\src/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3353:FreeRTOS\src/tasks.c **** 		user defined low power mode	implementations require
3354:FreeRTOS\src/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3355:FreeRTOS\src/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3356:FreeRTOS\src/tasks.c **** 		{
3357:FreeRTOS\src/tasks.c **** 		TickType_t xExpectedIdleTime;
3358:FreeRTOS\src/tasks.c **** 
3359:FreeRTOS\src/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3360:FreeRTOS\src/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3361:FreeRTOS\src/tasks.c **** 			test of the expected idle time is performed without the
3362:FreeRTOS\src/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3363:FreeRTOS\src/tasks.c **** 			valid. */
3364:FreeRTOS\src/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3365:FreeRTOS\src/tasks.c **** 
3366:FreeRTOS\src/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3367:FreeRTOS\src/tasks.c **** 			{
3368:FreeRTOS\src/tasks.c **** 				vTaskSuspendAll();
3369:FreeRTOS\src/tasks.c **** 				{
3370:FreeRTOS\src/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3371:FreeRTOS\src/tasks.c **** 					time can be sampled again, and this time its value can
3372:FreeRTOS\src/tasks.c **** 					be used. */
3373:FreeRTOS\src/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3374:FreeRTOS\src/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3375:FreeRTOS\src/tasks.c **** 
3376:FreeRTOS\src/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3377:FreeRTOS\src/tasks.c **** 					if the application does not want
3378:FreeRTOS\src/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3379:FreeRTOS\src/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3380:FreeRTOS\src/tasks.c **** 
3381:FreeRTOS\src/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3382:FreeRTOS\src/tasks.c **** 					{
3383:FreeRTOS\src/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3384:FreeRTOS\src/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3385:FreeRTOS\src/tasks.c **** 						traceLOW_POWER_IDLE_END();
3386:FreeRTOS\src/tasks.c **** 					}
3387:FreeRTOS\src/tasks.c **** 					else
3388:FreeRTOS\src/tasks.c **** 					{
3389:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3390:FreeRTOS\src/tasks.c **** 					}
3391:FreeRTOS\src/tasks.c **** 				}
3392:FreeRTOS\src/tasks.c **** 				( void ) xTaskResumeAll();
3393:FreeRTOS\src/tasks.c **** 			}
3394:FreeRTOS\src/tasks.c **** 			else
3395:FreeRTOS\src/tasks.c **** 			{
3396:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 62


3397:FreeRTOS\src/tasks.c **** 			}
3398:FreeRTOS\src/tasks.c **** 		}
3399:FreeRTOS\src/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3400:FreeRTOS\src/tasks.c **** 	}
3401:FreeRTOS\src/tasks.c **** }
3402:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3403:FreeRTOS\src/tasks.c **** 
3404:FreeRTOS\src/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3405:FreeRTOS\src/tasks.c **** 
3406:FreeRTOS\src/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3407:FreeRTOS\src/tasks.c **** 	{
3408:FreeRTOS\src/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3409:FreeRTOS\src/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3410:FreeRTOS\src/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3411:FreeRTOS\src/tasks.c **** 
3412:FreeRTOS\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3413:FreeRTOS\src/tasks.c **** 		{
3414:FreeRTOS\src/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3415:FreeRTOS\src/tasks.c **** 			eReturn = eAbortSleep;
3416:FreeRTOS\src/tasks.c **** 		}
3417:FreeRTOS\src/tasks.c **** 		else if( xYieldPending != pdFALSE )
3418:FreeRTOS\src/tasks.c **** 		{
3419:FreeRTOS\src/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3420:FreeRTOS\src/tasks.c **** 			eReturn = eAbortSleep;
3421:FreeRTOS\src/tasks.c **** 		}
3422:FreeRTOS\src/tasks.c **** 		else
3423:FreeRTOS\src/tasks.c **** 		{
3424:FreeRTOS\src/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3425:FreeRTOS\src/tasks.c **** 			have an infinite block time rather than actually being suspended)
3426:FreeRTOS\src/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3427:FreeRTOS\src/tasks.c **** 			interrupts. */
3428:FreeRTOS\src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3429:FreeRTOS\src/tasks.c **** 			{
3430:FreeRTOS\src/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3431:FreeRTOS\src/tasks.c **** 			}
3432:FreeRTOS\src/tasks.c **** 			else
3433:FreeRTOS\src/tasks.c **** 			{
3434:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3435:FreeRTOS\src/tasks.c **** 			}
3436:FreeRTOS\src/tasks.c **** 		}
3437:FreeRTOS\src/tasks.c **** 
3438:FreeRTOS\src/tasks.c **** 		return eReturn;
3439:FreeRTOS\src/tasks.c **** 	}
3440:FreeRTOS\src/tasks.c **** 
3441:FreeRTOS\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3442:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3443:FreeRTOS\src/tasks.c **** 
3444:FreeRTOS\src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3445:FreeRTOS\src/tasks.c **** 
3446:FreeRTOS\src/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3447:FreeRTOS\src/tasks.c **** 	{
3448:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3449:FreeRTOS\src/tasks.c **** 
3450:FreeRTOS\src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3451:FreeRTOS\src/tasks.c **** 		{
3452:FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3453:FreeRTOS\src/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 63


3454:FreeRTOS\src/tasks.c **** 		}
3455:FreeRTOS\src/tasks.c **** 	}
3456:FreeRTOS\src/tasks.c **** 
3457:FreeRTOS\src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3458:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3459:FreeRTOS\src/tasks.c **** 
3460:FreeRTOS\src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3461:FreeRTOS\src/tasks.c **** 
3462:FreeRTOS\src/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3463:FreeRTOS\src/tasks.c **** 	{
3464:FreeRTOS\src/tasks.c **** 	void *pvReturn = NULL;
3465:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3466:FreeRTOS\src/tasks.c **** 
3467:FreeRTOS\src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3468:FreeRTOS\src/tasks.c **** 		{
3469:FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3470:FreeRTOS\src/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3471:FreeRTOS\src/tasks.c **** 		}
3472:FreeRTOS\src/tasks.c **** 		else
3473:FreeRTOS\src/tasks.c **** 		{
3474:FreeRTOS\src/tasks.c **** 			pvReturn = NULL;
3475:FreeRTOS\src/tasks.c **** 		}
3476:FreeRTOS\src/tasks.c **** 
3477:FreeRTOS\src/tasks.c **** 		return pvReturn;
3478:FreeRTOS\src/tasks.c **** 	}
3479:FreeRTOS\src/tasks.c **** 
3480:FreeRTOS\src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3481:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3482:FreeRTOS\src/tasks.c **** 
3483:FreeRTOS\src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3484:FreeRTOS\src/tasks.c **** 
3485:FreeRTOS\src/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3486:FreeRTOS\src/tasks.c **** 	{
3487:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3488:FreeRTOS\src/tasks.c **** 
3489:FreeRTOS\src/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3490:FreeRTOS\src/tasks.c **** 		the calling task. */
3491:FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3492:FreeRTOS\src/tasks.c **** 
3493:FreeRTOS\src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3494:FreeRTOS\src/tasks.c **** 	}
3495:FreeRTOS\src/tasks.c **** 
3496:FreeRTOS\src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3497:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3498:FreeRTOS\src/tasks.c **** 
3499:FreeRTOS\src/tasks.c **** static void prvInitialiseTaskLists( void )
3500:FreeRTOS\src/tasks.c **** {
3501:FreeRTOS\src/tasks.c **** UBaseType_t uxPriority;
3502:FreeRTOS\src/tasks.c **** 
3503:FreeRTOS\src/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3504:FreeRTOS\src/tasks.c **** 	{
3505:FreeRTOS\src/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3506:FreeRTOS\src/tasks.c **** 	}
3507:FreeRTOS\src/tasks.c **** 
3508:FreeRTOS\src/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3509:FreeRTOS\src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3510:FreeRTOS\src/tasks.c **** 	vListInitialise( &xPendingReadyList );
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 64


3511:FreeRTOS\src/tasks.c **** 
3512:FreeRTOS\src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3513:FreeRTOS\src/tasks.c **** 	{
3514:FreeRTOS\src/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3515:FreeRTOS\src/tasks.c **** 	}
3516:FreeRTOS\src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3517:FreeRTOS\src/tasks.c **** 
3518:FreeRTOS\src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3519:FreeRTOS\src/tasks.c **** 	{
3520:FreeRTOS\src/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3521:FreeRTOS\src/tasks.c **** 	}
3522:FreeRTOS\src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3523:FreeRTOS\src/tasks.c **** 
3524:FreeRTOS\src/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3525:FreeRTOS\src/tasks.c **** 	using list2. */
3526:FreeRTOS\src/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3527:FreeRTOS\src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3528:FreeRTOS\src/tasks.c **** }
3529:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3530:FreeRTOS\src/tasks.c **** 
3531:FreeRTOS\src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3532:FreeRTOS\src/tasks.c **** {
3533:FreeRTOS\src/tasks.c **** 
3534:FreeRTOS\src/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3535:FreeRTOS\src/tasks.c **** 
3536:FreeRTOS\src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3537:FreeRTOS\src/tasks.c **** 	{
3538:FreeRTOS\src/tasks.c **** 		TCB_t *pxTCB;
3539:FreeRTOS\src/tasks.c **** 
3540:FreeRTOS\src/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3541:FreeRTOS\src/tasks.c **** 		being called too often in the idle task. */
3542:FreeRTOS\src/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3543:FreeRTOS\src/tasks.c **** 		{
3544:FreeRTOS\src/tasks.c **** 			taskENTER_CRITICAL();
3545:FreeRTOS\src/tasks.c **** 			{
3546:FreeRTOS\src/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3547:FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3548:FreeRTOS\src/tasks.c **** 				--uxCurrentNumberOfTasks;
3549:FreeRTOS\src/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3550:FreeRTOS\src/tasks.c **** 			}
3551:FreeRTOS\src/tasks.c **** 			taskEXIT_CRITICAL();
3552:FreeRTOS\src/tasks.c **** 
3553:FreeRTOS\src/tasks.c **** 			prvDeleteTCB( pxTCB );
3554:FreeRTOS\src/tasks.c **** 		}
3555:FreeRTOS\src/tasks.c **** 	}
3556:FreeRTOS\src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3557:FreeRTOS\src/tasks.c **** }
3558:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3559:FreeRTOS\src/tasks.c **** 
3560:FreeRTOS\src/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3561:FreeRTOS\src/tasks.c **** 
3562:FreeRTOS\src/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3563:FreeRTOS\src/tasks.c **** 	{
3564:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3565:FreeRTOS\src/tasks.c **** 
3566:FreeRTOS\src/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3567:FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 65


3568:FreeRTOS\src/tasks.c **** 
3569:FreeRTOS\src/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3570:FreeRTOS\src/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3571:FreeRTOS\src/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3572:FreeRTOS\src/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3573:FreeRTOS\src/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3574:FreeRTOS\src/tasks.c **** 
3575:FreeRTOS\src/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3576:FreeRTOS\src/tasks.c **** 		{
3577:FreeRTOS\src/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3578:FreeRTOS\src/tasks.c **** 		}
3579:FreeRTOS\src/tasks.c **** 		#else
3580:FreeRTOS\src/tasks.c **** 		{
3581:FreeRTOS\src/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3582:FreeRTOS\src/tasks.c **** 		}
3583:FreeRTOS\src/tasks.c **** 		#endif
3584:FreeRTOS\src/tasks.c **** 
3585:FreeRTOS\src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3586:FreeRTOS\src/tasks.c **** 		{
3587:FreeRTOS\src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3588:FreeRTOS\src/tasks.c **** 		}
3589:FreeRTOS\src/tasks.c **** 		#else
3590:FreeRTOS\src/tasks.c **** 		{
3591:FreeRTOS\src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3592:FreeRTOS\src/tasks.c **** 		}
3593:FreeRTOS\src/tasks.c **** 		#endif
3594:FreeRTOS\src/tasks.c **** 
3595:FreeRTOS\src/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3596:FreeRTOS\src/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3597:FreeRTOS\src/tasks.c **** 		state is just set to whatever is passed in. */
3598:FreeRTOS\src/tasks.c **** 		if( eState != eInvalid )
3599:FreeRTOS\src/tasks.c **** 		{
3600:FreeRTOS\src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3601:FreeRTOS\src/tasks.c **** 			{
3602:FreeRTOS\src/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3603:FreeRTOS\src/tasks.c **** 			}
3604:FreeRTOS\src/tasks.c **** 			else
3605:FreeRTOS\src/tasks.c **** 			{
3606:FreeRTOS\src/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3607:FreeRTOS\src/tasks.c **** 
3608:FreeRTOS\src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3609:FreeRTOS\src/tasks.c **** 				{
3610:FreeRTOS\src/tasks.c **** 					/* If the task is in the suspended list then there is a
3611:FreeRTOS\src/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3612:FreeRTOS\src/tasks.c **** 					it should be reported as being in the Blocked state. */
3613:FreeRTOS\src/tasks.c **** 					if( eState == eSuspended )
3614:FreeRTOS\src/tasks.c **** 					{
3615:FreeRTOS\src/tasks.c **** 						vTaskSuspendAll();
3616:FreeRTOS\src/tasks.c **** 						{
3617:FreeRTOS\src/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3618:FreeRTOS\src/tasks.c **** 							{
3619:FreeRTOS\src/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3620:FreeRTOS\src/tasks.c **** 							}
3621:FreeRTOS\src/tasks.c **** 						}
3622:FreeRTOS\src/tasks.c **** 						( void ) xTaskResumeAll();
3623:FreeRTOS\src/tasks.c **** 					}
3624:FreeRTOS\src/tasks.c **** 				}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 66


3625:FreeRTOS\src/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3626:FreeRTOS\src/tasks.c **** 			}
3627:FreeRTOS\src/tasks.c **** 		}
3628:FreeRTOS\src/tasks.c **** 		else
3629:FreeRTOS\src/tasks.c **** 		{
3630:FreeRTOS\src/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3631:FreeRTOS\src/tasks.c **** 		}
3632:FreeRTOS\src/tasks.c **** 
3633:FreeRTOS\src/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3634:FreeRTOS\src/tasks.c **** 		parameter is provided to allow it to be skipped. */
3635:FreeRTOS\src/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3636:FreeRTOS\src/tasks.c **** 		{
3637:FreeRTOS\src/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3638:FreeRTOS\src/tasks.c **** 			{
3639:FreeRTOS\src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3640:FreeRTOS\src/tasks.c **** 			}
3641:FreeRTOS\src/tasks.c **** 			#else
3642:FreeRTOS\src/tasks.c **** 			{
3643:FreeRTOS\src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3644:FreeRTOS\src/tasks.c **** 			}
3645:FreeRTOS\src/tasks.c **** 			#endif
3646:FreeRTOS\src/tasks.c **** 		}
3647:FreeRTOS\src/tasks.c **** 		else
3648:FreeRTOS\src/tasks.c **** 		{
3649:FreeRTOS\src/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3650:FreeRTOS\src/tasks.c **** 		}
3651:FreeRTOS\src/tasks.c **** 	}
3652:FreeRTOS\src/tasks.c **** 
3653:FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3654:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3655:FreeRTOS\src/tasks.c **** 
3656:FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3657:FreeRTOS\src/tasks.c **** 
3658:FreeRTOS\src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3659:FreeRTOS\src/tasks.c **** 	{
3660:FreeRTOS\src/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3661:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTask = 0;
3662:FreeRTOS\src/tasks.c **** 
3663:FreeRTOS\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3664:FreeRTOS\src/tasks.c **** 		{
3665:FreeRTOS\src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3666:FreeRTOS\src/tasks.c **** 
3667:FreeRTOS\src/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3668:FreeRTOS\src/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3669:FreeRTOS\src/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3670:FreeRTOS\src/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3671:FreeRTOS\src/tasks.c **** 			do
3672:FreeRTOS\src/tasks.c **** 			{
3673:FreeRTOS\src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3674:FreeRTOS\src/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3675:FreeRTOS\src/tasks.c **** 				uxTask++;
3676:FreeRTOS\src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3677:FreeRTOS\src/tasks.c **** 		}
3678:FreeRTOS\src/tasks.c **** 		else
3679:FreeRTOS\src/tasks.c **** 		{
3680:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3681:FreeRTOS\src/tasks.c **** 		}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 67


3682:FreeRTOS\src/tasks.c **** 
3683:FreeRTOS\src/tasks.c **** 		return uxTask;
3684:FreeRTOS\src/tasks.c **** 	}
3685:FreeRTOS\src/tasks.c **** 
3686:FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3687:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3688:FreeRTOS\src/tasks.c **** 
3689:FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3690:FreeRTOS\src/tasks.c **** 
3691:FreeRTOS\src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3692:FreeRTOS\src/tasks.c **** 	{
  81              		.loc 1 3692 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL8:
3693:FreeRTOS\src/tasks.c **** 	uint32_t ulCount = 0U;
  87              		.loc 1 3693 0
  88 0000 0023     		movs	r3, #0
3694:FreeRTOS\src/tasks.c **** 
3695:FreeRTOS\src/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  89              		.loc 1 3695 0
  90 0002 01E0     		b	.L9
  91              	.LVL9:
  92              	.L10:
3696:FreeRTOS\src/tasks.c **** 		{
3697:FreeRTOS\src/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
  93              		.loc 1 3697 0
  94 0004 0130     		adds	r0, r0, #1
  95              	.LVL10:
3698:FreeRTOS\src/tasks.c **** 			ulCount++;
  96              		.loc 1 3698 0
  97 0006 0133     		adds	r3, r3, #1
  98              	.LVL11:
  99              	.L9:
3695:FreeRTOS\src/tasks.c **** 		{
 100              		.loc 1 3695 0
 101 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 102 000a A52A     		cmp	r2, #165
 103 000c FAD0     		beq	.L10
 104              	.LVL12:
3699:FreeRTOS\src/tasks.c **** 		}
3700:FreeRTOS\src/tasks.c **** 
3701:FreeRTOS\src/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3702:FreeRTOS\src/tasks.c **** 
3703:FreeRTOS\src/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3704:FreeRTOS\src/tasks.c **** 	}
 105              		.loc 1 3704 0
 106 000e C3F38F00 		ubfx	r0, r3, #2, #16
 107              	.LVL13:
 108 0012 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE41:
 111              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 112              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 113              		.align	2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 68


 114              		.thumb
 115              		.thumb_func
 116              		.type	prvResetNextTaskUnblockTime, %function
 117              	prvResetNextTaskUnblockTime:
 118              	.LFB44:
3705:FreeRTOS\src/tasks.c **** 
3706:FreeRTOS\src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3707:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3708:FreeRTOS\src/tasks.c **** 
3709:FreeRTOS\src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3710:FreeRTOS\src/tasks.c **** 
3711:FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3712:FreeRTOS\src/tasks.c **** 	{
3713:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3714:FreeRTOS\src/tasks.c **** 	uint8_t *pucEndOfStack;
3715:FreeRTOS\src/tasks.c **** 	UBaseType_t uxReturn;
3716:FreeRTOS\src/tasks.c **** 
3717:FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3718:FreeRTOS\src/tasks.c **** 
3719:FreeRTOS\src/tasks.c **** 		#if portSTACK_GROWTH < 0
3720:FreeRTOS\src/tasks.c **** 		{
3721:FreeRTOS\src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3722:FreeRTOS\src/tasks.c **** 		}
3723:FreeRTOS\src/tasks.c **** 		#else
3724:FreeRTOS\src/tasks.c **** 		{
3725:FreeRTOS\src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3726:FreeRTOS\src/tasks.c **** 		}
3727:FreeRTOS\src/tasks.c **** 		#endif
3728:FreeRTOS\src/tasks.c **** 
3729:FreeRTOS\src/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3730:FreeRTOS\src/tasks.c **** 
3731:FreeRTOS\src/tasks.c **** 		return uxReturn;
3732:FreeRTOS\src/tasks.c **** 	}
3733:FreeRTOS\src/tasks.c **** 
3734:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3735:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3736:FreeRTOS\src/tasks.c **** 
3737:FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3738:FreeRTOS\src/tasks.c **** 
3739:FreeRTOS\src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3740:FreeRTOS\src/tasks.c **** 	{
3741:FreeRTOS\src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3742:FreeRTOS\src/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3743:FreeRTOS\src/tasks.c **** 		want to allocate and clean RAM statically. */
3744:FreeRTOS\src/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3745:FreeRTOS\src/tasks.c **** 
3746:FreeRTOS\src/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3747:FreeRTOS\src/tasks.c **** 		to the task to free any memory allocated at the application level. */
3748:FreeRTOS\src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3749:FreeRTOS\src/tasks.c **** 		{
3750:FreeRTOS\src/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3751:FreeRTOS\src/tasks.c **** 		}
3752:FreeRTOS\src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3753:FreeRTOS\src/tasks.c **** 
3754:FreeRTOS\src/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3755:FreeRTOS\src/tasks.c **** 		{
3756:FreeRTOS\src/tasks.c **** 			/* The task can only have been allocated dynamically - free both
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 69


3757:FreeRTOS\src/tasks.c **** 			the stack and TCB. */
3758:FreeRTOS\src/tasks.c **** 			vPortFree( pxTCB->pxStack );
3759:FreeRTOS\src/tasks.c **** 			vPortFree( pxTCB );
3760:FreeRTOS\src/tasks.c **** 		}
3761:FreeRTOS\src/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3762:FreeRTOS\src/tasks.c **** 		{
3763:FreeRTOS\src/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3764:FreeRTOS\src/tasks.c **** 			check what was statically allocated before trying to free the
3765:FreeRTOS\src/tasks.c **** 			memory. */
3766:FreeRTOS\src/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3767:FreeRTOS\src/tasks.c **** 			{
3768:FreeRTOS\src/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3769:FreeRTOS\src/tasks.c **** 				must be freed. */
3770:FreeRTOS\src/tasks.c **** 				vPortFree( pxTCB->pxStack );
3771:FreeRTOS\src/tasks.c **** 				vPortFree( pxTCB );
3772:FreeRTOS\src/tasks.c **** 			}
3773:FreeRTOS\src/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3774:FreeRTOS\src/tasks.c **** 			{
3775:FreeRTOS\src/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3776:FreeRTOS\src/tasks.c **** 				only memory that must be freed. */
3777:FreeRTOS\src/tasks.c **** 				vPortFree( pxTCB );
3778:FreeRTOS\src/tasks.c **** 			}
3779:FreeRTOS\src/tasks.c **** 			else
3780:FreeRTOS\src/tasks.c **** 			{
3781:FreeRTOS\src/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3782:FreeRTOS\src/tasks.c **** 				nothing needs to be freed. */
3783:FreeRTOS\src/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3784:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3785:FreeRTOS\src/tasks.c **** 			}
3786:FreeRTOS\src/tasks.c **** 		}
3787:FreeRTOS\src/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3788:FreeRTOS\src/tasks.c **** 	}
3789:FreeRTOS\src/tasks.c **** 
3790:FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3791:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3792:FreeRTOS\src/tasks.c **** 
3793:FreeRTOS\src/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3794:FreeRTOS\src/tasks.c **** {
 119              		.loc 1 3794 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
3795:FreeRTOS\src/tasks.c **** TCB_t *pxTCB;
3796:FreeRTOS\src/tasks.c **** 
3797:FreeRTOS\src/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 124              		.loc 1 3797 0
 125 0000 074B     		ldr	r3, .L14
 126 0002 9B6A     		ldr	r3, [r3, #40]
 127 0004 1B68     		ldr	r3, [r3]
 128 0006 23B9     		cbnz	r3, .L12
3798:FreeRTOS\src/tasks.c **** 	{
3799:FreeRTOS\src/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3800:FreeRTOS\src/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3801:FreeRTOS\src/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3802:FreeRTOS\src/tasks.c **** 		there is an item in the delayed list. */
3803:FreeRTOS\src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 70


 129              		.loc 1 3803 0
 130 0008 4FF0FF32 		mov	r2, #-1
 131 000c 044B     		ldr	r3, .L14
 132 000e DA62     		str	r2, [r3, #44]
 133 0010 7047     		bx	lr
 134              	.L12:
3804:FreeRTOS\src/tasks.c **** 	}
3805:FreeRTOS\src/tasks.c **** 	else
3806:FreeRTOS\src/tasks.c **** 	{
3807:FreeRTOS\src/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3808:FreeRTOS\src/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3809:FreeRTOS\src/tasks.c **** 		which the task at the head of the delayed list should be removed
3810:FreeRTOS\src/tasks.c **** 		from the Blocked state. */
3811:FreeRTOS\src/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 135              		.loc 1 3811 0
 136 0012 034B     		ldr	r3, .L14
 137 0014 9A6A     		ldr	r2, [r3, #40]
 138 0016 D268     		ldr	r2, [r2, #12]
 139 0018 D268     		ldr	r2, [r2, #12]
 140              	.LVL14:
3812:FreeRTOS\src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 141              		.loc 1 3812 0
 142 001a 5268     		ldr	r2, [r2, #4]
 143              	.LVL15:
 144 001c DA62     		str	r2, [r3, #44]
 145 001e 7047     		bx	lr
 146              	.L15:
 147              		.align	2
 148              	.L14:
 149 0020 00000000 		.word	.LANCHOR0
 150              		.cfi_endproc
 151              	.LFE44:
 152              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 153              		.section	.text.prvDeleteTCB,"ax",%progbits
 154              		.align	2
 155              		.thumb
 156              		.thumb_func
 157              		.type	prvDeleteTCB, %function
 158              	prvDeleteTCB:
 159              	.LFB43:
3740:FreeRTOS\src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 160              		.loc 1 3740 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              	.LVL16:
 165 0000 10B5     		push	{r4, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 169 0002 0446     		mov	r4, r0
3758:FreeRTOS\src/tasks.c **** 			vPortFree( pxTCB );
 170              		.loc 1 3758 0
 171 0004 006B     		ldr	r0, [r0, #48]
 172              	.LVL17:
 173 0006 FFF7FEFF 		bl	vPortFree
 174              	.LVL18:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 71


3759:FreeRTOS\src/tasks.c **** 		}
 175              		.loc 1 3759 0
 176 000a 2046     		mov	r0, r4
 177 000c FFF7FEFF 		bl	vPortFree
 178              	.LVL19:
 179 0010 10BD     		pop	{r4, pc}
 180              		.cfi_endproc
 181              	.LFE43:
 182              		.size	prvDeleteTCB, .-prvDeleteTCB
 183 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 184              		.align	2
 185              		.thumb
 186              		.thumb_func
 187              		.type	prvInitialiseNewTask, %function
 188              	prvInitialiseNewTask:
 189              	.LFB6:
 846:FreeRTOS\src/tasks.c **** StackType_t *pxTopOfStack;
 190              		.loc 1 846 0
 191              		.cfi_startproc
 192              		@ args = 16, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL20:
 195 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 196              		.cfi_def_cfa_offset 32
 197              		.cfi_offset 4, -32
 198              		.cfi_offset 5, -28
 199              		.cfi_offset 6, -24
 200              		.cfi_offset 7, -20
 201              		.cfi_offset 8, -16
 202              		.cfi_offset 9, -12
 203              		.cfi_offset 10, -8
 204              		.cfi_offset 14, -4
 205 0004 8146     		mov	r9, r0
 206 0006 0D46     		mov	r5, r1
 207 0008 1746     		mov	r7, r2
 208 000a 9A46     		mov	r10, r3
 209 000c 089E     		ldr	r6, [sp, #32]
 210 000e DDF82480 		ldr	r8, [sp, #36]
 211 0012 0A9C     		ldr	r4, [sp, #40]
 870:FreeRTOS\src/tasks.c **** 	}
 212              		.loc 1 870 0
 213 0014 9200     		lsls	r2, r2, #2
 214              	.LVL21:
 215 0016 A521     		movs	r1, #165
 216              	.LVL22:
 217 0018 206B     		ldr	r0, [r4, #48]
 218              	.LVL23:
 219 001a FFF7FEFF 		bl	memset
 220              	.LVL24:
 880:FreeRTOS\src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 221              		.loc 1 880 0
 222 001e 236B     		ldr	r3, [r4, #48]
 223 0020 07F18042 		add	r2, r7, #1073741824
 224 0024 013A     		subs	r2, r2, #1
 225 0026 03EB8207 		add	r7, r3, r2, lsl #2
 226              	.LVL25:
 881:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 72


 227              		.loc 1 881 0
 228 002a 27F00707 		bic	r7, r7, #7
 229              	.LVL26:
 908:FreeRTOS\src/tasks.c **** 	{
 230              		.loc 1 908 0
 231 002e 0023     		movs	r3, #0
 232 0030 06E0     		b	.L19
 233              	.LVL27:
 234              	.L21:
 910:FreeRTOS\src/tasks.c **** 
 235              		.loc 1 910 0
 236 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 237 0034 E218     		adds	r2, r4, r3
 238 0036 82F83410 		strb	r1, [r2, #52]
 915:FreeRTOS\src/tasks.c **** 		{
 239              		.loc 1 915 0
 240 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 241 003c 12B1     		cbz	r2, .L20
 908:FreeRTOS\src/tasks.c **** 	{
 242              		.loc 1 908 0 discriminator 2
 243 003e 0133     		adds	r3, r3, #1
 244              	.LVL28:
 245              	.L19:
 908:FreeRTOS\src/tasks.c **** 	{
 246              		.loc 1 908 0 is_stmt 0 discriminator 1
 247 0040 0B2B     		cmp	r3, #11
 248 0042 F6D9     		bls	.L21
 249              	.L20:
 927:FreeRTOS\src/tasks.c **** 
 250              		.loc 1 927 0 is_stmt 1
 251 0044 0023     		movs	r3, #0
 252              	.LVL29:
 253 0046 84F83F30 		strb	r3, [r4, #63]
 931:FreeRTOS\src/tasks.c **** 	{
 254              		.loc 1 931 0
 255 004a 1F2E     		cmp	r6, #31
 256 004c 00D9     		bls	.L22
 933:FreeRTOS\src/tasks.c **** 	}
 257              		.loc 1 933 0
 258 004e 1F26     		movs	r6, #31
 259              	.L22:
 260              	.LVL30:
 940:FreeRTOS\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 261              		.loc 1 940 0
 262 0050 E662     		str	r6, [r4, #44]
 943:FreeRTOS\src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 263              		.loc 1 943 0
 264 0052 2664     		str	r6, [r4, #64]
 944:FreeRTOS\src/tasks.c **** 	}
 265              		.loc 1 944 0
 266 0054 0025     		movs	r5, #0
 267              	.LVL31:
 268 0056 6564     		str	r5, [r4, #68]
 948:FreeRTOS\src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 269              		.loc 1 948 0
 270 0058 201D     		adds	r0, r4, #4
 271 005a FFF7FEFF 		bl	vListInitialiseItem
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 73


 272              	.LVL32:
 949:FreeRTOS\src/tasks.c **** 
 273              		.loc 1 949 0
 274 005e 04F11800 		add	r0, r4, #24
 275 0062 FFF7FEFF 		bl	vListInitialiseItem
 276              	.LVL33:
 953:FreeRTOS\src/tasks.c **** 
 277              		.loc 1 953 0
 278 0066 2461     		str	r4, [r4, #16]
 956:FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 279              		.loc 1 956 0
 280 0068 C6F12006 		rsb	r6, r6, #32
 281              	.LVL34:
 282 006c A661     		str	r6, [r4, #24]
 957:FreeRTOS\src/tasks.c **** 
 283              		.loc 1 957 0
 284 006e 6462     		str	r4, [r4, #36]
 999:FreeRTOS\src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 285              		.loc 1 999 0
 286 0070 A564     		str	r5, [r4, #72]
1000:FreeRTOS\src/tasks.c **** 	}
 287              		.loc 1 1000 0
 288 0072 84F84C50 		strb	r5, [r4, #76]
1027:FreeRTOS\src/tasks.c **** 	}
 289              		.loc 1 1027 0
 290 0076 5246     		mov	r2, r10
 291 0078 4946     		mov	r1, r9
 292 007a 3846     		mov	r0, r7
 293 007c FFF7FEFF 		bl	pxPortInitialiseStack
 294              	.LVL35:
 295 0080 2060     		str	r0, [r4]
1031:FreeRTOS\src/tasks.c **** 	{
 296              		.loc 1 1031 0
 297 0082 B8F1000F 		cmp	r8, #0
 298 0086 01D0     		beq	.L18
1035:FreeRTOS\src/tasks.c **** 	}
 299              		.loc 1 1035 0
 300 0088 C8F80040 		str	r4, [r8]
 301              	.L18:
 302 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 303              		.cfi_endproc
 304              	.LFE6:
 305              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 306              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 307              		.align	2
 308              		.thumb
 309              		.thumb_func
 310              		.type	prvInitialiseTaskLists, %function
 311              	prvInitialiseTaskLists:
 312              	.LFB39:
3500:FreeRTOS\src/tasks.c **** UBaseType_t uxPriority;
 313              		.loc 1 3500 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317 0000 70B5     		push	{r4, r5, r6, lr}
 318              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 74


 319              		.cfi_offset 4, -16
 320              		.cfi_offset 5, -12
 321              		.cfi_offset 6, -8
 322              		.cfi_offset 14, -4
 323              	.LVL36:
3503:FreeRTOS\src/tasks.c **** 	{
 324              		.loc 1 3503 0
 325 0002 0024     		movs	r4, #0
 326 0004 07E0     		b	.L27
 327              	.LVL37:
 328              	.L28:
3505:FreeRTOS\src/tasks.c **** 	}
 329              		.loc 1 3505 0 discriminator 3
 330 0006 04EB8402 		add	r2, r4, r4, lsl #2
 331 000a 9300     		lsls	r3, r2, #2
 332 000c 1048     		ldr	r0, .L30
 333 000e 1844     		add	r0, r0, r3
 334 0010 FFF7FEFF 		bl	vListInitialise
 335              	.LVL38:
3503:FreeRTOS\src/tasks.c **** 	{
 336              		.loc 1 3503 0 discriminator 3
 337 0014 0134     		adds	r4, r4, #1
 338              	.LVL39:
 339              	.L27:
3503:FreeRTOS\src/tasks.c **** 	{
 340              		.loc 1 3503 0 is_stmt 0 discriminator 1
 341 0016 1F2C     		cmp	r4, #31
 342 0018 F5D9     		bls	.L28
3508:FreeRTOS\src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 343              		.loc 1 3508 0 is_stmt 1
 344 001a 0E4C     		ldr	r4, .L30+4
 345              	.LVL40:
 346 001c 04F52C76 		add	r6, r4, #688
 347 0020 3046     		mov	r0, r6
 348 0022 FFF7FEFF 		bl	vListInitialise
 349              	.LVL41:
3509:FreeRTOS\src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 350              		.loc 1 3509 0
 351 0026 04F53175 		add	r5, r4, #708
 352 002a 2846     		mov	r0, r5
 353 002c FFF7FEFF 		bl	vListInitialise
 354              	.LVL42:
3510:FreeRTOS\src/tasks.c **** 
 355              		.loc 1 3510 0
 356 0030 04F11400 		add	r0, r4, #20
 357 0034 FFF7FEFF 		bl	vListInitialise
 358              	.LVL43:
3514:FreeRTOS\src/tasks.c **** 	}
 359              		.loc 1 3514 0
 360 0038 04F53670 		add	r0, r4, #728
 361 003c FFF7FEFF 		bl	vListInitialise
 362              	.LVL44:
3520:FreeRTOS\src/tasks.c **** 	}
 363              		.loc 1 3520 0
 364 0040 2046     		mov	r0, r4
 365 0042 FFF7FEFF 		bl	vListInitialise
 366              	.LVL45:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 75


3526:FreeRTOS\src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 367              		.loc 1 3526 0
 368 0046 A662     		str	r6, [r4, #40]
3527:FreeRTOS\src/tasks.c **** }
 369              		.loc 1 3527 0
 370 0048 C4F8EC52 		str	r5, [r4, #748]
 371 004c 70BD     		pop	{r4, r5, r6, pc}
 372              	.L31:
 373 004e 00BF     		.align	2
 374              	.L30:
 375 0050 30000000 		.word	.LANCHOR0+48
 376 0054 00000000 		.word	.LANCHOR0
 377              		.cfi_endproc
 378              	.LFE39:
 379              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 380              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 381              		.align	2
 382              		.thumb
 383              		.thumb_func
 384              		.type	prvAddNewTaskToReadyList, %function
 385              	prvAddNewTaskToReadyList:
 386              	.LFB7:
1045:FreeRTOS\src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 387              		.loc 1 1045 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              	.LVL46:
 392 0000 38B5     		push	{r3, r4, r5, lr}
 393              		.cfi_def_cfa_offset 16
 394              		.cfi_offset 3, -16
 395              		.cfi_offset 4, -12
 396              		.cfi_offset 5, -8
 397              		.cfi_offset 14, -4
 398 0002 0546     		mov	r5, r0
1048:FreeRTOS\src/tasks.c **** 	{
 399              		.loc 1 1048 0
 400 0004 FFF7FEFF 		bl	vPortEnterCritical
 401              	.LVL47:
1050:FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB == NULL )
 402              		.loc 1 1050 0
 403 0008 264B     		ldr	r3, .L37
 404 000a D3F8F022 		ldr	r2, [r3, #752]
 405 000e 0132     		adds	r2, r2, #1
 406 0010 C3F8F022 		str	r2, [r3, #752]
1051:FreeRTOS\src/tasks.c **** 		{
 407              		.loc 1 1051 0
 408 0014 D3F8F432 		ldr	r3, [r3, #756]
 409 0018 4BB9     		cbnz	r3, .L33
1055:FreeRTOS\src/tasks.c **** 
 410              		.loc 1 1055 0
 411 001a 224B     		ldr	r3, .L37
 412 001c C3F8F452 		str	r5, [r3, #756]
1057:FreeRTOS\src/tasks.c **** 			{
 413              		.loc 1 1057 0
 414 0020 D3F8F032 		ldr	r3, [r3, #752]
 415 0024 012B     		cmp	r3, #1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 76


 416 0026 10D1     		bne	.L34
1062:FreeRTOS\src/tasks.c **** 			}
 417              		.loc 1 1062 0
 418 0028 FFF7FEFF 		bl	prvInitialiseTaskLists
 419              	.LVL48:
 420 002c 0DE0     		b	.L34
 421              	.L33:
1074:FreeRTOS\src/tasks.c **** 			{
 422              		.loc 1 1074 0
 423 002e 1D4B     		ldr	r3, .L37
 424 0030 D3F8F832 		ldr	r3, [r3, #760]
 425 0034 4BB9     		cbnz	r3, .L34
1076:FreeRTOS\src/tasks.c **** 				{
 426              		.loc 1 1076 0
 427 0036 1B4B     		ldr	r3, .L37
 428 0038 D3F8F432 		ldr	r3, [r3, #756]
 429 003c DA6A     		ldr	r2, [r3, #44]
 430 003e EB6A     		ldr	r3, [r5, #44]
 431 0040 9A42     		cmp	r2, r3
 432 0042 02D8     		bhi	.L34
1078:FreeRTOS\src/tasks.c **** 				}
 433              		.loc 1 1078 0
 434 0044 174B     		ldr	r3, .L37
 435 0046 C3F8F452 		str	r5, [r3, #756]
 436              	.L34:
1091:FreeRTOS\src/tasks.c **** 
 437              		.loc 1 1091 0
 438 004a 164C     		ldr	r4, .L37
 439 004c D4F8FC32 		ldr	r3, [r4, #764]
 440 0050 0133     		adds	r3, r3, #1
 441 0052 C4F8FC32 		str	r3, [r4, #764]
1101:FreeRTOS\src/tasks.c **** 
 442              		.loc 1 1101 0
 443 0056 EB6A     		ldr	r3, [r5, #44]
 444 0058 0122     		movs	r2, #1
 445 005a 02FA03F1 		lsl	r1, r2, r3
 446 005e D4F80023 		ldr	r2, [r4, #768]
 447 0062 0A43     		orrs	r2, r2, r1
 448 0064 C4F80023 		str	r2, [r4, #768]
 449 0068 04F13000 		add	r0, r4, #48
 450 006c 03EB8303 		add	r3, r3, r3, lsl #2
 451 0070 9A00     		lsls	r2, r3, #2
 452 0072 291D     		adds	r1, r5, #4
 453 0074 1044     		add	r0, r0, r2
 454 0076 FFF7FEFF 		bl	vListInsertEnd
 455              	.LVL49:
1105:FreeRTOS\src/tasks.c **** 
 456              		.loc 1 1105 0
 457 007a FFF7FEFF 		bl	vPortExitCritical
 458              	.LVL50:
1107:FreeRTOS\src/tasks.c **** 	{
 459              		.loc 1 1107 0
 460 007e D4F8F832 		ldr	r3, [r4, #760]
 461 0082 6BB1     		cbz	r3, .L32
1111:FreeRTOS\src/tasks.c **** 		{
 462              		.loc 1 1111 0
 463 0084 D4F8F432 		ldr	r3, [r4, #756]
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 77


 464 0088 DA6A     		ldr	r2, [r3, #44]
 465 008a EB6A     		ldr	r3, [r5, #44]
 466 008c 9A42     		cmp	r2, r3
 467 008e 07D2     		bcs	.L32
1113:FreeRTOS\src/tasks.c **** 		}
 468              		.loc 1 1113 0
 469 0090 4FF08052 		mov	r2, #268435456
 470 0094 044B     		ldr	r3, .L37+4
 471 0096 1A60     		str	r2, [r3]
 472              		.syntax unified
 473              	@ 1113 "FreeRTOS\src\tasks.c" 1
 474 0098 BFF34F8F 		dsb
 475              	@ 0 "" 2
 476              	@ 1113 "FreeRTOS\src\tasks.c" 1
 477 009c BFF36F8F 		isb
 478              	@ 0 "" 2
 479              		.thumb
 480              		.syntax unified
 481              	.L32:
 482 00a0 38BD     		pop	{r3, r4, r5, pc}
 483              	.LVL51:
 484              	.L38:
 485 00a2 00BF     		.align	2
 486              	.L37:
 487 00a4 00000000 		.word	.LANCHOR0
 488 00a8 04ED00E0 		.word	-536810236
 489              		.cfi_endproc
 490              	.LFE7:
 491              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 492              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 493              		.align	2
 494              		.thumb
 495              		.thumb_func
 496              		.type	prvCheckTasksWaitingTermination, %function
 497              	prvCheckTasksWaitingTermination:
 498              	.LFB40:
3532:FreeRTOS\src/tasks.c **** 
 499              		.loc 1 3532 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503 0000 38B5     		push	{r3, r4, r5, lr}
 504              		.cfi_def_cfa_offset 16
 505              		.cfi_offset 3, -16
 506              		.cfi_offset 4, -12
 507              		.cfi_offset 5, -8
 508              		.cfi_offset 14, -4
 509              	.LBB26:
3542:FreeRTOS\src/tasks.c **** 		{
 510              		.loc 1 3542 0
 511 0002 17E0     		b	.L40
 512              	.L41:
3544:FreeRTOS\src/tasks.c **** 			{
 513              		.loc 1 3544 0
 514 0004 FFF7FEFF 		bl	vPortEnterCritical
 515              	.LVL52:
3546:FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 78


 516              		.loc 1 3546 0
 517 0008 0D4C     		ldr	r4, .L43
 518 000a D4F8E432 		ldr	r3, [r4, #740]
 519 000e DD68     		ldr	r5, [r3, #12]
 520              	.LVL53:
3547:FreeRTOS\src/tasks.c **** 				--uxCurrentNumberOfTasks;
 521              		.loc 1 3547 0
 522 0010 281D     		adds	r0, r5, #4
 523 0012 FFF7FEFF 		bl	uxListRemove
 524              	.LVL54:
3548:FreeRTOS\src/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 525              		.loc 1 3548 0
 526 0016 D4F8F032 		ldr	r3, [r4, #752]
 527 001a 013B     		subs	r3, r3, #1
 528 001c C4F8F032 		str	r3, [r4, #752]
3549:FreeRTOS\src/tasks.c **** 			}
 529              		.loc 1 3549 0
 530 0020 D4F80433 		ldr	r3, [r4, #772]
 531 0024 013B     		subs	r3, r3, #1
 532 0026 C4F80433 		str	r3, [r4, #772]
3551:FreeRTOS\src/tasks.c **** 
 533              		.loc 1 3551 0
 534 002a FFF7FEFF 		bl	vPortExitCritical
 535              	.LVL55:
3553:FreeRTOS\src/tasks.c **** 		}
 536              		.loc 1 3553 0
 537 002e 2846     		mov	r0, r5
 538 0030 FFF7FEFF 		bl	prvDeleteTCB
 539              	.LVL56:
 540              	.L40:
3542:FreeRTOS\src/tasks.c **** 		{
 541              		.loc 1 3542 0
 542 0034 024B     		ldr	r3, .L43
 543 0036 D3F80433 		ldr	r3, [r3, #772]
 544 003a 002B     		cmp	r3, #0
 545 003c E2D1     		bne	.L41
 546              	.LBE26:
3557:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 547              		.loc 1 3557 0
 548 003e 38BD     		pop	{r3, r4, r5, pc}
 549              	.L44:
 550              		.align	2
 551              	.L43:
 552 0040 00000000 		.word	.LANCHOR0
 553              		.cfi_endproc
 554              	.LFE40:
 555              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 556              		.section	.text.prvIdleTask,"ax",%progbits
 557              		.align	2
 558              		.thumb
 559              		.thumb_func
 560              		.type	prvIdleTask, %function
 561              	prvIdleTask:
 562              	.LFB38:
3288:FreeRTOS\src/tasks.c **** 	/* Stop warnings. */
 563              		.loc 1 3288 0
 564              		.cfi_startproc
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 79


 565              		@ Volatile: function does not return.
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              	.LVL57:
 569 0000 08B5     		push	{r3, lr}
 570              		.cfi_def_cfa_offset 8
 571              		.cfi_offset 3, -8
 572              		.cfi_offset 14, -4
 573              	.LVL58:
 574              	.L46:
3304:FreeRTOS\src/tasks.c **** 
 575              		.loc 1 3304 0 discriminator 1
 576 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 577              	.LVL59:
 578 0006 FCE7     		b	.L46
 579              		.cfi_endproc
 580              	.LFE38:
 581              		.size	prvIdleTask, .-prvIdleTask
 582              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 583              		.align	2
 584              		.thumb
 585              		.thumb_func
 586              		.type	prvAddCurrentTaskToDelayedList, %function
 587              	prvAddCurrentTaskToDelayedList:
 588              	.LFB58:
3813:FreeRTOS\src/tasks.c **** 	}
3814:FreeRTOS\src/tasks.c **** }
3815:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3816:FreeRTOS\src/tasks.c **** 
3817:FreeRTOS\src/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3818:FreeRTOS\src/tasks.c **** 
3819:FreeRTOS\src/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3820:FreeRTOS\src/tasks.c **** 	{
3821:FreeRTOS\src/tasks.c **** 	TaskHandle_t xReturn;
3822:FreeRTOS\src/tasks.c **** 
3823:FreeRTOS\src/tasks.c **** 		/* A critical section is not required as this is not called from
3824:FreeRTOS\src/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3825:FreeRTOS\src/tasks.c **** 		individual execution thread. */
3826:FreeRTOS\src/tasks.c **** 		xReturn = pxCurrentTCB;
3827:FreeRTOS\src/tasks.c **** 
3828:FreeRTOS\src/tasks.c **** 		return xReturn;
3829:FreeRTOS\src/tasks.c **** 	}
3830:FreeRTOS\src/tasks.c **** 
3831:FreeRTOS\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3832:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3833:FreeRTOS\src/tasks.c **** 
3834:FreeRTOS\src/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3835:FreeRTOS\src/tasks.c **** 
3836:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3837:FreeRTOS\src/tasks.c **** 	{
3838:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
3839:FreeRTOS\src/tasks.c **** 
3840:FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3841:FreeRTOS\src/tasks.c **** 		{
3842:FreeRTOS\src/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3843:FreeRTOS\src/tasks.c **** 		}
3844:FreeRTOS\src/tasks.c **** 		else
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 80


3845:FreeRTOS\src/tasks.c **** 		{
3846:FreeRTOS\src/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3847:FreeRTOS\src/tasks.c **** 			{
3848:FreeRTOS\src/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3849:FreeRTOS\src/tasks.c **** 			}
3850:FreeRTOS\src/tasks.c **** 			else
3851:FreeRTOS\src/tasks.c **** 			{
3852:FreeRTOS\src/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3853:FreeRTOS\src/tasks.c **** 			}
3854:FreeRTOS\src/tasks.c **** 		}
3855:FreeRTOS\src/tasks.c **** 
3856:FreeRTOS\src/tasks.c **** 		return xReturn;
3857:FreeRTOS\src/tasks.c **** 	}
3858:FreeRTOS\src/tasks.c **** 
3859:FreeRTOS\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3860:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3861:FreeRTOS\src/tasks.c **** 
3862:FreeRTOS\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3863:FreeRTOS\src/tasks.c **** 
3864:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3865:FreeRTOS\src/tasks.c **** 	{
3866:FreeRTOS\src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3867:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3868:FreeRTOS\src/tasks.c **** 
3869:FreeRTOS\src/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3870:FreeRTOS\src/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3871:FreeRTOS\src/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3872:FreeRTOS\src/tasks.c **** 		if( pxMutexHolder != NULL )
3873:FreeRTOS\src/tasks.c **** 		{
3874:FreeRTOS\src/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3875:FreeRTOS\src/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3876:FreeRTOS\src/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3877:FreeRTOS\src/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3878:FreeRTOS\src/tasks.c **** 			{
3879:FreeRTOS\src/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3880:FreeRTOS\src/tasks.c **** 				priority.  Only reset the event list item value if the value is
3881:FreeRTOS\src/tasks.c **** 				not being used for anything else. */
3882:FreeRTOS\src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3883:FreeRTOS\src/tasks.c **** 				{
3884:FreeRTOS\src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3885:FreeRTOS\src/tasks.c **** 				}
3886:FreeRTOS\src/tasks.c **** 				else
3887:FreeRTOS\src/tasks.c **** 				{
3888:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3889:FreeRTOS\src/tasks.c **** 				}
3890:FreeRTOS\src/tasks.c **** 
3891:FreeRTOS\src/tasks.c **** 				/* If the task being modified is in the ready state it will need
3892:FreeRTOS\src/tasks.c **** 				to be moved into a new list. */
3893:FreeRTOS\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3894:FreeRTOS\src/tasks.c **** 				{
3895:FreeRTOS\src/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3896:FreeRTOS\src/tasks.c **** 					{
3897:FreeRTOS\src/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3898:FreeRTOS\src/tasks.c **** 					}
3899:FreeRTOS\src/tasks.c **** 					else
3900:FreeRTOS\src/tasks.c **** 					{
3901:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 81


3902:FreeRTOS\src/tasks.c **** 					}
3903:FreeRTOS\src/tasks.c **** 
3904:FreeRTOS\src/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3905:FreeRTOS\src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3906:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3907:FreeRTOS\src/tasks.c **** 				}
3908:FreeRTOS\src/tasks.c **** 				else
3909:FreeRTOS\src/tasks.c **** 				{
3910:FreeRTOS\src/tasks.c **** 					/* Just inherit the priority. */
3911:FreeRTOS\src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3912:FreeRTOS\src/tasks.c **** 				}
3913:FreeRTOS\src/tasks.c **** 
3914:FreeRTOS\src/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3915:FreeRTOS\src/tasks.c **** 
3916:FreeRTOS\src/tasks.c **** 				/* Inheritance occurred. */
3917:FreeRTOS\src/tasks.c **** 				xReturn = pdTRUE;
3918:FreeRTOS\src/tasks.c **** 			}
3919:FreeRTOS\src/tasks.c **** 			else
3920:FreeRTOS\src/tasks.c **** 			{
3921:FreeRTOS\src/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3922:FreeRTOS\src/tasks.c **** 				{
3923:FreeRTOS\src/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3924:FreeRTOS\src/tasks.c **** 					priority of the task attempting to take the mutex, but the
3925:FreeRTOS\src/tasks.c **** 					current priority of the mutex holder is not lower than the
3926:FreeRTOS\src/tasks.c **** 					priority of the task attempting to take the mutex.
3927:FreeRTOS\src/tasks.c **** 					Therefore the mutex holder must have already inherited a
3928:FreeRTOS\src/tasks.c **** 					priority, but inheritance would have occurred if that had
3929:FreeRTOS\src/tasks.c **** 					not been the case. */
3930:FreeRTOS\src/tasks.c **** 					xReturn = pdTRUE;
3931:FreeRTOS\src/tasks.c **** 				}
3932:FreeRTOS\src/tasks.c **** 				else
3933:FreeRTOS\src/tasks.c **** 				{
3934:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3935:FreeRTOS\src/tasks.c **** 				}
3936:FreeRTOS\src/tasks.c **** 			}
3937:FreeRTOS\src/tasks.c **** 		}
3938:FreeRTOS\src/tasks.c **** 		else
3939:FreeRTOS\src/tasks.c **** 		{
3940:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3941:FreeRTOS\src/tasks.c **** 		}
3942:FreeRTOS\src/tasks.c **** 
3943:FreeRTOS\src/tasks.c **** 		return xReturn;
3944:FreeRTOS\src/tasks.c **** 	}
3945:FreeRTOS\src/tasks.c **** 
3946:FreeRTOS\src/tasks.c **** #endif /* configUSE_MUTEXES */
3947:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3948:FreeRTOS\src/tasks.c **** 
3949:FreeRTOS\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:FreeRTOS\src/tasks.c **** 
3951:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3952:FreeRTOS\src/tasks.c **** 	{
3953:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
3954:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:FreeRTOS\src/tasks.c **** 
3956:FreeRTOS\src/tasks.c **** 		if( pxMutexHolder != NULL )
3957:FreeRTOS\src/tasks.c **** 		{
3958:FreeRTOS\src/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 82


3959:FreeRTOS\src/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3960:FreeRTOS\src/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3961:FreeRTOS\src/tasks.c **** 			be the running state task. */
3962:FreeRTOS\src/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3963:FreeRTOS\src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3964:FreeRTOS\src/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3965:FreeRTOS\src/tasks.c **** 
3966:FreeRTOS\src/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3967:FreeRTOS\src/tasks.c **** 			task? */
3968:FreeRTOS\src/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3969:FreeRTOS\src/tasks.c **** 			{
3970:FreeRTOS\src/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3971:FreeRTOS\src/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3972:FreeRTOS\src/tasks.c **** 				{
3973:FreeRTOS\src/tasks.c **** 					/* A task can only have an inherited priority if it holds
3974:FreeRTOS\src/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3975:FreeRTOS\src/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3976:FreeRTOS\src/tasks.c **** 					holding task then it must be the running state task.  Remove
3977:FreeRTOS\src/tasks.c **** 					the holding task from the ready list. */
3978:FreeRTOS\src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3979:FreeRTOS\src/tasks.c **** 					{
3980:FreeRTOS\src/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3981:FreeRTOS\src/tasks.c **** 					}
3982:FreeRTOS\src/tasks.c **** 					else
3983:FreeRTOS\src/tasks.c **** 					{
3984:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3985:FreeRTOS\src/tasks.c **** 					}
3986:FreeRTOS\src/tasks.c **** 
3987:FreeRTOS\src/tasks.c **** 					/* Disinherit the priority before adding the task into the
3988:FreeRTOS\src/tasks.c **** 					new	ready list. */
3989:FreeRTOS\src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3990:FreeRTOS\src/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3991:FreeRTOS\src/tasks.c **** 
3992:FreeRTOS\src/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3993:FreeRTOS\src/tasks.c **** 					any other purpose if this task is running, and it must be
3994:FreeRTOS\src/tasks.c **** 					running to give back the mutex. */
3995:FreeRTOS\src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3996:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3997:FreeRTOS\src/tasks.c **** 
3998:FreeRTOS\src/tasks.c **** 					/* Return true to indicate that a context switch is required.
3999:FreeRTOS\src/tasks.c **** 					This is only actually required in the corner case whereby
4000:FreeRTOS\src/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4001:FreeRTOS\src/tasks.c **** 					in an order different to that in which they were taken.
4002:FreeRTOS\src/tasks.c **** 					If a context switch did not occur when the first mutex was
4003:FreeRTOS\src/tasks.c **** 					returned, even if a task was waiting on it, then a context
4004:FreeRTOS\src/tasks.c **** 					switch should occur when the last mutex is returned whether
4005:FreeRTOS\src/tasks.c **** 					a task is waiting on it or not. */
4006:FreeRTOS\src/tasks.c **** 					xReturn = pdTRUE;
4007:FreeRTOS\src/tasks.c **** 				}
4008:FreeRTOS\src/tasks.c **** 				else
4009:FreeRTOS\src/tasks.c **** 				{
4010:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4011:FreeRTOS\src/tasks.c **** 				}
4012:FreeRTOS\src/tasks.c **** 			}
4013:FreeRTOS\src/tasks.c **** 			else
4014:FreeRTOS\src/tasks.c **** 			{
4015:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 83


4016:FreeRTOS\src/tasks.c **** 			}
4017:FreeRTOS\src/tasks.c **** 		}
4018:FreeRTOS\src/tasks.c **** 		else
4019:FreeRTOS\src/tasks.c **** 		{
4020:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4021:FreeRTOS\src/tasks.c **** 		}
4022:FreeRTOS\src/tasks.c **** 
4023:FreeRTOS\src/tasks.c **** 		return xReturn;
4024:FreeRTOS\src/tasks.c **** 	}
4025:FreeRTOS\src/tasks.c **** 
4026:FreeRTOS\src/tasks.c **** #endif /* configUSE_MUTEXES */
4027:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4028:FreeRTOS\src/tasks.c **** 
4029:FreeRTOS\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4030:FreeRTOS\src/tasks.c **** 
4031:FreeRTOS\src/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4032:FreeRTOS\src/tasks.c **** 	{
4033:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4034:FreeRTOS\src/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4035:FreeRTOS\src/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4036:FreeRTOS\src/tasks.c **** 
4037:FreeRTOS\src/tasks.c **** 		if( pxMutexHolder != NULL )
4038:FreeRTOS\src/tasks.c **** 		{
4039:FreeRTOS\src/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4040:FreeRTOS\src/tasks.c **** 			one mutex. */
4041:FreeRTOS\src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4042:FreeRTOS\src/tasks.c **** 
4043:FreeRTOS\src/tasks.c **** 			/* Determine the priority to which the priority of the task that
4044:FreeRTOS\src/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4045:FreeRTOS\src/tasks.c **** 			holding task's base priority and the priority of the highest
4046:FreeRTOS\src/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4047:FreeRTOS\src/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4048:FreeRTOS\src/tasks.c **** 			{
4049:FreeRTOS\src/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4050:FreeRTOS\src/tasks.c **** 			}
4051:FreeRTOS\src/tasks.c **** 			else
4052:FreeRTOS\src/tasks.c **** 			{
4053:FreeRTOS\src/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4054:FreeRTOS\src/tasks.c **** 			}
4055:FreeRTOS\src/tasks.c **** 
4056:FreeRTOS\src/tasks.c **** 			/* Does the priority need to change? */
4057:FreeRTOS\src/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4058:FreeRTOS\src/tasks.c **** 			{
4059:FreeRTOS\src/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4060:FreeRTOS\src/tasks.c **** 				simplification in the priority inheritance implementation.  If
4061:FreeRTOS\src/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4062:FreeRTOS\src/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4063:FreeRTOS\src/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4064:FreeRTOS\src/tasks.c **** 				{
4065:FreeRTOS\src/tasks.c **** 					/* If a task has timed out because it already holds the
4066:FreeRTOS\src/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4067:FreeRTOS\src/tasks.c **** 					its own priority. */
4068:FreeRTOS\src/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4069:FreeRTOS\src/tasks.c **** 
4070:FreeRTOS\src/tasks.c **** 					/* Disinherit the priority, remembering the previous
4071:FreeRTOS\src/tasks.c **** 					priority to facilitate determining the subject task's
4072:FreeRTOS\src/tasks.c **** 					state. */
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 84


4073:FreeRTOS\src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4074:FreeRTOS\src/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4075:FreeRTOS\src/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4076:FreeRTOS\src/tasks.c **** 
4077:FreeRTOS\src/tasks.c **** 					/* Only reset the event list item value if the value is not
4078:FreeRTOS\src/tasks.c **** 					being used for anything else. */
4079:FreeRTOS\src/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4080:FreeRTOS\src/tasks.c **** 					{
4081:FreeRTOS\src/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4082:FreeRTOS\src/tasks.c **** 					}
4083:FreeRTOS\src/tasks.c **** 					else
4084:FreeRTOS\src/tasks.c **** 					{
4085:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4086:FreeRTOS\src/tasks.c **** 					}
4087:FreeRTOS\src/tasks.c **** 
4088:FreeRTOS\src/tasks.c **** 					/* If the running task is not the task that holds the mutex
4089:FreeRTOS\src/tasks.c **** 					then the task that holds the mutex could be in either the
4090:FreeRTOS\src/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4091:FreeRTOS\src/tasks.c **** 					from its current state list if it is in the Ready state as
4092:FreeRTOS\src/tasks.c **** 					the task's priority is going to change and there is one
4093:FreeRTOS\src/tasks.c **** 					Ready list per priority. */
4094:FreeRTOS\src/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4095:FreeRTOS\src/tasks.c **** 					{
4096:FreeRTOS\src/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4097:FreeRTOS\src/tasks.c **** 						{
4098:FreeRTOS\src/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4099:FreeRTOS\src/tasks.c **** 						}
4100:FreeRTOS\src/tasks.c **** 						else
4101:FreeRTOS\src/tasks.c **** 						{
4102:FreeRTOS\src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4103:FreeRTOS\src/tasks.c **** 						}
4104:FreeRTOS\src/tasks.c **** 
4105:FreeRTOS\src/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4106:FreeRTOS\src/tasks.c **** 					}
4107:FreeRTOS\src/tasks.c **** 					else
4108:FreeRTOS\src/tasks.c **** 					{
4109:FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4110:FreeRTOS\src/tasks.c **** 					}
4111:FreeRTOS\src/tasks.c **** 				}
4112:FreeRTOS\src/tasks.c **** 				else
4113:FreeRTOS\src/tasks.c **** 				{
4114:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:FreeRTOS\src/tasks.c **** 				}
4116:FreeRTOS\src/tasks.c **** 			}
4117:FreeRTOS\src/tasks.c **** 			else
4118:FreeRTOS\src/tasks.c **** 			{
4119:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:FreeRTOS\src/tasks.c **** 			}
4121:FreeRTOS\src/tasks.c **** 		}
4122:FreeRTOS\src/tasks.c **** 		else
4123:FreeRTOS\src/tasks.c **** 		{
4124:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:FreeRTOS\src/tasks.c **** 		}
4126:FreeRTOS\src/tasks.c **** 	}
4127:FreeRTOS\src/tasks.c **** 
4128:FreeRTOS\src/tasks.c **** #endif /* configUSE_MUTEXES */
4129:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 85


4130:FreeRTOS\src/tasks.c **** 
4131:FreeRTOS\src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4132:FreeRTOS\src/tasks.c **** 
4133:FreeRTOS\src/tasks.c **** 	void vTaskEnterCritical( void )
4134:FreeRTOS\src/tasks.c **** 	{
4135:FreeRTOS\src/tasks.c **** 		portDISABLE_INTERRUPTS();
4136:FreeRTOS\src/tasks.c **** 
4137:FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4138:FreeRTOS\src/tasks.c **** 		{
4139:FreeRTOS\src/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4140:FreeRTOS\src/tasks.c **** 
4141:FreeRTOS\src/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4142:FreeRTOS\src/tasks.c **** 			function so	assert() if it is being called from an interrupt
4143:FreeRTOS\src/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4144:FreeRTOS\src/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4145:FreeRTOS\src/tasks.c **** 			protect against recursive calls if the assert function also uses a
4146:FreeRTOS\src/tasks.c **** 			critical section. */
4147:FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4148:FreeRTOS\src/tasks.c **** 			{
4149:FreeRTOS\src/tasks.c **** 				portASSERT_IF_IN_ISR();
4150:FreeRTOS\src/tasks.c **** 			}
4151:FreeRTOS\src/tasks.c **** 		}
4152:FreeRTOS\src/tasks.c **** 		else
4153:FreeRTOS\src/tasks.c **** 		{
4154:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4155:FreeRTOS\src/tasks.c **** 		}
4156:FreeRTOS\src/tasks.c **** 	}
4157:FreeRTOS\src/tasks.c **** 
4158:FreeRTOS\src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4159:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4160:FreeRTOS\src/tasks.c **** 
4161:FreeRTOS\src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4162:FreeRTOS\src/tasks.c **** 
4163:FreeRTOS\src/tasks.c **** 	void vTaskExitCritical( void )
4164:FreeRTOS\src/tasks.c **** 	{
4165:FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4166:FreeRTOS\src/tasks.c **** 		{
4167:FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4168:FreeRTOS\src/tasks.c **** 			{
4169:FreeRTOS\src/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4170:FreeRTOS\src/tasks.c **** 
4171:FreeRTOS\src/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4172:FreeRTOS\src/tasks.c **** 				{
4173:FreeRTOS\src/tasks.c **** 					portENABLE_INTERRUPTS();
4174:FreeRTOS\src/tasks.c **** 				}
4175:FreeRTOS\src/tasks.c **** 				else
4176:FreeRTOS\src/tasks.c **** 				{
4177:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4178:FreeRTOS\src/tasks.c **** 				}
4179:FreeRTOS\src/tasks.c **** 			}
4180:FreeRTOS\src/tasks.c **** 			else
4181:FreeRTOS\src/tasks.c **** 			{
4182:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4183:FreeRTOS\src/tasks.c **** 			}
4184:FreeRTOS\src/tasks.c **** 		}
4185:FreeRTOS\src/tasks.c **** 		else
4186:FreeRTOS\src/tasks.c **** 		{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 86


4187:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4188:FreeRTOS\src/tasks.c **** 		}
4189:FreeRTOS\src/tasks.c **** 	}
4190:FreeRTOS\src/tasks.c **** 
4191:FreeRTOS\src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4192:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4193:FreeRTOS\src/tasks.c **** 
4194:FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4195:FreeRTOS\src/tasks.c **** 
4196:FreeRTOS\src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4197:FreeRTOS\src/tasks.c **** 	{
4198:FreeRTOS\src/tasks.c **** 	size_t x;
4199:FreeRTOS\src/tasks.c **** 
4200:FreeRTOS\src/tasks.c **** 		/* Start by copying the entire string. */
4201:FreeRTOS\src/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4202:FreeRTOS\src/tasks.c **** 
4203:FreeRTOS\src/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4204:FreeRTOS\src/tasks.c **** 		printed out. */
4205:FreeRTOS\src/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4206:FreeRTOS\src/tasks.c **** 		{
4207:FreeRTOS\src/tasks.c **** 			pcBuffer[ x ] = ' ';
4208:FreeRTOS\src/tasks.c **** 		}
4209:FreeRTOS\src/tasks.c **** 
4210:FreeRTOS\src/tasks.c **** 		/* Terminate. */
4211:FreeRTOS\src/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4212:FreeRTOS\src/tasks.c **** 
4213:FreeRTOS\src/tasks.c **** 		/* Return the new end of string. */
4214:FreeRTOS\src/tasks.c **** 		return &( pcBuffer[ x ] );
4215:FreeRTOS\src/tasks.c **** 	}
4216:FreeRTOS\src/tasks.c **** 
4217:FreeRTOS\src/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4218:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4219:FreeRTOS\src/tasks.c **** 
4220:FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4221:FreeRTOS\src/tasks.c **** 
4222:FreeRTOS\src/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4223:FreeRTOS\src/tasks.c **** 	{
4224:FreeRTOS\src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4225:FreeRTOS\src/tasks.c **** 	UBaseType_t uxArraySize, x;
4226:FreeRTOS\src/tasks.c **** 	char cStatus;
4227:FreeRTOS\src/tasks.c **** 
4228:FreeRTOS\src/tasks.c **** 		/*
4229:FreeRTOS\src/tasks.c **** 		 * PLEASE NOTE:
4230:FreeRTOS\src/tasks.c **** 		 *
4231:FreeRTOS\src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4232:FreeRTOS\src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4233:FreeRTOS\src/tasks.c **** 		 * scheduler.
4234:FreeRTOS\src/tasks.c **** 		 *
4235:FreeRTOS\src/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4236:FreeRTOS\src/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4237:FreeRTOS\src/tasks.c **** 		 * displays task names, states and stack usage.
4238:FreeRTOS\src/tasks.c **** 		 *
4239:FreeRTOS\src/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4240:FreeRTOS\src/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4241:FreeRTOS\src/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4242:FreeRTOS\src/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4243:FreeRTOS\src/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 87


4244:FreeRTOS\src/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4245:FreeRTOS\src/tasks.c **** 		 * snprintf() implementation!).
4246:FreeRTOS\src/tasks.c **** 		 *
4247:FreeRTOS\src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4248:FreeRTOS\src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4249:FreeRTOS\src/tasks.c **** 		 * through a call to vTaskList().
4250:FreeRTOS\src/tasks.c **** 		 */
4251:FreeRTOS\src/tasks.c **** 
4252:FreeRTOS\src/tasks.c **** 
4253:FreeRTOS\src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4254:FreeRTOS\src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4255:FreeRTOS\src/tasks.c **** 
4256:FreeRTOS\src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4257:FreeRTOS\src/tasks.c **** 		function is executing. */
4258:FreeRTOS\src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4259:FreeRTOS\src/tasks.c **** 
4260:FreeRTOS\src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4261:FreeRTOS\src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4262:FreeRTOS\src/tasks.c **** 		equate to NULL. */
4263:FreeRTOS\src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4264:FreeRTOS\src/tasks.c **** 
4265:FreeRTOS\src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4266:FreeRTOS\src/tasks.c **** 		{
4267:FreeRTOS\src/tasks.c **** 			/* Generate the (binary) data. */
4268:FreeRTOS\src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4269:FreeRTOS\src/tasks.c **** 
4270:FreeRTOS\src/tasks.c **** 			/* Create a human readable table from the binary data. */
4271:FreeRTOS\src/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4272:FreeRTOS\src/tasks.c **** 			{
4273:FreeRTOS\src/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4274:FreeRTOS\src/tasks.c **** 				{
4275:FreeRTOS\src/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4276:FreeRTOS\src/tasks.c **** 										break;
4277:FreeRTOS\src/tasks.c **** 
4278:FreeRTOS\src/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4279:FreeRTOS\src/tasks.c **** 										break;
4280:FreeRTOS\src/tasks.c **** 
4281:FreeRTOS\src/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4282:FreeRTOS\src/tasks.c **** 										break;
4283:FreeRTOS\src/tasks.c **** 
4284:FreeRTOS\src/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4285:FreeRTOS\src/tasks.c **** 										break;
4286:FreeRTOS\src/tasks.c **** 
4287:FreeRTOS\src/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4288:FreeRTOS\src/tasks.c **** 										break;
4289:FreeRTOS\src/tasks.c **** 
4290:FreeRTOS\src/tasks.c **** 					case eInvalid:		/* Fall through. */
4291:FreeRTOS\src/tasks.c **** 					default:			/* Should not get here, but it is included
4292:FreeRTOS\src/tasks.c **** 										to prevent static checking errors. */
4293:FreeRTOS\src/tasks.c **** 										cStatus = ( char ) 0x00;
4294:FreeRTOS\src/tasks.c **** 										break;
4295:FreeRTOS\src/tasks.c **** 				}
4296:FreeRTOS\src/tasks.c **** 
4297:FreeRTOS\src/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4298:FreeRTOS\src/tasks.c **** 				can be printed in tabular form more easily. */
4299:FreeRTOS\src/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4300:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 88


4301:FreeRTOS\src/tasks.c **** 				/* Write the rest of the string. */
4302:FreeRTOS\src/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4303:FreeRTOS\src/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4304:FreeRTOS\src/tasks.c **** 			}
4305:FreeRTOS\src/tasks.c **** 
4306:FreeRTOS\src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4307:FreeRTOS\src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4308:FreeRTOS\src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4309:FreeRTOS\src/tasks.c **** 		}
4310:FreeRTOS\src/tasks.c **** 		else
4311:FreeRTOS\src/tasks.c **** 		{
4312:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4313:FreeRTOS\src/tasks.c **** 		}
4314:FreeRTOS\src/tasks.c **** 	}
4315:FreeRTOS\src/tasks.c **** 
4316:FreeRTOS\src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4317:FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
4318:FreeRTOS\src/tasks.c **** 
4319:FreeRTOS\src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4320:FreeRTOS\src/tasks.c **** 
4321:FreeRTOS\src/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4322:FreeRTOS\src/tasks.c **** 	{
4323:FreeRTOS\src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4324:FreeRTOS\src/tasks.c **** 	UBaseType_t uxArraySize, x;
4325:FreeRTOS\src/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4326:FreeRTOS\src/tasks.c **** 
4327:FreeRTOS\src/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4328:FreeRTOS\src/tasks.c **** 		{
4329:FreeRTOS\src/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4330:FreeRTOS\src/tasks.c **** 		}
4331:FreeRTOS\src/tasks.c **** 		#endif
4332:FreeRTOS\src/tasks.c **** 
4333:FreeRTOS\src/tasks.c **** 		/*
4334:FreeRTOS\src/tasks.c **** 		 * PLEASE NOTE:
4335:FreeRTOS\src/tasks.c **** 		 *
4336:FreeRTOS\src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4337:FreeRTOS\src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4338:FreeRTOS\src/tasks.c **** 		 * scheduler.
4339:FreeRTOS\src/tasks.c **** 		 *
4340:FreeRTOS\src/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4341:FreeRTOS\src/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4342:FreeRTOS\src/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4343:FreeRTOS\src/tasks.c **** 		 * in both absolute and percentage terms.
4344:FreeRTOS\src/tasks.c **** 		 *
4345:FreeRTOS\src/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4346:FreeRTOS\src/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4347:FreeRTOS\src/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4348:FreeRTOS\src/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4349:FreeRTOS\src/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4350:FreeRTOS\src/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4351:FreeRTOS\src/tasks.c **** 		 * a full snprintf() implementation!).
4352:FreeRTOS\src/tasks.c **** 		 *
4353:FreeRTOS\src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4354:FreeRTOS\src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4355:FreeRTOS\src/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4356:FreeRTOS\src/tasks.c **** 		 */
4357:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 89


4358:FreeRTOS\src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4359:FreeRTOS\src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4360:FreeRTOS\src/tasks.c **** 
4361:FreeRTOS\src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4362:FreeRTOS\src/tasks.c **** 		function is executing. */
4363:FreeRTOS\src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4364:FreeRTOS\src/tasks.c **** 
4365:FreeRTOS\src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4366:FreeRTOS\src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4367:FreeRTOS\src/tasks.c **** 		equate to NULL. */
4368:FreeRTOS\src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4369:FreeRTOS\src/tasks.c **** 
4370:FreeRTOS\src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4371:FreeRTOS\src/tasks.c **** 		{
4372:FreeRTOS\src/tasks.c **** 			/* Generate the (binary) data. */
4373:FreeRTOS\src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4374:FreeRTOS\src/tasks.c **** 
4375:FreeRTOS\src/tasks.c **** 			/* For percentage calculations. */
4376:FreeRTOS\src/tasks.c **** 			ulTotalTime /= 100UL;
4377:FreeRTOS\src/tasks.c **** 
4378:FreeRTOS\src/tasks.c **** 			/* Avoid divide by zero errors. */
4379:FreeRTOS\src/tasks.c **** 			if( ulTotalTime > 0UL )
4380:FreeRTOS\src/tasks.c **** 			{
4381:FreeRTOS\src/tasks.c **** 				/* Create a human readable table from the binary data. */
4382:FreeRTOS\src/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4383:FreeRTOS\src/tasks.c **** 				{
4384:FreeRTOS\src/tasks.c **** 					/* What percentage of the total run time has the task used?
4385:FreeRTOS\src/tasks.c **** 					This will always be rounded down to the nearest integer.
4386:FreeRTOS\src/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4387:FreeRTOS\src/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4388:FreeRTOS\src/tasks.c **** 
4389:FreeRTOS\src/tasks.c **** 					/* Write the task name to the string, padding with
4390:FreeRTOS\src/tasks.c **** 					spaces so it can be printed in tabular form more
4391:FreeRTOS\src/tasks.c **** 					easily. */
4392:FreeRTOS\src/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4393:FreeRTOS\src/tasks.c **** 
4394:FreeRTOS\src/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4395:FreeRTOS\src/tasks.c **** 					{
4396:FreeRTOS\src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4397:FreeRTOS\src/tasks.c **** 						{
4398:FreeRTOS\src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4399:FreeRTOS\src/tasks.c **** 						}
4400:FreeRTOS\src/tasks.c **** 						#else
4401:FreeRTOS\src/tasks.c **** 						{
4402:FreeRTOS\src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4403:FreeRTOS\src/tasks.c **** 							printf() library can be used. */
4404:FreeRTOS\src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4405:FreeRTOS\src/tasks.c **** 						}
4406:FreeRTOS\src/tasks.c **** 						#endif
4407:FreeRTOS\src/tasks.c **** 					}
4408:FreeRTOS\src/tasks.c **** 					else
4409:FreeRTOS\src/tasks.c **** 					{
4410:FreeRTOS\src/tasks.c **** 						/* If the percentage is zero here then the task has
4411:FreeRTOS\src/tasks.c **** 						consumed less than 1% of the total run time. */
4412:FreeRTOS\src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4413:FreeRTOS\src/tasks.c **** 						{
4414:FreeRTOS\src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 90


4415:FreeRTOS\src/tasks.c **** 						}
4416:FreeRTOS\src/tasks.c **** 						#else
4417:FreeRTOS\src/tasks.c **** 						{
4418:FreeRTOS\src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4419:FreeRTOS\src/tasks.c **** 							printf() library can be used. */
4420:FreeRTOS\src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4421:FreeRTOS\src/tasks.c **** 						}
4422:FreeRTOS\src/tasks.c **** 						#endif
4423:FreeRTOS\src/tasks.c **** 					}
4424:FreeRTOS\src/tasks.c **** 
4425:FreeRTOS\src/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4426:FreeRTOS\src/tasks.c **** 				}
4427:FreeRTOS\src/tasks.c **** 			}
4428:FreeRTOS\src/tasks.c **** 			else
4429:FreeRTOS\src/tasks.c **** 			{
4430:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4431:FreeRTOS\src/tasks.c **** 			}
4432:FreeRTOS\src/tasks.c **** 
4433:FreeRTOS\src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4434:FreeRTOS\src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4435:FreeRTOS\src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4436:FreeRTOS\src/tasks.c **** 		}
4437:FreeRTOS\src/tasks.c **** 		else
4438:FreeRTOS\src/tasks.c **** 		{
4439:FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4440:FreeRTOS\src/tasks.c **** 		}
4441:FreeRTOS\src/tasks.c **** 	}
4442:FreeRTOS\src/tasks.c **** 
4443:FreeRTOS\src/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4444:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4445:FreeRTOS\src/tasks.c **** 
4446:FreeRTOS\src/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4447:FreeRTOS\src/tasks.c **** {
4448:FreeRTOS\src/tasks.c **** TickType_t uxReturn;
4449:FreeRTOS\src/tasks.c **** 
4450:FreeRTOS\src/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4451:FreeRTOS\src/tasks.c **** 
4452:FreeRTOS\src/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4453:FreeRTOS\src/tasks.c **** 	queues and semaphores. */
4454:FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4455:FreeRTOS\src/tasks.c **** 
4456:FreeRTOS\src/tasks.c **** 	return uxReturn;
4457:FreeRTOS\src/tasks.c **** }
4458:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4459:FreeRTOS\src/tasks.c **** 
4460:FreeRTOS\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4461:FreeRTOS\src/tasks.c **** 
4462:FreeRTOS\src/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4463:FreeRTOS\src/tasks.c **** 	{
4464:FreeRTOS\src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4465:FreeRTOS\src/tasks.c **** 		then pxCurrentTCB will be NULL. */
4466:FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB != NULL )
4467:FreeRTOS\src/tasks.c **** 		{
4468:FreeRTOS\src/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4469:FreeRTOS\src/tasks.c **** 		}
4470:FreeRTOS\src/tasks.c **** 
4471:FreeRTOS\src/tasks.c **** 		return pxCurrentTCB;
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 91


4472:FreeRTOS\src/tasks.c **** 	}
4473:FreeRTOS\src/tasks.c **** 
4474:FreeRTOS\src/tasks.c **** #endif /* configUSE_MUTEXES */
4475:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4476:FreeRTOS\src/tasks.c **** 
4477:FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4478:FreeRTOS\src/tasks.c **** 
4479:FreeRTOS\src/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4480:FreeRTOS\src/tasks.c **** 	{
4481:FreeRTOS\src/tasks.c **** 	uint32_t ulReturn;
4482:FreeRTOS\src/tasks.c **** 
4483:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4484:FreeRTOS\src/tasks.c **** 		{
4485:FreeRTOS\src/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4486:FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4487:FreeRTOS\src/tasks.c **** 			{
4488:FreeRTOS\src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4489:FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4490:FreeRTOS\src/tasks.c **** 
4491:FreeRTOS\src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4492:FreeRTOS\src/tasks.c **** 				{
4493:FreeRTOS\src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4494:FreeRTOS\src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4495:FreeRTOS\src/tasks.c **** 
4496:FreeRTOS\src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4497:FreeRTOS\src/tasks.c **** 					section (some will yield immediately, others wait until the
4498:FreeRTOS\src/tasks.c **** 					critical section exits) - but it is not something that
4499:FreeRTOS\src/tasks.c **** 					application code should ever do. */
4500:FreeRTOS\src/tasks.c **** 					portYIELD_WITHIN_API();
4501:FreeRTOS\src/tasks.c **** 				}
4502:FreeRTOS\src/tasks.c **** 				else
4503:FreeRTOS\src/tasks.c **** 				{
4504:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4505:FreeRTOS\src/tasks.c **** 				}
4506:FreeRTOS\src/tasks.c **** 			}
4507:FreeRTOS\src/tasks.c **** 			else
4508:FreeRTOS\src/tasks.c **** 			{
4509:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4510:FreeRTOS\src/tasks.c **** 			}
4511:FreeRTOS\src/tasks.c **** 		}
4512:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4513:FreeRTOS\src/tasks.c **** 
4514:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4515:FreeRTOS\src/tasks.c **** 		{
4516:FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4517:FreeRTOS\src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4518:FreeRTOS\src/tasks.c **** 
4519:FreeRTOS\src/tasks.c **** 			if( ulReturn != 0UL )
4520:FreeRTOS\src/tasks.c **** 			{
4521:FreeRTOS\src/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4522:FreeRTOS\src/tasks.c **** 				{
4523:FreeRTOS\src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4524:FreeRTOS\src/tasks.c **** 				}
4525:FreeRTOS\src/tasks.c **** 				else
4526:FreeRTOS\src/tasks.c **** 				{
4527:FreeRTOS\src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4528:FreeRTOS\src/tasks.c **** 				}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 92


4529:FreeRTOS\src/tasks.c **** 			}
4530:FreeRTOS\src/tasks.c **** 			else
4531:FreeRTOS\src/tasks.c **** 			{
4532:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4533:FreeRTOS\src/tasks.c **** 			}
4534:FreeRTOS\src/tasks.c **** 
4535:FreeRTOS\src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4536:FreeRTOS\src/tasks.c **** 		}
4537:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4538:FreeRTOS\src/tasks.c **** 
4539:FreeRTOS\src/tasks.c **** 		return ulReturn;
4540:FreeRTOS\src/tasks.c **** 	}
4541:FreeRTOS\src/tasks.c **** 
4542:FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4543:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4544:FreeRTOS\src/tasks.c **** 
4545:FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4546:FreeRTOS\src/tasks.c **** 
4547:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4548:FreeRTOS\src/tasks.c **** 	{
4549:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
4550:FreeRTOS\src/tasks.c **** 
4551:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4552:FreeRTOS\src/tasks.c **** 		{
4553:FreeRTOS\src/tasks.c **** 			/* Only block if a notification is not already pending. */
4554:FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4555:FreeRTOS\src/tasks.c **** 			{
4556:FreeRTOS\src/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4557:FreeRTOS\src/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4558:FreeRTOS\src/tasks.c **** 				clear the value to zero. */
4559:FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4560:FreeRTOS\src/tasks.c **** 
4561:FreeRTOS\src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4562:FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4563:FreeRTOS\src/tasks.c **** 
4564:FreeRTOS\src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4565:FreeRTOS\src/tasks.c **** 				{
4566:FreeRTOS\src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4567:FreeRTOS\src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4568:FreeRTOS\src/tasks.c **** 
4569:FreeRTOS\src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4570:FreeRTOS\src/tasks.c **** 					section (some will yield immediately, others wait until the
4571:FreeRTOS\src/tasks.c **** 					critical section exits) - but it is not something that
4572:FreeRTOS\src/tasks.c **** 					application code should ever do. */
4573:FreeRTOS\src/tasks.c **** 					portYIELD_WITHIN_API();
4574:FreeRTOS\src/tasks.c **** 				}
4575:FreeRTOS\src/tasks.c **** 				else
4576:FreeRTOS\src/tasks.c **** 				{
4577:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4578:FreeRTOS\src/tasks.c **** 				}
4579:FreeRTOS\src/tasks.c **** 			}
4580:FreeRTOS\src/tasks.c **** 			else
4581:FreeRTOS\src/tasks.c **** 			{
4582:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4583:FreeRTOS\src/tasks.c **** 			}
4584:FreeRTOS\src/tasks.c **** 		}
4585:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 93


4586:FreeRTOS\src/tasks.c **** 
4587:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4588:FreeRTOS\src/tasks.c **** 		{
4589:FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4590:FreeRTOS\src/tasks.c **** 
4591:FreeRTOS\src/tasks.c **** 			if( pulNotificationValue != NULL )
4592:FreeRTOS\src/tasks.c **** 			{
4593:FreeRTOS\src/tasks.c **** 				/* Output the current notification value, which may or may not
4594:FreeRTOS\src/tasks.c **** 				have changed. */
4595:FreeRTOS\src/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4596:FreeRTOS\src/tasks.c **** 			}
4597:FreeRTOS\src/tasks.c **** 
4598:FreeRTOS\src/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4599:FreeRTOS\src/tasks.c **** 			blocked state (because a notification was already pending) or the
4600:FreeRTOS\src/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4601:FreeRTOS\src/tasks.c **** 			unblocked because of a timeout. */
4602:FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4603:FreeRTOS\src/tasks.c **** 			{
4604:FreeRTOS\src/tasks.c **** 				/* A notification was not received. */
4605:FreeRTOS\src/tasks.c **** 				xReturn = pdFALSE;
4606:FreeRTOS\src/tasks.c **** 			}
4607:FreeRTOS\src/tasks.c **** 			else
4608:FreeRTOS\src/tasks.c **** 			{
4609:FreeRTOS\src/tasks.c **** 				/* A notification was already pending or a notification was
4610:FreeRTOS\src/tasks.c **** 				received while the task was waiting. */
4611:FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4612:FreeRTOS\src/tasks.c **** 				xReturn = pdTRUE;
4613:FreeRTOS\src/tasks.c **** 			}
4614:FreeRTOS\src/tasks.c **** 
4615:FreeRTOS\src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4616:FreeRTOS\src/tasks.c **** 		}
4617:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4618:FreeRTOS\src/tasks.c **** 
4619:FreeRTOS\src/tasks.c **** 		return xReturn;
4620:FreeRTOS\src/tasks.c **** 	}
4621:FreeRTOS\src/tasks.c **** 
4622:FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4623:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4624:FreeRTOS\src/tasks.c **** 
4625:FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4626:FreeRTOS\src/tasks.c **** 
4627:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4628:FreeRTOS\src/tasks.c **** 	{
4629:FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
4630:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4631:FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4632:FreeRTOS\src/tasks.c **** 
4633:FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToNotify );
4634:FreeRTOS\src/tasks.c **** 		pxTCB = xTaskToNotify;
4635:FreeRTOS\src/tasks.c **** 
4636:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4637:FreeRTOS\src/tasks.c **** 		{
4638:FreeRTOS\src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4639:FreeRTOS\src/tasks.c **** 			{
4640:FreeRTOS\src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4641:FreeRTOS\src/tasks.c **** 			}
4642:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 94


4643:FreeRTOS\src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4644:FreeRTOS\src/tasks.c **** 
4645:FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4646:FreeRTOS\src/tasks.c **** 
4647:FreeRTOS\src/tasks.c **** 			switch( eAction )
4648:FreeRTOS\src/tasks.c **** 			{
4649:FreeRTOS\src/tasks.c **** 				case eSetBits	:
4650:FreeRTOS\src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4651:FreeRTOS\src/tasks.c **** 					break;
4652:FreeRTOS\src/tasks.c **** 
4653:FreeRTOS\src/tasks.c **** 				case eIncrement	:
4654:FreeRTOS\src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4655:FreeRTOS\src/tasks.c **** 					break;
4656:FreeRTOS\src/tasks.c **** 
4657:FreeRTOS\src/tasks.c **** 				case eSetValueWithOverwrite	:
4658:FreeRTOS\src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4659:FreeRTOS\src/tasks.c **** 					break;
4660:FreeRTOS\src/tasks.c **** 
4661:FreeRTOS\src/tasks.c **** 				case eSetValueWithoutOverwrite :
4662:FreeRTOS\src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4663:FreeRTOS\src/tasks.c **** 					{
4664:FreeRTOS\src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4665:FreeRTOS\src/tasks.c **** 					}
4666:FreeRTOS\src/tasks.c **** 					else
4667:FreeRTOS\src/tasks.c **** 					{
4668:FreeRTOS\src/tasks.c **** 						/* The value could not be written to the task. */
4669:FreeRTOS\src/tasks.c **** 						xReturn = pdFAIL;
4670:FreeRTOS\src/tasks.c **** 					}
4671:FreeRTOS\src/tasks.c **** 					break;
4672:FreeRTOS\src/tasks.c **** 
4673:FreeRTOS\src/tasks.c **** 				case eNoAction:
4674:FreeRTOS\src/tasks.c **** 					/* The task is being notified without its notify value being
4675:FreeRTOS\src/tasks.c **** 					updated. */
4676:FreeRTOS\src/tasks.c **** 					break;
4677:FreeRTOS\src/tasks.c **** 
4678:FreeRTOS\src/tasks.c **** 				default:
4679:FreeRTOS\src/tasks.c **** 					/* Should not get here if all enums are handled.
4680:FreeRTOS\src/tasks.c **** 					Artificially force an assert by testing a value the
4681:FreeRTOS\src/tasks.c **** 					compiler can't assume is const. */
4682:FreeRTOS\src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4683:FreeRTOS\src/tasks.c **** 
4684:FreeRTOS\src/tasks.c **** 					break;
4685:FreeRTOS\src/tasks.c **** 			}
4686:FreeRTOS\src/tasks.c **** 
4687:FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY();
4688:FreeRTOS\src/tasks.c **** 
4689:FreeRTOS\src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4690:FreeRTOS\src/tasks.c **** 			notification then unblock it now. */
4691:FreeRTOS\src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4692:FreeRTOS\src/tasks.c **** 			{
4693:FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4694:FreeRTOS\src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4695:FreeRTOS\src/tasks.c **** 
4696:FreeRTOS\src/tasks.c **** 				/* The task should not have been on an event list. */
4697:FreeRTOS\src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4698:FreeRTOS\src/tasks.c **** 
4699:FreeRTOS\src/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 95


4700:FreeRTOS\src/tasks.c **** 				{
4701:FreeRTOS\src/tasks.c **** 					/* If a task is blocked waiting for a notification then
4702:FreeRTOS\src/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4703:FreeRTOS\src/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4704:FreeRTOS\src/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4705:FreeRTOS\src/tasks.c **** 					because it will automatically get reset to a new value when
4706:FreeRTOS\src/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4707:FreeRTOS\src/tasks.c **** 					tickless idling is used it might be more important to enter
4708:FreeRTOS\src/tasks.c **** 					sleep mode at the earliest possible time - so reset
4709:FreeRTOS\src/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4710:FreeRTOS\src/tasks.c **** 					earliest possible time. */
4711:FreeRTOS\src/tasks.c **** 					prvResetNextTaskUnblockTime();
4712:FreeRTOS\src/tasks.c **** 				}
4713:FreeRTOS\src/tasks.c **** 				#endif
4714:FreeRTOS\src/tasks.c **** 
4715:FreeRTOS\src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4716:FreeRTOS\src/tasks.c **** 				{
4717:FreeRTOS\src/tasks.c **** 					/* The notified task has a priority above the currently
4718:FreeRTOS\src/tasks.c **** 					executing task so a yield is required. */
4719:FreeRTOS\src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4720:FreeRTOS\src/tasks.c **** 				}
4721:FreeRTOS\src/tasks.c **** 				else
4722:FreeRTOS\src/tasks.c **** 				{
4723:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4724:FreeRTOS\src/tasks.c **** 				}
4725:FreeRTOS\src/tasks.c **** 			}
4726:FreeRTOS\src/tasks.c **** 			else
4727:FreeRTOS\src/tasks.c **** 			{
4728:FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4729:FreeRTOS\src/tasks.c **** 			}
4730:FreeRTOS\src/tasks.c **** 		}
4731:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4732:FreeRTOS\src/tasks.c **** 
4733:FreeRTOS\src/tasks.c **** 		return xReturn;
4734:FreeRTOS\src/tasks.c **** 	}
4735:FreeRTOS\src/tasks.c **** 
4736:FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4737:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4738:FreeRTOS\src/tasks.c **** 
4739:FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4740:FreeRTOS\src/tasks.c **** 
4741:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4742:FreeRTOS\src/tasks.c **** 	{
4743:FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
4744:FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4745:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4746:FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4747:FreeRTOS\src/tasks.c **** 
4748:FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToNotify );
4749:FreeRTOS\src/tasks.c **** 
4750:FreeRTOS\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4751:FreeRTOS\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4752:FreeRTOS\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4753:FreeRTOS\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4754:FreeRTOS\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4755:FreeRTOS\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
4756:FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 96


4757:FreeRTOS\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4758:FreeRTOS\src/tasks.c **** 		been assigned a priority above the configured maximum system call
4759:FreeRTOS\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4760:FreeRTOS\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4761:FreeRTOS\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4762:FreeRTOS\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4763:FreeRTOS\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4764:FreeRTOS\src/tasks.c **** 		provided on the following link:
4765:FreeRTOS\src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4766:FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4767:FreeRTOS\src/tasks.c **** 
4768:FreeRTOS\src/tasks.c **** 		pxTCB = xTaskToNotify;
4769:FreeRTOS\src/tasks.c **** 
4770:FreeRTOS\src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4771:FreeRTOS\src/tasks.c **** 		{
4772:FreeRTOS\src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4773:FreeRTOS\src/tasks.c **** 			{
4774:FreeRTOS\src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4775:FreeRTOS\src/tasks.c **** 			}
4776:FreeRTOS\src/tasks.c **** 
4777:FreeRTOS\src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4778:FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4779:FreeRTOS\src/tasks.c **** 
4780:FreeRTOS\src/tasks.c **** 			switch( eAction )
4781:FreeRTOS\src/tasks.c **** 			{
4782:FreeRTOS\src/tasks.c **** 				case eSetBits	:
4783:FreeRTOS\src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4784:FreeRTOS\src/tasks.c **** 					break;
4785:FreeRTOS\src/tasks.c **** 
4786:FreeRTOS\src/tasks.c **** 				case eIncrement	:
4787:FreeRTOS\src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4788:FreeRTOS\src/tasks.c **** 					break;
4789:FreeRTOS\src/tasks.c **** 
4790:FreeRTOS\src/tasks.c **** 				case eSetValueWithOverwrite	:
4791:FreeRTOS\src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4792:FreeRTOS\src/tasks.c **** 					break;
4793:FreeRTOS\src/tasks.c **** 
4794:FreeRTOS\src/tasks.c **** 				case eSetValueWithoutOverwrite :
4795:FreeRTOS\src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4796:FreeRTOS\src/tasks.c **** 					{
4797:FreeRTOS\src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4798:FreeRTOS\src/tasks.c **** 					}
4799:FreeRTOS\src/tasks.c **** 					else
4800:FreeRTOS\src/tasks.c **** 					{
4801:FreeRTOS\src/tasks.c **** 						/* The value could not be written to the task. */
4802:FreeRTOS\src/tasks.c **** 						xReturn = pdFAIL;
4803:FreeRTOS\src/tasks.c **** 					}
4804:FreeRTOS\src/tasks.c **** 					break;
4805:FreeRTOS\src/tasks.c **** 
4806:FreeRTOS\src/tasks.c **** 				case eNoAction :
4807:FreeRTOS\src/tasks.c **** 					/* The task is being notified without its notify value being
4808:FreeRTOS\src/tasks.c **** 					updated. */
4809:FreeRTOS\src/tasks.c **** 					break;
4810:FreeRTOS\src/tasks.c **** 
4811:FreeRTOS\src/tasks.c **** 				default:
4812:FreeRTOS\src/tasks.c **** 					/* Should not get here if all enums are handled.
4813:FreeRTOS\src/tasks.c **** 					Artificially force an assert by testing a value the
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 97


4814:FreeRTOS\src/tasks.c **** 					compiler can't assume is const. */
4815:FreeRTOS\src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4816:FreeRTOS\src/tasks.c **** 					break;
4817:FreeRTOS\src/tasks.c **** 			}
4818:FreeRTOS\src/tasks.c **** 
4819:FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4820:FreeRTOS\src/tasks.c **** 
4821:FreeRTOS\src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4822:FreeRTOS\src/tasks.c **** 			notification then unblock it now. */
4823:FreeRTOS\src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4824:FreeRTOS\src/tasks.c **** 			{
4825:FreeRTOS\src/tasks.c **** 				/* The task should not have been on an event list. */
4826:FreeRTOS\src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4827:FreeRTOS\src/tasks.c **** 
4828:FreeRTOS\src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4829:FreeRTOS\src/tasks.c **** 				{
4830:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4831:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4832:FreeRTOS\src/tasks.c **** 				}
4833:FreeRTOS\src/tasks.c **** 				else
4834:FreeRTOS\src/tasks.c **** 				{
4835:FreeRTOS\src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4836:FreeRTOS\src/tasks.c **** 					this task pending until the scheduler is resumed. */
4837:FreeRTOS\src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4838:FreeRTOS\src/tasks.c **** 				}
4839:FreeRTOS\src/tasks.c **** 
4840:FreeRTOS\src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4841:FreeRTOS\src/tasks.c **** 				{
4842:FreeRTOS\src/tasks.c **** 					/* The notified task has a priority above the currently
4843:FreeRTOS\src/tasks.c **** 					executing task so a yield is required. */
4844:FreeRTOS\src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4845:FreeRTOS\src/tasks.c **** 					{
4846:FreeRTOS\src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4847:FreeRTOS\src/tasks.c **** 					}
4848:FreeRTOS\src/tasks.c **** 
4849:FreeRTOS\src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4850:FreeRTOS\src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4851:FreeRTOS\src/tasks.c **** 					safe FreeRTOS function. */
4852:FreeRTOS\src/tasks.c **** 					xYieldPending = pdTRUE;
4853:FreeRTOS\src/tasks.c **** 				}
4854:FreeRTOS\src/tasks.c **** 				else
4855:FreeRTOS\src/tasks.c **** 				{
4856:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4857:FreeRTOS\src/tasks.c **** 				}
4858:FreeRTOS\src/tasks.c **** 			}
4859:FreeRTOS\src/tasks.c **** 		}
4860:FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4861:FreeRTOS\src/tasks.c **** 
4862:FreeRTOS\src/tasks.c **** 		return xReturn;
4863:FreeRTOS\src/tasks.c **** 	}
4864:FreeRTOS\src/tasks.c **** 
4865:FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4866:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4867:FreeRTOS\src/tasks.c **** 
4868:FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4869:FreeRTOS\src/tasks.c **** 
4870:FreeRTOS\src/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 98


4871:FreeRTOS\src/tasks.c **** 	{
4872:FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
4873:FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4874:FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4875:FreeRTOS\src/tasks.c **** 
4876:FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToNotify );
4877:FreeRTOS\src/tasks.c **** 
4878:FreeRTOS\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4879:FreeRTOS\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4880:FreeRTOS\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4881:FreeRTOS\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4882:FreeRTOS\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4883:FreeRTOS\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
4884:FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4885:FreeRTOS\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4886:FreeRTOS\src/tasks.c **** 		been assigned a priority above the configured maximum system call
4887:FreeRTOS\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4888:FreeRTOS\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4889:FreeRTOS\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4890:FreeRTOS\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4891:FreeRTOS\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4892:FreeRTOS\src/tasks.c **** 		provided on the following link:
4893:FreeRTOS\src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4894:FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4895:FreeRTOS\src/tasks.c **** 
4896:FreeRTOS\src/tasks.c **** 		pxTCB = xTaskToNotify;
4897:FreeRTOS\src/tasks.c **** 
4898:FreeRTOS\src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4899:FreeRTOS\src/tasks.c **** 		{
4900:FreeRTOS\src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4901:FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4902:FreeRTOS\src/tasks.c **** 
4903:FreeRTOS\src/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4904:FreeRTOS\src/tasks.c **** 			semaphore. */
4905:FreeRTOS\src/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4906:FreeRTOS\src/tasks.c **** 
4907:FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4908:FreeRTOS\src/tasks.c **** 
4909:FreeRTOS\src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4910:FreeRTOS\src/tasks.c **** 			notification then unblock it now. */
4911:FreeRTOS\src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4912:FreeRTOS\src/tasks.c **** 			{
4913:FreeRTOS\src/tasks.c **** 				/* The task should not have been on an event list. */
4914:FreeRTOS\src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4915:FreeRTOS\src/tasks.c **** 
4916:FreeRTOS\src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4917:FreeRTOS\src/tasks.c **** 				{
4918:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4919:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4920:FreeRTOS\src/tasks.c **** 				}
4921:FreeRTOS\src/tasks.c **** 				else
4922:FreeRTOS\src/tasks.c **** 				{
4923:FreeRTOS\src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4924:FreeRTOS\src/tasks.c **** 					this task pending until the scheduler is resumed. */
4925:FreeRTOS\src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4926:FreeRTOS\src/tasks.c **** 				}
4927:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 99


4928:FreeRTOS\src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4929:FreeRTOS\src/tasks.c **** 				{
4930:FreeRTOS\src/tasks.c **** 					/* The notified task has a priority above the currently
4931:FreeRTOS\src/tasks.c **** 					executing task so a yield is required. */
4932:FreeRTOS\src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4933:FreeRTOS\src/tasks.c **** 					{
4934:FreeRTOS\src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4935:FreeRTOS\src/tasks.c **** 					}
4936:FreeRTOS\src/tasks.c **** 
4937:FreeRTOS\src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4938:FreeRTOS\src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
4939:FreeRTOS\src/tasks.c **** 					safe FreeRTOS function. */
4940:FreeRTOS\src/tasks.c **** 					xYieldPending = pdTRUE;
4941:FreeRTOS\src/tasks.c **** 				}
4942:FreeRTOS\src/tasks.c **** 				else
4943:FreeRTOS\src/tasks.c **** 				{
4944:FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4945:FreeRTOS\src/tasks.c **** 				}
4946:FreeRTOS\src/tasks.c **** 			}
4947:FreeRTOS\src/tasks.c **** 		}
4948:FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4949:FreeRTOS\src/tasks.c **** 	}
4950:FreeRTOS\src/tasks.c **** 
4951:FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4952:FreeRTOS\src/tasks.c **** 
4953:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4954:FreeRTOS\src/tasks.c **** 
4955:FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:FreeRTOS\src/tasks.c **** 
4957:FreeRTOS\src/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4958:FreeRTOS\src/tasks.c **** 	{
4959:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
4960:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
4961:FreeRTOS\src/tasks.c **** 
4962:FreeRTOS\src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4963:FreeRTOS\src/tasks.c **** 		its notification state cleared. */
4964:FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4965:FreeRTOS\src/tasks.c **** 
4966:FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4967:FreeRTOS\src/tasks.c **** 		{
4968:FreeRTOS\src/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4969:FreeRTOS\src/tasks.c **** 			{
4970:FreeRTOS\src/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4971:FreeRTOS\src/tasks.c **** 				xReturn = pdPASS;
4972:FreeRTOS\src/tasks.c **** 			}
4973:FreeRTOS\src/tasks.c **** 			else
4974:FreeRTOS\src/tasks.c **** 			{
4975:FreeRTOS\src/tasks.c **** 				xReturn = pdFAIL;
4976:FreeRTOS\src/tasks.c **** 			}
4977:FreeRTOS\src/tasks.c **** 		}
4978:FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4979:FreeRTOS\src/tasks.c **** 
4980:FreeRTOS\src/tasks.c **** 		return xReturn;
4981:FreeRTOS\src/tasks.c **** 	}
4982:FreeRTOS\src/tasks.c **** 
4983:FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4984:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 100


4985:FreeRTOS\src/tasks.c **** 
4986:FreeRTOS\src/tasks.c **** 
4987:FreeRTOS\src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4988:FreeRTOS\src/tasks.c **** {
 589              		.loc 1 4988 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              	.LVL60:
 594 0000 70B5     		push	{r4, r5, r6, lr}
 595              		.cfi_def_cfa_offset 16
 596              		.cfi_offset 4, -16
 597              		.cfi_offset 5, -12
 598              		.cfi_offset 6, -8
 599              		.cfi_offset 14, -4
 600 0002 0446     		mov	r4, r0
 601 0004 0E46     		mov	r6, r1
4989:FreeRTOS\src/tasks.c **** TickType_t xTimeToWake;
4990:FreeRTOS\src/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 602              		.loc 1 4990 0
 603 0006 1E4B     		ldr	r3, .L54
 604 0008 D3F80853 		ldr	r5, [r3, #776]
 605              	.LVL61:
4991:FreeRTOS\src/tasks.c **** 
4992:FreeRTOS\src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4993:FreeRTOS\src/tasks.c **** 	{
4994:FreeRTOS\src/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4995:FreeRTOS\src/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4996:FreeRTOS\src/tasks.c **** 		when the task leaves the Blocked state. */
4997:FreeRTOS\src/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4998:FreeRTOS\src/tasks.c **** 	}
4999:FreeRTOS\src/tasks.c **** 	#endif
5000:FreeRTOS\src/tasks.c **** 
5001:FreeRTOS\src/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5002:FreeRTOS\src/tasks.c **** 	as the same list item is used for both lists. */
5003:FreeRTOS\src/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 606              		.loc 1 5003 0
 607 000c D3F8F402 		ldr	r0, [r3, #756]
 608              	.LVL62:
 609 0010 0430     		adds	r0, r0, #4
 610 0012 FFF7FEFF 		bl	uxListRemove
 611              	.LVL63:
 612 0016 60B9     		cbnz	r0, .L49
5004:FreeRTOS\src/tasks.c **** 	{
5005:FreeRTOS\src/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5006:FreeRTOS\src/tasks.c **** 		check, and the port reset macro can be called directly. */
5007:FreeRTOS\src/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 613              		.loc 1 5007 0
 614 0018 194B     		ldr	r3, .L54
 615 001a D3F8F422 		ldr	r2, [r3, #756]
 616 001e D16A     		ldr	r1, [r2, #44]
 617 0020 0122     		movs	r2, #1
 618 0022 02FA01F1 		lsl	r1, r2, r1
 619 0026 D3F80023 		ldr	r2, [r3, #768]
 620 002a 22EA0102 		bic	r2, r2, r1
 621 002e C3F80023 		str	r2, [r3, #768]
 622              	.L49:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 101


5008:FreeRTOS\src/tasks.c **** 	}
5009:FreeRTOS\src/tasks.c **** 	else
5010:FreeRTOS\src/tasks.c **** 	{
5011:FreeRTOS\src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5012:FreeRTOS\src/tasks.c **** 	}
5013:FreeRTOS\src/tasks.c **** 
5014:FreeRTOS\src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5015:FreeRTOS\src/tasks.c **** 	{
5016:FreeRTOS\src/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 623              		.loc 1 5016 0
 624 0032 B4F1FF3F 		cmp	r4, #-1
 625 0036 07D1     		bne	.L50
 626              		.loc 1 5016 0 is_stmt 0 discriminator 1
 627 0038 36B1     		cbz	r6, .L50
5017:FreeRTOS\src/tasks.c **** 		{
5018:FreeRTOS\src/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5019:FreeRTOS\src/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5020:FreeRTOS\src/tasks.c **** 			indefinitely. */
5021:FreeRTOS\src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 628              		.loc 1 5021 0 is_stmt 1
 629 003a 1148     		ldr	r0, .L54
 630 003c D0F8F412 		ldr	r1, [r0, #756]
 631 0040 0431     		adds	r1, r1, #4
 632 0042 FFF7FEFF 		bl	vListInsertEnd
 633              	.LVL64:
 634 0046 70BD     		pop	{r4, r5, r6, pc}
 635              	.LVL65:
 636              	.L50:
5022:FreeRTOS\src/tasks.c **** 		}
5023:FreeRTOS\src/tasks.c **** 		else
5024:FreeRTOS\src/tasks.c **** 		{
5025:FreeRTOS\src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5026:FreeRTOS\src/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5027:FreeRTOS\src/tasks.c **** 			kernel will manage it correctly. */
5028:FreeRTOS\src/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 637              		.loc 1 5028 0
 638 0048 2C44     		add	r4, r4, r5
 639              	.LVL66:
5029:FreeRTOS\src/tasks.c **** 
5030:FreeRTOS\src/tasks.c **** 			/* The list item will be inserted in wake time order. */
5031:FreeRTOS\src/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 640              		.loc 1 5031 0
 641 004a 0D4B     		ldr	r3, .L54
 642 004c D3F8F432 		ldr	r3, [r3, #756]
 643 0050 5C60     		str	r4, [r3, #4]
5032:FreeRTOS\src/tasks.c **** 
5033:FreeRTOS\src/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 644              		.loc 1 5033 0
 645 0052 A542     		cmp	r5, r4
 646 0054 08D9     		bls	.L52
5034:FreeRTOS\src/tasks.c **** 			{
5035:FreeRTOS\src/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5036:FreeRTOS\src/tasks.c **** 				list. */
5037:FreeRTOS\src/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 647              		.loc 1 5037 0
 648 0056 0A4B     		ldr	r3, .L54
 649 0058 D3F8EC02 		ldr	r0, [r3, #748]
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 102


 650 005c D3F8F412 		ldr	r1, [r3, #756]
 651 0060 0431     		adds	r1, r1, #4
 652 0062 FFF7FEFF 		bl	vListInsert
 653              	.LVL67:
 654 0066 70BD     		pop	{r4, r5, r6, pc}
 655              	.LVL68:
 656              	.L52:
5038:FreeRTOS\src/tasks.c **** 			}
5039:FreeRTOS\src/tasks.c **** 			else
5040:FreeRTOS\src/tasks.c **** 			{
5041:FreeRTOS\src/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5042:FreeRTOS\src/tasks.c **** 				is used. */
5043:FreeRTOS\src/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 657              		.loc 1 5043 0
 658 0068 054D     		ldr	r5, .L54
 659              	.LVL69:
 660 006a A86A     		ldr	r0, [r5, #40]
 661 006c D5F8F412 		ldr	r1, [r5, #756]
 662 0070 0431     		adds	r1, r1, #4
 663 0072 FFF7FEFF 		bl	vListInsert
 664              	.LVL70:
5044:FreeRTOS\src/tasks.c **** 
5045:FreeRTOS\src/tasks.c **** 				/* If the task entering the blocked state was placed at the
5046:FreeRTOS\src/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5047:FreeRTOS\src/tasks.c **** 				needs to be updated too. */
5048:FreeRTOS\src/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 665              		.loc 1 5048 0
 666 0076 EB6A     		ldr	r3, [r5, #44]
 667 0078 9C42     		cmp	r4, r3
 668 007a 00D2     		bcs	.L48
5049:FreeRTOS\src/tasks.c **** 				{
5050:FreeRTOS\src/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 669              		.loc 1 5050 0
 670 007c EC62     		str	r4, [r5, #44]
 671              	.L48:
 672 007e 70BD     		pop	{r4, r5, r6, pc}
 673              	.LVL71:
 674              	.L55:
 675              		.align	2
 676              	.L54:
 677 0080 00000000 		.word	.LANCHOR0
 678              		.cfi_endproc
 679              	.LFE58:
 680              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 681              		.section	.text.xTaskCreate,"ax",%progbits
 682              		.align	2
 683              		.global	xTaskCreate
 684              		.thumb
 685              		.thumb_func
 686              		.type	xTaskCreate, %function
 687              	xTaskCreate:
 688              	.LFB5:
 753:FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 689              		.loc 1 753 0
 690              		.cfi_startproc
 691              		@ args = 8, pretend = 0, frame = 0
 692              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 103


 693              	.LVL72:
 694 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 695              		.cfi_def_cfa_offset 28
 696              		.cfi_offset 4, -28
 697              		.cfi_offset 5, -24
 698              		.cfi_offset 6, -20
 699              		.cfi_offset 7, -16
 700              		.cfi_offset 8, -12
 701              		.cfi_offset 9, -8
 702              		.cfi_offset 14, -4
 703 0004 85B0     		sub	sp, sp, #20
 704              		.cfi_def_cfa_offset 48
 705 0006 0646     		mov	r6, r0
 706 0008 0F46     		mov	r7, r1
 707 000a 1546     		mov	r5, r2
 708 000c 9846     		mov	r8, r3
 709              	.LBB27:
 787:FreeRTOS\src/tasks.c **** 
 710              		.loc 1 787 0
 711 000e 9000     		lsls	r0, r2, #2
 712              	.LVL73:
 713 0010 FFF7FEFF 		bl	pvPortMalloc
 714              	.LVL74:
 789:FreeRTOS\src/tasks.c **** 			{
 715              		.loc 1 789 0
 716 0014 60B1     		cbz	r0, .L60
 717 0016 8146     		mov	r9, r0
 792:FreeRTOS\src/tasks.c **** 
 718              		.loc 1 792 0
 719 0018 5020     		movs	r0, #80
 720              	.LVL75:
 721 001a FFF7FEFF 		bl	pvPortMalloc
 722              	.LVL76:
 794:FreeRTOS\src/tasks.c **** 				{
 723              		.loc 1 794 0
 724 001e 0446     		mov	r4, r0
 725 0020 10B1     		cbz	r0, .L58
 797:FreeRTOS\src/tasks.c **** 				}
 726              		.loc 1 797 0
 727 0022 C0F83090 		str	r9, [r0, #48]
 728 0026 04E0     		b	.L57
 729              	.L58:
 803:FreeRTOS\src/tasks.c **** 				}
 730              		.loc 1 803 0
 731 0028 4846     		mov	r0, r9
 732              	.LVL77:
 733 002a FFF7FEFF 		bl	vPortFree
 734              	.LVL78:
 735 002e 00E0     		b	.L57
 736              	.LVL79:
 737              	.L60:
 808:FreeRTOS\src/tasks.c **** 			}
 738              		.loc 1 808 0
 739 0030 0024     		movs	r4, #0
 740              	.LVL80:
 741              	.L57:
 742              	.LBE27:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 104


 813:FreeRTOS\src/tasks.c **** 		{
 743              		.loc 1 813 0
 744 0032 8CB1     		cbz	r4, .L61
 823:FreeRTOS\src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 745              		.loc 1 823 0
 746 0034 0023     		movs	r3, #0
 747 0036 0393     		str	r3, [sp, #12]
 748 0038 0294     		str	r4, [sp, #8]
 749 003a 0D9B     		ldr	r3, [sp, #52]
 750 003c 0193     		str	r3, [sp, #4]
 751 003e 0C9B     		ldr	r3, [sp, #48]
 752 0040 0093     		str	r3, [sp]
 753 0042 4346     		mov	r3, r8
 754 0044 2A46     		mov	r2, r5
 755 0046 3946     		mov	r1, r7
 756 0048 3046     		mov	r0, r6
 757 004a FFF7FEFF 		bl	prvInitialiseNewTask
 758              	.LVL81:
 824:FreeRTOS\src/tasks.c **** 			xReturn = pdPASS;
 759              		.loc 1 824 0
 760 004e 2046     		mov	r0, r4
 761 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 762              	.LVL82:
 825:FreeRTOS\src/tasks.c **** 		}
 763              		.loc 1 825 0
 764 0054 0120     		movs	r0, #1
 765 0056 01E0     		b	.L59
 766              	.LVL83:
 767              	.L61:
 829:FreeRTOS\src/tasks.c **** 		}
 768              		.loc 1 829 0
 769 0058 4FF0FF30 		mov	r0, #-1
 770              	.L59:
 771              	.LVL84:
 833:FreeRTOS\src/tasks.c **** 
 772              		.loc 1 833 0
 773 005c 05B0     		add	sp, sp, #20
 774              		.cfi_def_cfa_offset 28
 775              		@ sp needed
 776 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 777              		.cfi_endproc
 778              	.LFE5:
 779              		.size	xTaskCreate, .-xTaskCreate
 780 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 781              		.align	2
 782              		.global	vTaskDelete
 783              		.thumb
 784              		.thumb_func
 785              		.type	vTaskDelete, %function
 786              	vTaskDelete:
 787              	.LFB8:
1130:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 788              		.loc 1 1130 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              	.LVL85:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 105


 793 0000 70B5     		push	{r4, r5, r6, lr}
 794              		.cfi_def_cfa_offset 16
 795              		.cfi_offset 4, -16
 796              		.cfi_offset 5, -12
 797              		.cfi_offset 6, -8
 798              		.cfi_offset 14, -4
 799 0002 0446     		mov	r4, r0
1133:FreeRTOS\src/tasks.c **** 		{
 800              		.loc 1 1133 0
 801 0004 FFF7FEFF 		bl	vPortEnterCritical
 802              	.LVL86:
1137:FreeRTOS\src/tasks.c **** 
 803              		.loc 1 1137 0
 804 0008 14B9     		cbnz	r4, .L64
1137:FreeRTOS\src/tasks.c **** 
 805              		.loc 1 1137 0 is_stmt 0 discriminator 1
 806 000a 2A4B     		ldr	r3, .L71
 807 000c D3F8F442 		ldr	r4, [r3, #756]
 808              	.LVL87:
 809              	.L64:
1140:FreeRTOS\src/tasks.c **** 			{
 810              		.loc 1 1140 0 is_stmt 1 discriminator 4
 811 0010 251D     		adds	r5, r4, #4
 812 0012 2846     		mov	r0, r5
 813 0014 FFF7FEFF 		bl	uxListRemove
 814              	.LVL88:
 815 0018 80B9     		cbnz	r0, .L65
1142:FreeRTOS\src/tasks.c **** 			}
 816              		.loc 1 1142 0
 817 001a E26A     		ldr	r2, [r4, #44]
 818 001c 02EB8201 		add	r1, r2, r2, lsl #2
 819 0020 8B00     		lsls	r3, r1, #2
 820 0022 2449     		ldr	r1, .L71
 821 0024 0B44     		add	r3, r3, r1
 822 0026 1B6B     		ldr	r3, [r3, #48]
 823 0028 43B9     		cbnz	r3, .L65
1142:FreeRTOS\src/tasks.c **** 			}
 824              		.loc 1 1142 0 is_stmt 0 discriminator 1
 825 002a 0123     		movs	r3, #1
 826 002c 03FA02F2 		lsl	r2, r3, r2
 827 0030 D1F80033 		ldr	r3, [r1, #768]
 828 0034 23EA0202 		bic	r2, r3, r2
 829 0038 C1F80023 		str	r2, [r1, #768]
 830              	.L65:
1150:FreeRTOS\src/tasks.c **** 			{
 831              		.loc 1 1150 0 is_stmt 1
 832 003c A36A     		ldr	r3, [r4, #40]
 833 003e 1BB1     		cbz	r3, .L66
1152:FreeRTOS\src/tasks.c **** 			}
 834              		.loc 1 1152 0
 835 0040 04F11800 		add	r0, r4, #24
 836 0044 FFF7FEFF 		bl	uxListRemove
 837              	.LVL89:
 838              	.L66:
1163:FreeRTOS\src/tasks.c **** 
 839              		.loc 1 1163 0
 840 0048 1A4B     		ldr	r3, .L71
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 106


 841 004a D3F8FC22 		ldr	r2, [r3, #764]
 842 004e 0132     		adds	r2, r2, #1
 843 0050 C3F8FC22 		str	r2, [r3, #764]
1165:FreeRTOS\src/tasks.c **** 			{
 844              		.loc 1 1165 0
 845 0054 D3F8F432 		ldr	r3, [r3, #756]
 846 0058 9C42     		cmp	r4, r3
 847 005a 0BD1     		bne	.L67
1172:FreeRTOS\src/tasks.c **** 
 848              		.loc 1 1172 0
 849 005c 154E     		ldr	r6, .L71
 850 005e 2946     		mov	r1, r5
 851 0060 06F53670 		add	r0, r6, #728
 852 0064 FFF7FEFF 		bl	vListInsertEnd
 853              	.LVL90:
1177:FreeRTOS\src/tasks.c **** 
 854              		.loc 1 1177 0
 855 0068 D6F80433 		ldr	r3, [r6, #772]
 856 006c 0133     		adds	r3, r3, #1
 857 006e C6F80433 		str	r3, [r6, #772]
 858 0072 0AE0     		b	.L68
 859              	.L67:
1188:FreeRTOS\src/tasks.c **** 				prvDeleteTCB( pxTCB );
 860              		.loc 1 1188 0
 861 0074 0F4A     		ldr	r2, .L71
 862 0076 D2F8F032 		ldr	r3, [r2, #752]
 863 007a 013B     		subs	r3, r3, #1
 864 007c C2F8F032 		str	r3, [r2, #752]
1189:FreeRTOS\src/tasks.c **** 
 865              		.loc 1 1189 0
 866 0080 2046     		mov	r0, r4
 867 0082 FFF7FEFF 		bl	prvDeleteTCB
 868              	.LVL91:
1193:FreeRTOS\src/tasks.c **** 			}
 869              		.loc 1 1193 0
 870 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 871              	.LVL92:
 872              	.L68:
1198:FreeRTOS\src/tasks.c **** 
 873              		.loc 1 1198 0
 874 008a FFF7FEFF 		bl	vPortExitCritical
 875              	.LVL93:
1202:FreeRTOS\src/tasks.c **** 		{
 876              		.loc 1 1202 0
 877 008e 094B     		ldr	r3, .L71
 878 0090 D3F8F832 		ldr	r3, [r3, #760]
 879 0094 63B1     		cbz	r3, .L63
1204:FreeRTOS\src/tasks.c **** 			{
 880              		.loc 1 1204 0
 881 0096 074B     		ldr	r3, .L71
 882 0098 D3F8F432 		ldr	r3, [r3, #756]
 883 009c 9C42     		cmp	r4, r3
 884 009e 07D1     		bne	.L63
1207:FreeRTOS\src/tasks.c **** 			}
 885              		.loc 1 1207 0
 886 00a0 4FF08052 		mov	r2, #268435456
 887 00a4 044B     		ldr	r3, .L71+4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 107


 888 00a6 1A60     		str	r2, [r3]
 889              		.syntax unified
 890              	@ 1207 "FreeRTOS\src\tasks.c" 1
 891 00a8 BFF34F8F 		dsb
 892              	@ 0 "" 2
 893              	@ 1207 "FreeRTOS\src\tasks.c" 1
 894 00ac BFF36F8F 		isb
 895              	@ 0 "" 2
 896              		.thumb
 897              		.syntax unified
 898              	.L63:
 899 00b0 70BD     		pop	{r4, r5, r6, pc}
 900              	.LVL94:
 901              	.L72:
 902 00b2 00BF     		.align	2
 903              	.L71:
 904 00b4 00000000 		.word	.LANCHOR0
 905 00b8 04ED00E0 		.word	-536810236
 906              		.cfi_endproc
 907              	.LFE8:
 908              		.size	vTaskDelete, .-vTaskDelete
 909              		.section	.text.eTaskGetState,"ax",%progbits
 910              		.align	2
 911              		.global	eTaskGetState
 912              		.thumb
 913              		.thumb_func
 914              		.type	eTaskGetState, %function
 915              	eTaskGetState:
 916              	.LFB11:
1351:FreeRTOS\src/tasks.c **** 	eTaskState eReturn;
 917              		.loc 1 1351 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 921              	.LVL95:
 922 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 923              		.cfi_def_cfa_offset 24
 924              		.cfi_offset 3, -24
 925              		.cfi_offset 4, -20
 926              		.cfi_offset 5, -16
 927              		.cfi_offset 6, -12
 928              		.cfi_offset 7, -8
 929              		.cfi_offset 14, -4
 930              	.LVL96:
1358:FreeRTOS\src/tasks.c **** 		{
 931              		.loc 1 1358 0
 932 0002 194B     		ldr	r3, .L84
 933 0004 D3F8F432 		ldr	r3, [r3, #756]
 934 0008 9842     		cmp	r0, r3
 935 000a 1FD0     		beq	.L76
 936 000c 0446     		mov	r4, r0
1365:FreeRTOS\src/tasks.c **** 			{
 937              		.loc 1 1365 0
 938 000e FFF7FEFF 		bl	vPortEnterCritical
 939              	.LVL97:
1367:FreeRTOS\src/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 940              		.loc 1 1367 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 108


 941 0012 6569     		ldr	r5, [r4, #20]
 942              	.LVL98:
1368:FreeRTOS\src/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 943              		.loc 1 1368 0
 944 0014 144B     		ldr	r3, .L84
 945 0016 9E6A     		ldr	r6, [r3, #40]
 946              	.LVL99:
1369:FreeRTOS\src/tasks.c **** 			}
 947              		.loc 1 1369 0
 948 0018 D3F8EC72 		ldr	r7, [r3, #748]
 949              	.LVL100:
1371:FreeRTOS\src/tasks.c **** 
 950              		.loc 1 1371 0
 951 001c FFF7FEFF 		bl	vPortExitCritical
 952              	.LVL101:
1373:FreeRTOS\src/tasks.c **** 			{
 953              		.loc 1 1373 0
 954 0020 B542     		cmp	r5, r6
 955 0022 15D0     		beq	.L77
1373:FreeRTOS\src/tasks.c **** 			{
 956              		.loc 1 1373 0 is_stmt 0 discriminator 1
 957 0024 BD42     		cmp	r5, r7
 958 0026 15D0     		beq	.L78
1381:FreeRTOS\src/tasks.c **** 				{
 959              		.loc 1 1381 0 is_stmt 1
 960 0028 0F4B     		ldr	r3, .L84
 961 002a 9D42     		cmp	r5, r3
 962 002c 08D1     		bne	.L75
1386:FreeRTOS\src/tasks.c **** 					{
 963              		.loc 1 1386 0
 964 002e A36A     		ldr	r3, [r4, #40]
 965 0030 93B9     		cbnz	r3, .L79
1394:FreeRTOS\src/tasks.c **** 							{
 966              		.loc 1 1394 0
 967 0032 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 968 0036 DBB2     		uxtb	r3, r3
 969 0038 012B     		cmp	r3, #1
 970 003a 0FD1     		bne	.L80
1396:FreeRTOS\src/tasks.c **** 							}
 971              		.loc 1 1396 0
 972 003c 0220     		movs	r0, #2
 973 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 974              	.LVL102:
 975              	.L75:
1417:FreeRTOS\src/tasks.c **** 				{
 976              		.loc 1 1417 0
 977 0040 0A4B     		ldr	r3, .L84+4
 978 0042 9D42     		cmp	r5, r3
 979 0044 0CD0     		beq	.L81
1417:FreeRTOS\src/tasks.c **** 				{
 980              		.loc 1 1417 0 is_stmt 0 discriminator 1
 981 0046 6DB9     		cbnz	r5, .L82
1422:FreeRTOS\src/tasks.c **** 				}
 982              		.loc 1 1422 0 is_stmt 1
 983 0048 0420     		movs	r0, #4
 984 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 985              	.LVL103:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 109


 986              	.L76:
1361:FreeRTOS\src/tasks.c **** 		}
 987              		.loc 1 1361 0
 988 004c 0020     		movs	r0, #0
 989              	.LVL104:
 990 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 991              	.LVL105:
 992              	.L77:
1377:FreeRTOS\src/tasks.c **** 			}
 993              		.loc 1 1377 0
 994 0050 0220     		movs	r0, #2
 995 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 996              	.LVL106:
 997              	.L78:
 998 0054 0220     		movs	r0, #2
 999 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1000              	.LVL107:
 1001              	.L79:
1411:FreeRTOS\src/tasks.c **** 					}
 1002              		.loc 1 1411 0
 1003 0058 0220     		movs	r0, #2
 1004 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1005              	.LVL108:
 1006              	.L80:
1400:FreeRTOS\src/tasks.c **** 							}
 1007              		.loc 1 1400 0
 1008 005c 0320     		movs	r0, #3
 1009 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1010              	.LVL109:
 1011              	.L81:
1422:FreeRTOS\src/tasks.c **** 				}
 1012              		.loc 1 1422 0
 1013 0060 0420     		movs	r0, #4
 1014 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1015              	.LVL110:
 1016              	.L82:
1430:FreeRTOS\src/tasks.c **** 			}
 1017              		.loc 1 1430 0
 1018 0064 0120     		movs	r0, #1
 1019              	.LVL111:
1435:FreeRTOS\src/tasks.c **** 
 1020              		.loc 1 1435 0
 1021 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1022              	.LVL112:
 1023              	.L85:
 1024              		.align	2
 1025              	.L84:
 1026 0068 00000000 		.word	.LANCHOR0
 1027 006c D8020000 		.word	.LANCHOR0+728
 1028              		.cfi_endproc
 1029              	.LFE11:
 1030              		.size	eTaskGetState, .-eTaskGetState
 1031              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1032              		.align	2
 1033              		.global	uxTaskPriorityGet
 1034              		.thumb
 1035              		.thumb_func
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 110


 1036              		.type	uxTaskPriorityGet, %function
 1037              	uxTaskPriorityGet:
 1038              	.LFB12:
1443:FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
 1039              		.loc 1 1443 0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043              	.LVL113:
 1044 0000 10B5     		push	{r4, lr}
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 4, -8
 1047              		.cfi_offset 14, -4
 1048 0002 0446     		mov	r4, r0
1447:FreeRTOS\src/tasks.c **** 		{
 1049              		.loc 1 1447 0
 1050 0004 FFF7FEFF 		bl	vPortEnterCritical
 1051              	.LVL114:
1451:FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1052              		.loc 1 1451 0
 1053 0008 14B9     		cbnz	r4, .L87
1451:FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1054              		.loc 1 1451 0 is_stmt 0 discriminator 1
 1055 000a 044B     		ldr	r3, .L90
 1056 000c D3F8F442 		ldr	r4, [r3, #756]
 1057              	.LVL115:
 1058              	.L87:
1452:FreeRTOS\src/tasks.c **** 		}
 1059              		.loc 1 1452 0 is_stmt 1 discriminator 4
 1060 0010 E46A     		ldr	r4, [r4, #44]
 1061              	.LVL116:
1454:FreeRTOS\src/tasks.c **** 
 1062              		.loc 1 1454 0 discriminator 4
 1063 0012 FFF7FEFF 		bl	vPortExitCritical
 1064              	.LVL117:
1457:FreeRTOS\src/tasks.c **** 
 1065              		.loc 1 1457 0 discriminator 4
 1066 0016 2046     		mov	r0, r4
 1067 0018 10BD     		pop	{r4, pc}
 1068              	.LVL118:
 1069              	.L91:
 1070 001a 00BF     		.align	2
 1071              	.L90:
 1072 001c 00000000 		.word	.LANCHOR0
 1073              		.cfi_endproc
 1074              	.LFE12:
 1075              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1076              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1077              		.align	2
 1078              		.global	uxTaskPriorityGetFromISR
 1079              		.thumb
 1080              		.thumb_func
 1081              		.type	uxTaskPriorityGetFromISR, %function
 1082              	uxTaskPriorityGetFromISR:
 1083              	.LFB13:
1465:FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
 1084              		.loc 1 1465 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 111


 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088              		@ link register save eliminated.
 1089              	.LVL119:
 1090              	.LBB28:
 1091              	.LBB29:
 1092              		.file 2 ".\\FreeRTOS\\include/portmacro.h"
   1:.\FreeRTOS\include/portmacro.h **** /*
   2:.\FreeRTOS\include/portmacro.h ****  * FreeRTOS Kernel V10.1.1
   3:.\FreeRTOS\include/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.\FreeRTOS\include/portmacro.h ****  *
   5:.\FreeRTOS\include/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.\FreeRTOS\include/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:.\FreeRTOS\include/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:.\FreeRTOS\include/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.\FreeRTOS\include/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.\FreeRTOS\include/portmacro.h ****  * subject to the following conditions:
  11:.\FreeRTOS\include/portmacro.h ****  *
  12:.\FreeRTOS\include/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:.\FreeRTOS\include/portmacro.h ****  * copies or substantial portions of the Software.
  14:.\FreeRTOS\include/portmacro.h ****  *
  15:.\FreeRTOS\include/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.\FreeRTOS\include/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:.\FreeRTOS\include/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.\FreeRTOS\include/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:.\FreeRTOS\include/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.\FreeRTOS\include/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.\FreeRTOS\include/portmacro.h ****  *
  22:.\FreeRTOS\include/portmacro.h ****  * http://www.FreeRTOS.org
  23:.\FreeRTOS\include/portmacro.h ****  * http://aws.amazon.com/freertos
  24:.\FreeRTOS\include/portmacro.h ****  *
  25:.\FreeRTOS\include/portmacro.h ****  * 1 tab == 4 spaces!
  26:.\FreeRTOS\include/portmacro.h ****  */
  27:.\FreeRTOS\include/portmacro.h **** 
  28:.\FreeRTOS\include/portmacro.h **** 
  29:.\FreeRTOS\include/portmacro.h **** #ifndef PORTMACRO_H
  30:.\FreeRTOS\include/portmacro.h **** #define PORTMACRO_H
  31:.\FreeRTOS\include/portmacro.h **** 
  32:.\FreeRTOS\include/portmacro.h **** #ifdef __cplusplus
  33:.\FreeRTOS\include/portmacro.h **** extern "C" {
  34:.\FreeRTOS\include/portmacro.h **** #endif
  35:.\FreeRTOS\include/portmacro.h **** 
  36:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------
  37:.\FreeRTOS\include/portmacro.h ****  * Port specific definitions.
  38:.\FreeRTOS\include/portmacro.h ****  *
  39:.\FreeRTOS\include/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:.\FreeRTOS\include/portmacro.h ****  * given hardware and compiler.
  41:.\FreeRTOS\include/portmacro.h ****  *
  42:.\FreeRTOS\include/portmacro.h ****  * These settings should not be altered.
  43:.\FreeRTOS\include/portmacro.h ****  *-----------------------------------------------------------
  44:.\FreeRTOS\include/portmacro.h ****  */
  45:.\FreeRTOS\include/portmacro.h **** 
  46:.\FreeRTOS\include/portmacro.h **** /* Type definitions. */
  47:.\FreeRTOS\include/portmacro.h **** #define portCHAR		char
  48:.\FreeRTOS\include/portmacro.h **** #define portFLOAT		float
  49:.\FreeRTOS\include/portmacro.h **** #define portDOUBLE		double
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 112


  50:.\FreeRTOS\include/portmacro.h **** #define portLONG		long
  51:.\FreeRTOS\include/portmacro.h **** #define portSHORT		short
  52:.\FreeRTOS\include/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:.\FreeRTOS\include/portmacro.h **** #define portBASE_TYPE	long
  54:.\FreeRTOS\include/portmacro.h **** 
  55:.\FreeRTOS\include/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:.\FreeRTOS\include/portmacro.h **** typedef long BaseType_t;
  57:.\FreeRTOS\include/portmacro.h **** typedef unsigned long UBaseType_t;
  58:.\FreeRTOS\include/portmacro.h **** 
  59:.\FreeRTOS\include/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:.\FreeRTOS\include/portmacro.h **** 	typedef uint16_t TickType_t;
  61:.\FreeRTOS\include/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:.\FreeRTOS\include/portmacro.h **** #else
  63:.\FreeRTOS\include/portmacro.h **** 	typedef uint32_t TickType_t;
  64:.\FreeRTOS\include/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:.\FreeRTOS\include/portmacro.h **** 
  66:.\FreeRTOS\include/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:.\FreeRTOS\include/portmacro.h **** 	not need to be guarded with a critical section. */
  68:.\FreeRTOS\include/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:.\FreeRTOS\include/portmacro.h **** #endif
  70:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  71:.\FreeRTOS\include/portmacro.h **** 
  72:.\FreeRTOS\include/portmacro.h **** /* Architecture specifics. */
  73:.\FreeRTOS\include/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:.\FreeRTOS\include/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:.\FreeRTOS\include/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  77:.\FreeRTOS\include/portmacro.h **** 
  78:.\FreeRTOS\include/portmacro.h **** /* Scheduler utilities. */
  79:.\FreeRTOS\include/portmacro.h **** #define portYIELD() 															\
  80:.\FreeRTOS\include/portmacro.h **** {																				\
  81:.\FreeRTOS\include/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:.\FreeRTOS\include/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:.\FreeRTOS\include/portmacro.h **** 																				\
  84:.\FreeRTOS\include/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:.\FreeRTOS\include/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:.\FreeRTOS\include/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:.\FreeRTOS\include/portmacro.h **** 	__asm volatile( "isb" );													\
  88:.\FreeRTOS\include/portmacro.h **** }
  89:.\FreeRTOS\include/portmacro.h **** 
  90:.\FreeRTOS\include/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:.\FreeRTOS\include/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:.\FreeRTOS\include/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:.\FreeRTOS\include/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  95:.\FreeRTOS\include/portmacro.h **** 
  96:.\FreeRTOS\include/portmacro.h **** /* Critical section management. */
  97:.\FreeRTOS\include/portmacro.h **** extern void vPortEnterCritical( void );
  98:.\FreeRTOS\include/portmacro.h **** extern void vPortExitCritical( void );
  99:.\FreeRTOS\include/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:.\FreeRTOS\include/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:.\FreeRTOS\include/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:.\FreeRTOS\include/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:.\FreeRTOS\include/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:.\FreeRTOS\include/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:.\FreeRTOS\include/portmacro.h **** 
 106:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 113


 107:.\FreeRTOS\include/portmacro.h **** 
 108:.\FreeRTOS\include/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:.\FreeRTOS\include/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:.\FreeRTOS\include/portmacro.h **** (which build with all the ports) will build. */
 111:.\FreeRTOS\include/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:.\FreeRTOS\include/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 114:.\FreeRTOS\include/portmacro.h **** 
 115:.\FreeRTOS\include/portmacro.h **** /* Tickless idle/low power functionality. */
 116:.\FreeRTOS\include/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:.\FreeRTOS\include/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:.\FreeRTOS\include/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:.\FreeRTOS\include/portmacro.h **** #endif
 120:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 121:.\FreeRTOS\include/portmacro.h **** 
 122:.\FreeRTOS\include/portmacro.h **** /* Architecture specific optimisations. */
 123:.\FreeRTOS\include/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:.\FreeRTOS\include/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:.\FreeRTOS\include/portmacro.h **** #endif
 126:.\FreeRTOS\include/portmacro.h **** 
 127:.\FreeRTOS\include/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:.\FreeRTOS\include/portmacro.h **** 
 129:.\FreeRTOS\include/portmacro.h **** 	/* Generic helper function. */
 130:.\FreeRTOS\include/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:.\FreeRTOS\include/portmacro.h **** 	{
 132:.\FreeRTOS\include/portmacro.h **** 	uint8_t ucReturn;
 133:.\FreeRTOS\include/portmacro.h **** 
 134:.\FreeRTOS\include/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:.\FreeRTOS\include/portmacro.h **** 		return ucReturn;
 136:.\FreeRTOS\include/portmacro.h **** 	}
 137:.\FreeRTOS\include/portmacro.h **** 
 138:.\FreeRTOS\include/portmacro.h **** 	/* Check the configuration. */
 139:.\FreeRTOS\include/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:.\FreeRTOS\include/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:.\FreeRTOS\include/portmacro.h **** 	#endif
 142:.\FreeRTOS\include/portmacro.h **** 
 143:.\FreeRTOS\include/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:.\FreeRTOS\include/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:.\FreeRTOS\include/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:.\FreeRTOS\include/portmacro.h **** 
 147:.\FreeRTOS\include/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:.\FreeRTOS\include/portmacro.h **** 
 149:.\FreeRTOS\include/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:.\FreeRTOS\include/portmacro.h **** 
 151:.\FreeRTOS\include/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:.\FreeRTOS\include/portmacro.h **** 
 153:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 154:.\FreeRTOS\include/portmacro.h **** 
 155:.\FreeRTOS\include/portmacro.h **** #ifdef configASSERT
 156:.\FreeRTOS\include/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:.\FreeRTOS\include/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:.\FreeRTOS\include/portmacro.h **** #endif
 159:.\FreeRTOS\include/portmacro.h **** 
 160:.\FreeRTOS\include/portmacro.h **** /* portNOP() is not required by this port. */
 161:.\FreeRTOS\include/portmacro.h **** #define portNOP()
 162:.\FreeRTOS\include/portmacro.h **** 
 163:.\FreeRTOS\include/portmacro.h **** #define portINLINE	__inline
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 114


 164:.\FreeRTOS\include/portmacro.h **** 
 165:.\FreeRTOS\include/portmacro.h **** #ifndef portFORCE_INLINE
 166:.\FreeRTOS\include/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:.\FreeRTOS\include/portmacro.h **** #endif
 168:.\FreeRTOS\include/portmacro.h **** 
 169:.\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:.\FreeRTOS\include/portmacro.h **** {
 171:.\FreeRTOS\include/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:.\FreeRTOS\include/portmacro.h **** BaseType_t xReturn;
 173:.\FreeRTOS\include/portmacro.h **** 
 174:.\FreeRTOS\include/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:.\FreeRTOS\include/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:.\FreeRTOS\include/portmacro.h **** 
 177:.\FreeRTOS\include/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:.\FreeRTOS\include/portmacro.h **** 	{
 179:.\FreeRTOS\include/portmacro.h **** 		xReturn = pdFALSE;
 180:.\FreeRTOS\include/portmacro.h **** 	}
 181:.\FreeRTOS\include/portmacro.h **** 	else
 182:.\FreeRTOS\include/portmacro.h **** 	{
 183:.\FreeRTOS\include/portmacro.h **** 		xReturn = pdTRUE;
 184:.\FreeRTOS\include/portmacro.h **** 	}
 185:.\FreeRTOS\include/portmacro.h **** 
 186:.\FreeRTOS\include/portmacro.h **** 	return xReturn;
 187:.\FreeRTOS\include/portmacro.h **** }
 188:.\FreeRTOS\include/portmacro.h **** 
 189:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 190:.\FreeRTOS\include/portmacro.h **** 
 191:.\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:.\FreeRTOS\include/portmacro.h **** {
 193:.\FreeRTOS\include/portmacro.h **** uint32_t ulNewBASEPRI;
 194:.\FreeRTOS\include/portmacro.h **** 
 195:.\FreeRTOS\include/portmacro.h **** 	__asm volatile
 196:.\FreeRTOS\include/portmacro.h **** 	(
 197:.\FreeRTOS\include/portmacro.h **** 		"	mov %0, %1												\n" \
 198:.\FreeRTOS\include/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:.\FreeRTOS\include/portmacro.h **** 		"	isb														\n" \
 200:.\FreeRTOS\include/portmacro.h **** 		"	dsb														\n" \
 201:.\FreeRTOS\include/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:.\FreeRTOS\include/portmacro.h **** 	);
 203:.\FreeRTOS\include/portmacro.h **** }
 204:.\FreeRTOS\include/portmacro.h **** 
 205:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 206:.\FreeRTOS\include/portmacro.h **** 
 207:.\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:.\FreeRTOS\include/portmacro.h **** {
 209:.\FreeRTOS\include/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:.\FreeRTOS\include/portmacro.h **** 
 211:.\FreeRTOS\include/portmacro.h **** 	__asm volatile
 1093              		.loc 2 211 0
 1094              		.syntax unified
 1095              	@ 211 ".\FreeRTOS\include/portmacro.h" 1
 1096 0000 EFF31183 			mrs r3, basepri											
 1097 0004 4FF0A002 		mov r2, #160												
 1098 0008 82F31188 		msr basepri, r2											
 1099 000c BFF36F8F 		isb														
 1100 0010 BFF34F8F 		dsb														
 1101              	
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 115


 1102              	@ 0 "" 2
 1103              		.thumb
 1104              		.syntax unified
 1105              	.LBE29:
 1106              	.LBE28:
1491:FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1107              		.loc 1 1491 0
 1108 0014 10B9     		cbnz	r0, .L93
1491:FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1109              		.loc 1 1491 0 is_stmt 0 discriminator 1
 1110 0016 034A     		ldr	r2, .L95
 1111 0018 D2F8F402 		ldr	r0, [r2, #756]
 1112              	.LVL120:
 1113              	.L93:
1492:FreeRTOS\src/tasks.c **** 		}
 1114              		.loc 1 1492 0 is_stmt 1 discriminator 4
 1115 001c C06A     		ldr	r0, [r0, #44]
 1116              	.LVL121:
 1117              	.LBB30:
 1118              	.LBB31:
 212:.\FreeRTOS\include/portmacro.h **** 	(
 213:.\FreeRTOS\include/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:.\FreeRTOS\include/portmacro.h **** 		"	mov %1, %2												\n" \
 215:.\FreeRTOS\include/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:.\FreeRTOS\include/portmacro.h **** 		"	isb														\n" \
 217:.\FreeRTOS\include/portmacro.h **** 		"	dsb														\n" \
 218:.\FreeRTOS\include/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:.\FreeRTOS\include/portmacro.h **** 	);
 220:.\FreeRTOS\include/portmacro.h **** 
 221:.\FreeRTOS\include/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:.\FreeRTOS\include/portmacro.h **** 	warnings. */
 223:.\FreeRTOS\include/portmacro.h **** 	return ulOriginalBASEPRI;
 224:.\FreeRTOS\include/portmacro.h **** }
 225:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 226:.\FreeRTOS\include/portmacro.h **** 
 227:.\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:.\FreeRTOS\include/portmacro.h **** {
 229:.\FreeRTOS\include/portmacro.h **** 	__asm volatile
 1119              		.loc 2 229 0 discriminator 4
 1120              		.syntax unified
 1121              	@ 229 ".\FreeRTOS\include/portmacro.h" 1
 1122 001e 83F31188 			msr basepri, r3	
 1123              	@ 0 "" 2
 1124              	.LVL122:
 1125              		.thumb
 1126              		.syntax unified
 1127              	.LBE31:
 1128              	.LBE30:
1497:FreeRTOS\src/tasks.c **** 
 1129              		.loc 1 1497 0 discriminator 4
 1130 0022 7047     		bx	lr
 1131              	.L96:
 1132              		.align	2
 1133              	.L95:
 1134 0024 00000000 		.word	.LANCHOR0
 1135              		.cfi_endproc
 1136              	.LFE13:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 116


 1137              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1138              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1139              		.align	2
 1140              		.global	vTaskPrioritySet
 1141              		.thumb
 1142              		.thumb_func
 1143              		.type	vTaskPrioritySet, %function
 1144              	vTaskPrioritySet:
 1145              	.LFB14:
1505:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 1146              		.loc 1 1505 0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 0
 1149              		@ frame_needed = 0, uses_anonymous_args = 0
 1150              	.LVL123:
 1151 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1152              		.cfi_def_cfa_offset 24
 1153              		.cfi_offset 3, -24
 1154              		.cfi_offset 4, -20
 1155              		.cfi_offset 5, -16
 1156              		.cfi_offset 6, -12
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 1159 0002 0446     		mov	r4, r0
 1160 0004 0D46     		mov	r5, r1
 1161              	.LVL124:
1513:FreeRTOS\src/tasks.c **** 		{
 1162              		.loc 1 1513 0
 1163 0006 1F29     		cmp	r1, #31
 1164 0008 00D9     		bls	.L98
1515:FreeRTOS\src/tasks.c **** 		}
 1165              		.loc 1 1515 0
 1166 000a 1F25     		movs	r5, #31
 1167              	.L98:
 1168              	.LVL125:
1522:FreeRTOS\src/tasks.c **** 		{
 1169              		.loc 1 1522 0
 1170 000c FFF7FEFF 		bl	vPortEnterCritical
 1171              	.LVL126:
1526:FreeRTOS\src/tasks.c **** 
 1172              		.loc 1 1526 0
 1173 0010 14B9     		cbnz	r4, .L99
1526:FreeRTOS\src/tasks.c **** 
 1174              		.loc 1 1526 0 is_stmt 0 discriminator 1
 1175 0012 304B     		ldr	r3, .L112
 1176 0014 D3F8F442 		ldr	r4, [r3, #756]
 1177              	.LVL127:
 1178              	.L99:
1532:FreeRTOS\src/tasks.c **** 			}
 1179              		.loc 1 1532 0 is_stmt 1 discriminator 4
 1180 0018 236C     		ldr	r3, [r4, #64]
 1181              	.LVL128:
1540:FreeRTOS\src/tasks.c **** 			{
 1182              		.loc 1 1540 0 discriminator 4
 1183 001a 9D42     		cmp	r5, r3
 1184 001c 56D0     		beq	.L100
1544:FreeRTOS\src/tasks.c **** 				{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 117


 1185              		.loc 1 1544 0
 1186 001e 0CD9     		bls	.L101
1546:FreeRTOS\src/tasks.c **** 					{
 1187              		.loc 1 1546 0
 1188 0020 2C4A     		ldr	r2, .L112
 1189 0022 D2F8F422 		ldr	r2, [r2, #756]
 1190 0026 9442     		cmp	r4, r2
 1191 0028 0ED0     		beq	.L108
1551:FreeRTOS\src/tasks.c **** 						{
 1192              		.loc 1 1551 0
 1193 002a 2A4A     		ldr	r2, .L112
 1194 002c D2F8F422 		ldr	r2, [r2, #756]
 1195 0030 D26A     		ldr	r2, [r2, #44]
 1196 0032 9542     		cmp	r5, r2
 1197 0034 0AD2     		bcs	.L109
1508:FreeRTOS\src/tasks.c **** 
 1198              		.loc 1 1508 0
 1199 0036 0027     		movs	r7, #0
 1200 0038 0BE0     		b	.L102
 1201              	.L101:
1567:FreeRTOS\src/tasks.c **** 				{
 1202              		.loc 1 1567 0
 1203 003a 264A     		ldr	r2, .L112
 1204 003c D2F8F422 		ldr	r2, [r2, #756]
 1205 0040 9442     		cmp	r4, r2
 1206 0042 05D0     		beq	.L110
1508:FreeRTOS\src/tasks.c **** 
 1207              		.loc 1 1508 0
 1208 0044 0027     		movs	r7, #0
 1209 0046 04E0     		b	.L102
 1210              	.L108:
 1211 0048 0027     		movs	r7, #0
 1212 004a 02E0     		b	.L102
 1213              	.L109:
1553:FreeRTOS\src/tasks.c **** 						}
 1214              		.loc 1 1553 0
 1215 004c 0127     		movs	r7, #1
 1216 004e 00E0     		b	.L102
 1217              	.L110:
1572:FreeRTOS\src/tasks.c **** 				}
 1218              		.loc 1 1572 0
 1219 0050 0127     		movs	r7, #1
 1220              	.L102:
 1221              	.LVL129:
1584:FreeRTOS\src/tasks.c **** 
 1222              		.loc 1 1584 0
 1223 0052 E66A     		ldr	r6, [r4, #44]
 1224              	.LVL130:
1590:FreeRTOS\src/tasks.c **** 					{
 1225              		.loc 1 1590 0
 1226 0054 B342     		cmp	r3, r6
 1227 0056 00D1     		bne	.L103
1592:FreeRTOS\src/tasks.c **** 					}
 1228              		.loc 1 1592 0
 1229 0058 E562     		str	r5, [r4, #44]
 1230              	.L103:
1600:FreeRTOS\src/tasks.c **** 				}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 118


 1231              		.loc 1 1600 0
 1232 005a 2564     		str	r5, [r4, #64]
1610:FreeRTOS\src/tasks.c **** 				{
 1233              		.loc 1 1610 0
 1234 005c A369     		ldr	r3, [r4, #24]
 1235              	.LVL131:
 1236 005e 002B     		cmp	r3, #0
 1237 0060 02DB     		blt	.L104
1612:FreeRTOS\src/tasks.c **** 				}
 1238              		.loc 1 1612 0
 1239 0062 C5F12005 		rsb	r5, r5, #32
 1240              	.LVL132:
 1241 0066 A561     		str	r5, [r4, #24]
 1242              	.L104:
1623:FreeRTOS\src/tasks.c **** 				{
 1243              		.loc 1 1623 0
 1244 0068 6169     		ldr	r1, [r4, #20]
 1245 006a 06EB8602 		add	r2, r6, r6, lsl #2
 1246 006e 9300     		lsls	r3, r2, #2
 1247 0070 194A     		ldr	r2, .L112+4
 1248 0072 1344     		add	r3, r3, r2
 1249 0074 9942     		cmp	r1, r3
 1250 0076 20D1     		bne	.L105
1628:FreeRTOS\src/tasks.c **** 					{
 1251              		.loc 1 1628 0
 1252 0078 251D     		adds	r5, r4, #4
 1253 007a 2846     		mov	r0, r5
 1254 007c FFF7FEFF 		bl	uxListRemove
 1255              	.LVL133:
 1256 0080 48B9     		cbnz	r0, .L106
1633:FreeRTOS\src/tasks.c **** 					}
 1257              		.loc 1 1633 0
 1258 0082 0123     		movs	r3, #1
 1259 0084 03FA06F6 		lsl	r6, r3, r6
 1260              	.LVL134:
 1261 0088 124A     		ldr	r2, .L112
 1262 008a D2F80033 		ldr	r3, [r2, #768]
 1263 008e 23EA0606 		bic	r6, r3, r6
 1264 0092 C2F80063 		str	r6, [r2, #768]
 1265              	.L106:
1639:FreeRTOS\src/tasks.c **** 				}
 1266              		.loc 1 1639 0
 1267 0096 E36A     		ldr	r3, [r4, #44]
 1268 0098 0122     		movs	r2, #1
 1269 009a 02FA03F1 		lsl	r1, r2, r3
 1270 009e 0D48     		ldr	r0, .L112
 1271 00a0 D0F80023 		ldr	r2, [r0, #768]
 1272 00a4 0A43     		orrs	r2, r2, r1
 1273 00a6 C0F80023 		str	r2, [r0, #768]
 1274 00aa 3030     		adds	r0, r0, #48
 1275 00ac 03EB8303 		add	r3, r3, r3, lsl #2
 1276 00b0 9A00     		lsls	r2, r3, #2
 1277 00b2 2946     		mov	r1, r5
 1278 00b4 1044     		add	r0, r0, r2
 1279 00b6 FFF7FEFF 		bl	vListInsertEnd
 1280              	.LVL135:
 1281              	.L105:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 119


1646:FreeRTOS\src/tasks.c **** 				{
 1282              		.loc 1 1646 0
 1283 00ba 3FB1     		cbz	r7, .L100
1648:FreeRTOS\src/tasks.c **** 				}
 1284              		.loc 1 1648 0
 1285 00bc 4FF08052 		mov	r2, #268435456
 1286 00c0 064B     		ldr	r3, .L112+8
 1287 00c2 1A60     		str	r2, [r3]
 1288              		.syntax unified
 1289              	@ 1648 "FreeRTOS\src\tasks.c" 1
 1290 00c4 BFF34F8F 		dsb
 1291              	@ 0 "" 2
 1292              	@ 1648 "FreeRTOS\src\tasks.c" 1
 1293 00c8 BFF36F8F 		isb
 1294              	@ 0 "" 2
 1295              	.LVL136:
 1296              		.thumb
 1297              		.syntax unified
 1298              	.L100:
1660:FreeRTOS\src/tasks.c **** 	}
 1299              		.loc 1 1660 0
 1300 00cc FFF7FEFF 		bl	vPortExitCritical
 1301              	.LVL137:
 1302 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1303              	.LVL138:
 1304              	.L113:
 1305 00d2 00BF     		.align	2
 1306              	.L112:
 1307 00d4 00000000 		.word	.LANCHOR0
 1308 00d8 30000000 		.word	.LANCHOR0+48
 1309 00dc 04ED00E0 		.word	-536810236
 1310              		.cfi_endproc
 1311              	.LFE14:
 1312              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1313              		.section	.text.vTaskResume,"ax",%progbits
 1314              		.align	2
 1315              		.global	vTaskResume
 1316              		.thumb
 1317              		.thumb_func
 1318              		.type	vTaskResume, %function
 1319              	vTaskResume:
 1320              	.LFB17:
1816:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1321              		.loc 1 1816 0
 1322              		.cfi_startproc
 1323              		@ args = 0, pretend = 0, frame = 0
 1324              		@ frame_needed = 0, uses_anonymous_args = 0
 1325              	.LVL139:
1824:FreeRTOS\src/tasks.c **** 		{
 1326              		.loc 1 1824 0
 1327 0000 1B4B     		ldr	r3, .L119
 1328 0002 D3F8F432 		ldr	r3, [r3, #756]
 1329 0006 9842     		cmp	r0, r3
 1330 0008 30D0     		beq	.L118
1824:FreeRTOS\src/tasks.c **** 		{
 1331              		.loc 1 1824 0 is_stmt 0 discriminator 1
 1332 000a 78B3     		cbz	r0, .L118
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 120


1816:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1333              		.loc 1 1816 0 is_stmt 1
 1334 000c 70B5     		push	{r4, r5, r6, lr}
 1335              		.cfi_def_cfa_offset 16
 1336              		.cfi_offset 4, -16
 1337              		.cfi_offset 5, -12
 1338              		.cfi_offset 6, -8
 1339              		.cfi_offset 14, -4
 1340 000e 0446     		mov	r4, r0
1826:FreeRTOS\src/tasks.c **** 			{
 1341              		.loc 1 1826 0
 1342 0010 FFF7FEFF 		bl	vPortEnterCritical
 1343              	.LVL140:
1828:FreeRTOS\src/tasks.c **** 				{
 1344              		.loc 1 1828 0
 1345 0014 2046     		mov	r0, r4
 1346 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1347              	.LVL141:
 1348 001a 20B3     		cbz	r0, .L116
1834:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1349              		.loc 1 1834 0
 1350 001c 261D     		adds	r6, r4, #4
 1351 001e 3046     		mov	r0, r6
 1352 0020 FFF7FEFF 		bl	uxListRemove
 1353              	.LVL142:
1835:FreeRTOS\src/tasks.c **** 
 1354              		.loc 1 1835 0
 1355 0024 E36A     		ldr	r3, [r4, #44]
 1356 0026 0122     		movs	r2, #1
 1357 0028 02FA03F1 		lsl	r1, r2, r3
 1358 002c 104D     		ldr	r5, .L119
 1359 002e D5F80023 		ldr	r2, [r5, #768]
 1360 0032 0A43     		orrs	r2, r2, r1
 1361 0034 C5F80023 		str	r2, [r5, #768]
 1362 0038 05F13000 		add	r0, r5, #48
 1363 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1364 0040 9A00     		lsls	r2, r3, #2
 1365 0042 3146     		mov	r1, r6
 1366 0044 1044     		add	r0, r0, r2
 1367 0046 FFF7FEFF 		bl	vListInsertEnd
 1368              	.LVL143:
1838:FreeRTOS\src/tasks.c **** 					{
 1369              		.loc 1 1838 0
 1370 004a E26A     		ldr	r2, [r4, #44]
 1371 004c D5F8F432 		ldr	r3, [r5, #756]
 1372 0050 DB6A     		ldr	r3, [r3, #44]
 1373 0052 9A42     		cmp	r2, r3
 1374 0054 07D3     		bcc	.L116
1843:FreeRTOS\src/tasks.c **** 					}
 1375              		.loc 1 1843 0
 1376 0056 4FF08052 		mov	r2, #268435456
 1377 005a 064B     		ldr	r3, .L119+4
 1378 005c 1A60     		str	r2, [r3]
 1379              		.syntax unified
 1380              	@ 1843 "FreeRTOS\src\tasks.c" 1
 1381 005e BFF34F8F 		dsb
 1382              	@ 0 "" 2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 121


 1383              	@ 1843 "FreeRTOS\src\tasks.c" 1
 1384 0062 BFF36F8F 		isb
 1385              	@ 0 "" 2
 1386              		.thumb
 1387              		.syntax unified
 1388              	.L116:
1855:FreeRTOS\src/tasks.c **** 		}
 1389              		.loc 1 1855 0
 1390 0066 FFF7FEFF 		bl	vPortExitCritical
 1391              	.LVL144:
 1392 006a 70BD     		pop	{r4, r5, r6, pc}
 1393              	.LVL145:
 1394              	.L118:
 1395              		.cfi_def_cfa_offset 0
 1396              		.cfi_restore 4
 1397              		.cfi_restore 5
 1398              		.cfi_restore 6
 1399              		.cfi_restore 14
 1400 006c 7047     		bx	lr
 1401              	.L120:
 1402 006e 00BF     		.align	2
 1403              	.L119:
 1404 0070 00000000 		.word	.LANCHOR0
 1405 0074 04ED00E0 		.word	-536810236
 1406              		.cfi_endproc
 1407              	.LFE17:
 1408              		.size	vTaskResume, .-vTaskResume
 1409              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1410              		.align	2
 1411              		.global	xTaskResumeFromISR
 1412              		.thumb
 1413              		.thumb_func
 1414              		.type	xTaskResumeFromISR, %function
 1415              	xTaskResumeFromISR:
 1416              	.LFB18:
1870:FreeRTOS\src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1417              		.loc 1 1870 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 0, uses_anonymous_args = 0
 1421              	.LVL146:
 1422 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1423              		.cfi_def_cfa_offset 24
 1424              		.cfi_offset 3, -24
 1425              		.cfi_offset 4, -20
 1426              		.cfi_offset 5, -16
 1427              		.cfi_offset 6, -12
 1428              		.cfi_offset 7, -8
 1429              		.cfi_offset 14, -4
 1430 0002 0446     		mov	r4, r0
 1431              	.LVL147:
 1432              	.LBB32:
 1433              	.LBB33:
 211:.\FreeRTOS\include/portmacro.h **** 	(
 1434              		.loc 2 211 0
 1435              		.syntax unified
 1436              	@ 211 ".\FreeRTOS\include/portmacro.h" 1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 122


 1437 0004 EFF31185 			mrs r5, basepri											
 1438 0008 4FF0A003 		mov r3, #160												
 1439 000c 83F31188 		msr basepri, r3											
 1440 0010 BFF36F8F 		isb														
 1441 0014 BFF34F8F 		dsb														
 1442              	
 1443              	@ 0 "" 2
 1444              		.thumb
 1445              		.syntax unified
 1446              	.LBE33:
 1447              	.LBE32:
1897:FreeRTOS\src/tasks.c **** 			{
 1448              		.loc 1 1897 0
 1449 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1450              	.LVL148:
 1451 001c 58B3     		cbz	r0, .L125
1902:FreeRTOS\src/tasks.c **** 				{
 1452              		.loc 1 1902 0
 1453 001e 184B     		ldr	r3, .L128
 1454 0020 D3F80C33 		ldr	r3, [r3, #780]
 1455 0024 03BB     		cbnz	r3, .L123
1906:FreeRTOS\src/tasks.c **** 					{
 1456              		.loc 1 1906 0
 1457 0026 E26A     		ldr	r2, [r4, #44]
 1458 0028 154B     		ldr	r3, .L128
 1459 002a D3F8F432 		ldr	r3, [r3, #756]
 1460 002e DB6A     		ldr	r3, [r3, #44]
 1461 0030 9A42     		cmp	r2, r3
 1462 0032 01D2     		bcs	.L126
1871:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1463              		.loc 1 1871 0
 1464 0034 0026     		movs	r6, #0
 1465 0036 00E0     		b	.L124
 1466              	.L126:
1908:FreeRTOS\src/tasks.c **** 					}
 1467              		.loc 1 1908 0
 1468 0038 0126     		movs	r6, #1
 1469              	.L124:
 1470              	.LVL149:
1915:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1471              		.loc 1 1915 0
 1472 003a 271D     		adds	r7, r4, #4
 1473 003c 3846     		mov	r0, r7
 1474 003e FFF7FEFF 		bl	uxListRemove
 1475              	.LVL150:
1916:FreeRTOS\src/tasks.c **** 				}
 1476              		.loc 1 1916 0
 1477 0042 E36A     		ldr	r3, [r4, #44]
 1478 0044 0122     		movs	r2, #1
 1479 0046 02FA03F1 		lsl	r1, r2, r3
 1480 004a 0D48     		ldr	r0, .L128
 1481 004c D0F80023 		ldr	r2, [r0, #768]
 1482 0050 0A43     		orrs	r2, r2, r1
 1483 0052 C0F80023 		str	r2, [r0, #768]
 1484 0056 3030     		adds	r0, r0, #48
 1485 0058 03EB8303 		add	r3, r3, r3, lsl #2
 1486 005c 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 123


 1487 005e 3946     		mov	r1, r7
 1488 0060 1044     		add	r0, r0, r2
 1489 0062 FFF7FEFF 		bl	vListInsertEnd
 1490              	.LVL151:
 1491 0066 07E0     		b	.L122
 1492              	.LVL152:
 1493              	.L123:
1923:FreeRTOS\src/tasks.c **** 				}
 1494              		.loc 1 1923 0
 1495 0068 04F11801 		add	r1, r4, #24
 1496 006c 0548     		ldr	r0, .L128+4
 1497 006e FFF7FEFF 		bl	vListInsertEnd
 1498              	.LVL153:
1871:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1499              		.loc 1 1871 0
 1500 0072 0026     		movs	r6, #0
 1501 0074 00E0     		b	.L122
 1502              	.L125:
 1503 0076 0026     		movs	r6, #0
 1504              	.LVL154:
 1505              	.L122:
 1506              	.LBB34:
 1507              	.LBB35:
 1508              		.loc 2 229 0
 1509              		.syntax unified
 1510              	@ 229 ".\FreeRTOS\include/portmacro.h" 1
 1511 0078 85F31188 			msr basepri, r5	
 1512              	@ 0 "" 2
 1513              	.LVL155:
 1514              		.thumb
 1515              		.syntax unified
 1516              	.LBE35:
 1517              	.LBE34:
1934:FreeRTOS\src/tasks.c **** 
 1518              		.loc 1 1934 0
 1519 007c 3046     		mov	r0, r6
 1520 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1521              	.LVL156:
 1522              	.L129:
 1523              		.align	2
 1524              	.L128:
 1525 0080 00000000 		.word	.LANCHOR0
 1526 0084 14000000 		.word	.LANCHOR0+20
 1527              		.cfi_endproc
 1528              	.LFE18:
 1529              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1530              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1531              		.align	2
 1532              		.global	vTaskStartScheduler
 1533              		.thumb
 1534              		.thumb_func
 1535              		.type	vTaskStartScheduler, %function
 1536              	vTaskStartScheduler:
 1537              	.LFB19:
1940:FreeRTOS\src/tasks.c **** BaseType_t xReturn;
 1538              		.loc 1 1940 0
 1539              		.cfi_startproc
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 124


 1540              		@ args = 0, pretend = 0, frame = 0
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 1542 0000 00B5     		push	{lr}
 1543              		.cfi_def_cfa_offset 4
 1544              		.cfi_offset 14, -4
 1545 0002 83B0     		sub	sp, sp, #12
 1546              		.cfi_def_cfa_offset 16
1973:FreeRTOS\src/tasks.c **** 								configIDLE_TASK_NAME,
 1547              		.loc 1 1973 0
 1548 0004 124B     		ldr	r3, .L134
 1549 0006 0193     		str	r3, [sp, #4]
 1550 0008 0023     		movs	r3, #0
 1551 000a 0093     		str	r3, [sp]
 1552 000c 6422     		movs	r2, #100
 1553 000e 1149     		ldr	r1, .L134+4
 1554 0010 1148     		ldr	r0, .L134+8
 1555 0012 FFF7FEFF 		bl	xTaskCreate
 1556              	.LVL157:
1984:FreeRTOS\src/tasks.c **** 		{
 1557              		.loc 1 1984 0
 1558 0016 0128     		cmp	r0, #1
 1559 0018 01D1     		bne	.L131
1986:FreeRTOS\src/tasks.c **** 		}
 1560              		.loc 1 1986 0
 1561 001a FFF7FEFF 		bl	xTimerCreateTimerTask
 1562              	.LVL158:
 1563              	.L131:
1995:FreeRTOS\src/tasks.c **** 	{
 1564              		.loc 1 1995 0
 1565 001e 0128     		cmp	r0, #1
 1566 0020 13D1     		bne	.L130
 1567              	.LBB36:
 1568              	.LBB37:
 195:.\FreeRTOS\include/portmacro.h **** 	(
 1569              		.loc 2 195 0
 1570              		.syntax unified
 1571              	@ 195 ".\FreeRTOS\include/portmacro.h" 1
 1572 0022 4FF0A003 			mov r3, #160												
 1573 0026 83F31188 		msr basepri, r3											
 1574 002a BFF36F8F 		isb														
 1575 002e BFF34F8F 		dsb														
 1576              	
 1577              	@ 0 "" 2
 1578              		.thumb
 1579              		.syntax unified
 1580              	.LBE37:
 1581              	.LBE36:
2021:FreeRTOS\src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1582              		.loc 1 2021 0
 1583 0032 0A4B     		ldr	r3, .L134+12
 1584 0034 4FF0FF32 		mov	r2, #-1
 1585 0038 DA62     		str	r2, [r3, #44]
2022:FreeRTOS\src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1586              		.loc 1 2022 0
 1587 003a 0122     		movs	r2, #1
 1588 003c C3F8F822 		str	r2, [r3, #760]
2023:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 125


 1589              		.loc 1 2023 0
 1590 0040 0022     		movs	r2, #0
 1591 0042 C3F80823 		str	r2, [r3, #776]
2037:FreeRTOS\src/tasks.c **** 		{
 1592              		.loc 1 2037 0
 1593 0046 FFF7FEFF 		bl	xPortStartScheduler
 1594              	.LVL159:
 1595              	.L130:
2058:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1596              		.loc 1 2058 0
 1597 004a 03B0     		add	sp, sp, #12
 1598              		.cfi_def_cfa_offset 4
 1599              		@ sp needed
 1600 004c 5DF804FB 		ldr	pc, [sp], #4
 1601              	.L135:
 1602              		.align	2
 1603              	.L134:
 1604 0050 10030000 		.word	.LANCHOR0+784
 1605 0054 00000000 		.word	.LC0
 1606 0058 00000000 		.word	prvIdleTask
 1607 005c 00000000 		.word	.LANCHOR0
 1608              		.cfi_endproc
 1609              	.LFE19:
 1610              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1611              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1612              		.align	2
 1613              		.global	vTaskEndScheduler
 1614              		.thumb
 1615              		.thumb_func
 1616              		.type	vTaskEndScheduler, %function
 1617              	vTaskEndScheduler:
 1618              	.LFB20:
2062:FreeRTOS\src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1619              		.loc 1 2062 0
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 0
 1622              		@ frame_needed = 0, uses_anonymous_args = 0
 1623 0000 08B5     		push	{r3, lr}
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 3, -8
 1626              		.cfi_offset 14, -4
 1627              	.LBB38:
 1628              	.LBB39:
 195:.\FreeRTOS\include/portmacro.h **** 	(
 1629              		.loc 2 195 0
 1630              		.syntax unified
 1631              	@ 195 ".\FreeRTOS\include/portmacro.h" 1
 1632 0002 4FF0A003 			mov r3, #160												
 1633 0006 83F31188 		msr basepri, r3											
 1634 000a BFF36F8F 		isb														
 1635 000e BFF34F8F 		dsb														
 1636              	
 1637              	@ 0 "" 2
 1638              		.thumb
 1639              		.syntax unified
 1640              	.LBE39:
 1641              	.LBE38:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 126


2067:FreeRTOS\src/tasks.c **** 	vPortEndScheduler();
 1642              		.loc 1 2067 0
 1643 0012 0022     		movs	r2, #0
 1644 0014 024B     		ldr	r3, .L138
 1645 0016 C3F8F822 		str	r2, [r3, #760]
2068:FreeRTOS\src/tasks.c **** }
 1646              		.loc 1 2068 0
 1647 001a FFF7FEFF 		bl	vPortEndScheduler
 1648              	.LVL160:
 1649 001e 08BD     		pop	{r3, pc}
 1650              	.L139:
 1651              		.align	2
 1652              	.L138:
 1653 0020 00000000 		.word	.LANCHOR0
 1654              		.cfi_endproc
 1655              	.LFE20:
 1656              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1657              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1658              		.align	2
 1659              		.global	vTaskSuspendAll
 1660              		.thumb
 1661              		.thumb_func
 1662              		.type	vTaskSuspendAll, %function
 1663              	vTaskSuspendAll:
 1664              	.LFB21:
2073:FreeRTOS\src/tasks.c **** 	/* A critical section is not required as the variable is of type
 1665              		.loc 1 2073 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
2078:FreeRTOS\src/tasks.c **** }
 1670              		.loc 1 2078 0
 1671 0000 034A     		ldr	r2, .L141
 1672 0002 D2F80C33 		ldr	r3, [r2, #780]
 1673 0006 0133     		adds	r3, r3, #1
 1674 0008 C2F80C33 		str	r3, [r2, #780]
 1675 000c 7047     		bx	lr
 1676              	.L142:
 1677 000e 00BF     		.align	2
 1678              	.L141:
 1679 0010 00000000 		.word	.LANCHOR0
 1680              		.cfi_endproc
 1681              	.LFE21:
 1682              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1683              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1684              		.align	2
 1685              		.global	xTaskGetTickCount
 1686              		.thumb
 1687              		.thumb_func
 1688              		.type	xTaskGetTickCount, %function
 1689              	xTaskGetTickCount:
 1690              	.LFB23:
2256:FreeRTOS\src/tasks.c **** TickType_t xTicks;
 1691              		.loc 1 2256 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 127


 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 1695              		@ link register save eliminated.
2262:FreeRTOS\src/tasks.c **** 	}
 1696              		.loc 1 2262 0
 1697 0000 014B     		ldr	r3, .L144
 1698 0002 D3F80803 		ldr	r0, [r3, #776]
 1699              	.LVL161:
2267:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1700              		.loc 1 2267 0
 1701 0006 7047     		bx	lr
 1702              	.L145:
 1703              		.align	2
 1704              	.L144:
 1705 0008 00000000 		.word	.LANCHOR0
 1706              		.cfi_endproc
 1707              	.LFE23:
 1708              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1709              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1710              		.align	2
 1711              		.global	xTaskGetTickCountFromISR
 1712              		.thumb
 1713              		.thumb_func
 1714              		.type	xTaskGetTickCountFromISR, %function
 1715              	xTaskGetTickCountFromISR:
 1716              	.LFB24:
2271:FreeRTOS\src/tasks.c **** TickType_t xReturn;
 1717              		.loc 1 2271 0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 0
 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721              		@ link register save eliminated.
 1722              	.LVL162:
2293:FreeRTOS\src/tasks.c **** 	}
 1723              		.loc 1 2293 0
 1724 0000 014B     		ldr	r3, .L147
 1725 0002 D3F80803 		ldr	r0, [r3, #776]
 1726              	.LVL163:
2298:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1727              		.loc 1 2298 0
 1728 0006 7047     		bx	lr
 1729              	.L148:
 1730              		.align	2
 1731              	.L147:
 1732 0008 00000000 		.word	.LANCHOR0
 1733              		.cfi_endproc
 1734              	.LFE24:
 1735              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1736              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1737              		.align	2
 1738              		.global	uxTaskGetNumberOfTasks
 1739              		.thumb
 1740              		.thumb_func
 1741              		.type	uxTaskGetNumberOfTasks, %function
 1742              	uxTaskGetNumberOfTasks:
 1743              	.LFB25:
2302:FreeRTOS\src/tasks.c **** 	/* A critical section is not required because the variables are of type
 1744              		.loc 1 2302 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 128


 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 0
 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
2305:FreeRTOS\src/tasks.c **** }
 1749              		.loc 1 2305 0
 1750 0000 014B     		ldr	r3, .L150
 1751 0002 D3F8F002 		ldr	r0, [r3, #752]
2306:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1752              		.loc 1 2306 0
 1753 0006 7047     		bx	lr
 1754              	.L151:
 1755              		.align	2
 1756              	.L150:
 1757 0008 00000000 		.word	.LANCHOR0
 1758              		.cfi_endproc
 1759              	.LFE25:
 1760              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1761              		.section	.text.pcTaskGetName,"ax",%progbits
 1762              		.align	2
 1763              		.global	pcTaskGetName
 1764              		.thumb
 1765              		.thumb_func
 1766              		.type	pcTaskGetName, %function
 1767              	pcTaskGetName:
 1768              	.LFB26:
2310:FreeRTOS\src/tasks.c **** TCB_t *pxTCB;
 1769              		.loc 1 2310 0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 1773              		@ link register save eliminated.
 1774              	.LVL164:
2315:FreeRTOS\src/tasks.c **** 	configASSERT( pxTCB );
 1775              		.loc 1 2315 0
 1776 0000 0346     		mov	r3, r0
 1777 0002 10B9     		cbnz	r0, .L153
2315:FreeRTOS\src/tasks.c **** 	configASSERT( pxTCB );
 1778              		.loc 1 2315 0 is_stmt 0 discriminator 1
 1779 0004 024B     		ldr	r3, .L154
 1780 0006 D3F8F432 		ldr	r3, [r3, #756]
 1781              	.LVL165:
 1782              	.L153:
2318:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1783              		.loc 1 2318 0 is_stmt 1 discriminator 4
 1784 000a 03F13400 		add	r0, r3, #52
 1785 000e 7047     		bx	lr
 1786              	.L155:
 1787              		.align	2
 1788              	.L154:
 1789 0010 00000000 		.word	.LANCHOR0
 1790              		.cfi_endproc
 1791              	.LFE26:
 1792              		.size	pcTaskGetName, .-pcTaskGetName
 1793              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1794              		.align	2
 1795              		.global	xTaskIncrementTick
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 129


 1796              		.thumb
 1797              		.thumb_func
 1798              		.type	xTaskIncrementTick, %function
 1799              	xTaskIncrementTick:
 1800              	.LFB27:
2637:FreeRTOS\src/tasks.c **** TCB_t * pxTCB;
 1801              		.loc 1 2637 0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1806              		.cfi_def_cfa_offset 24
 1807              		.cfi_offset 4, -24
 1808              		.cfi_offset 5, -20
 1809              		.cfi_offset 6, -16
 1810              		.cfi_offset 7, -12
 1811              		.cfi_offset 8, -8
 1812              		.cfi_offset 14, -4
 1813              	.LVL166:
2646:FreeRTOS\src/tasks.c **** 	{
 1814              		.loc 1 2646 0
 1815 0004 3D4B     		ldr	r3, .L173
 1816 0006 D3F80C33 		ldr	r3, [r3, #780]
 1817 000a 002B     		cmp	r3, #0
 1818 000c 62D1     		bne	.L157
 1819              	.LBB40:
2650:FreeRTOS\src/tasks.c **** 
 1820              		.loc 1 2650 0
 1821 000e 3B4B     		ldr	r3, .L173
 1822 0010 D3F80873 		ldr	r7, [r3, #776]
 1823 0014 0137     		adds	r7, r7, #1
 1824              	.LVL167:
2654:FreeRTOS\src/tasks.c **** 
 1825              		.loc 1 2654 0
 1826 0016 C3F80873 		str	r7, [r3, #776]
2656:FreeRTOS\src/tasks.c **** 		{
 1827              		.loc 1 2656 0
 1828 001a 67B9     		cbnz	r7, .L158
 1829              	.LBB41:
2658:FreeRTOS\src/tasks.c **** 		}
 1830              		.loc 1 2658 0
 1831 001c 9A6A     		ldr	r2, [r3, #40]
 1832              	.LVL168:
 1833 001e D3F8EC12 		ldr	r1, [r3, #748]
 1834 0022 9962     		str	r1, [r3, #40]
 1835 0024 C3F8EC22 		str	r2, [r3, #748]
 1836 0028 D3F81423 		ldr	r2, [r3, #788]
 1837              	.LVL169:
 1838 002c 0132     		adds	r2, r2, #1
 1839 002e C3F81423 		str	r2, [r3, #788]
 1840              	.LVL170:
 1841 0032 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1842              	.LVL171:
 1843              	.L158:
 1844              	.LBE41:
2669:FreeRTOS\src/tasks.c **** 		{
 1845              		.loc 1 2669 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 130


 1846 0036 314B     		ldr	r3, .L173
 1847 0038 DB6A     		ldr	r3, [r3, #44]
 1848 003a 9F42     		cmp	r7, r3
 1849 003c 05D2     		bcs	.L168
 1850              	.LBE40:
2640:FreeRTOS\src/tasks.c **** 
 1851              		.loc 1 2640 0
 1852 003e 4FF00008 		mov	r8, #0
 1853 0042 3BE0     		b	.L160
 1854              	.LVL172:
 1855              	.L169:
 1856              	.LBB42:
2735:FreeRTOS\src/tasks.c **** 						}
 1857              		.loc 1 2735 0
 1858 0044 4FF00108 		mov	r8, #1
 1859              	.LVL173:
 1860 0048 01E0     		b	.L159
 1861              	.LVL174:
 1862              	.L168:
 1863 004a 4FF00008 		mov	r8, #0
 1864              	.LVL175:
 1865              	.L159:
2673:FreeRTOS\src/tasks.c **** 				{
 1866              		.loc 1 2673 0
 1867 004e 2B4B     		ldr	r3, .L173
 1868 0050 9B6A     		ldr	r3, [r3, #40]
 1869 0052 1B68     		ldr	r3, [r3]
 1870 0054 23B9     		cbnz	r3, .L161
2680:FreeRTOS\src/tasks.c **** 					break;
 1871              		.loc 1 2680 0
 1872 0056 4FF0FF32 		mov	r2, #-1
 1873 005a 284B     		ldr	r3, .L173
 1874 005c DA62     		str	r2, [r3, #44]
2681:FreeRTOS\src/tasks.c **** 				}
 1875              		.loc 1 2681 0
 1876 005e 2DE0     		b	.L160
 1877              	.L161:
2689:FreeRTOS\src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1878              		.loc 1 2689 0
 1879 0060 264B     		ldr	r3, .L173
 1880 0062 9B6A     		ldr	r3, [r3, #40]
 1881 0064 DB68     		ldr	r3, [r3, #12]
 1882 0066 DC68     		ldr	r4, [r3, #12]
 1883              	.LVL176:
2690:FreeRTOS\src/tasks.c **** 
 1884              		.loc 1 2690 0
 1885 0068 6368     		ldr	r3, [r4, #4]
 1886              	.LVL177:
2692:FreeRTOS\src/tasks.c **** 					{
 1887              		.loc 1 2692 0
 1888 006a 9F42     		cmp	r7, r3
 1889 006c 02D2     		bcs	.L162
2699:FreeRTOS\src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 1890              		.loc 1 2699 0
 1891 006e 234A     		ldr	r2, .L173
 1892 0070 D362     		str	r3, [r2, #44]
2700:FreeRTOS\src/tasks.c **** 					}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 131


 1893              		.loc 1 2700 0
 1894 0072 23E0     		b	.L160
 1895              	.L162:
2708:FreeRTOS\src/tasks.c **** 
 1896              		.loc 1 2708 0
 1897 0074 261D     		adds	r6, r4, #4
 1898 0076 3046     		mov	r0, r6
 1899 0078 FFF7FEFF 		bl	uxListRemove
 1900              	.LVL178:
2712:FreeRTOS\src/tasks.c **** 					{
 1901              		.loc 1 2712 0
 1902 007c A36A     		ldr	r3, [r4, #40]
 1903 007e 1BB1     		cbz	r3, .L163
2714:FreeRTOS\src/tasks.c **** 					}
 1904              		.loc 1 2714 0
 1905 0080 04F11800 		add	r0, r4, #24
 1906 0084 FFF7FEFF 		bl	uxListRemove
 1907              	.LVL179:
 1908              	.L163:
2723:FreeRTOS\src/tasks.c **** 
 1909              		.loc 1 2723 0
 1910 0088 E36A     		ldr	r3, [r4, #44]
 1911 008a 0122     		movs	r2, #1
 1912 008c 02FA03F1 		lsl	r1, r2, r3
 1913 0090 1A4D     		ldr	r5, .L173
 1914 0092 D5F80023 		ldr	r2, [r5, #768]
 1915 0096 0A43     		orrs	r2, r2, r1
 1916 0098 C5F80023 		str	r2, [r5, #768]
 1917 009c 05F13000 		add	r0, r5, #48
 1918 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 1919 00a4 9A00     		lsls	r2, r3, #2
 1920 00a6 3146     		mov	r1, r6
 1921 00a8 1044     		add	r0, r0, r2
 1922 00aa FFF7FEFF 		bl	vListInsertEnd
 1923              	.LVL180:
2733:FreeRTOS\src/tasks.c **** 						{
 1924              		.loc 1 2733 0
 1925 00ae E26A     		ldr	r2, [r4, #44]
 1926 00b0 D5F8F432 		ldr	r3, [r5, #756]
 1927 00b4 DB6A     		ldr	r3, [r3, #44]
 1928 00b6 9A42     		cmp	r2, r3
 1929 00b8 C4D2     		bcs	.L169
 1930 00ba C8E7     		b	.L159
 1931              	.LVL181:
 1932              	.L160:
2752:FreeRTOS\src/tasks.c **** 			{
 1933              		.loc 1 2752 0
 1934 00bc 0F49     		ldr	r1, .L173
 1935 00be D1F8F432 		ldr	r3, [r1, #756]
 1936 00c2 DB6A     		ldr	r3, [r3, #44]
 1937 00c4 03EB8303 		add	r3, r3, r3, lsl #2
 1938 00c8 9A00     		lsls	r2, r3, #2
 1939 00ca 0A44     		add	r2, r2, r1
 1940 00cc 136B     		ldr	r3, [r2, #48]
 1941 00ce 012B     		cmp	r3, #1
 1942 00d0 09D8     		bhi	.L170
 1943 00d2 0AE0     		b	.L166
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 132


 1944              	.LVL182:
 1945              	.L157:
 1946              	.LBE42:
2780:FreeRTOS\src/tasks.c **** 
 1947              		.loc 1 2780 0
 1948 00d4 094A     		ldr	r2, .L173
 1949 00d6 D2F81833 		ldr	r3, [r2, #792]
 1950 00da 0133     		adds	r3, r3, #1
 1951 00dc C2F81833 		str	r3, [r2, #792]
2640:FreeRTOS\src/tasks.c **** 
 1952              		.loc 1 2640 0
 1953 00e0 4FF00008 		mov	r8, #0
 1954 00e4 01E0     		b	.L166
 1955              	.LVL183:
 1956              	.L170:
 1957              	.LBB43:
2754:FreeRTOS\src/tasks.c **** 			}
 1958              		.loc 1 2754 0
 1959 00e6 4FF00108 		mov	r8, #1
 1960              	.LVL184:
 1961              	.L166:
 1962              	.LBE43:
2793:FreeRTOS\src/tasks.c **** 		{
 1963              		.loc 1 2793 0
 1964 00ea 044B     		ldr	r3, .L173
 1965 00ec D3F81C33 		ldr	r3, [r3, #796]
 1966 00f0 0BB1     		cbz	r3, .L167
2795:FreeRTOS\src/tasks.c **** 		}
 1967              		.loc 1 2795 0
 1968 00f2 4FF00108 		mov	r8, #1
 1969              	.LVL185:
 1970              	.L167:
2805:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1971              		.loc 1 2805 0
 1972 00f6 4046     		mov	r0, r8
 1973 00f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1974              	.LVL186:
 1975              	.L174:
 1976              		.align	2
 1977              	.L173:
 1978 00fc 00000000 		.word	.LANCHOR0
 1979              		.cfi_endproc
 1980              	.LFE27:
 1981              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1982              		.section	.text.xTaskResumeAll,"ax",%progbits
 1983              		.align	2
 1984              		.global	xTaskResumeAll
 1985              		.thumb
 1986              		.thumb_func
 1987              		.type	xTaskResumeAll, %function
 1988              	xTaskResumeAll:
 1989              	.LFB22:
2146:FreeRTOS\src/tasks.c **** TCB_t *pxTCB = NULL;
 1990              		.loc 1 2146 0
 1991              		.cfi_startproc
 1992              		@ args = 0, pretend = 0, frame = 0
 1993              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 133


 1994 0000 70B5     		push	{r4, r5, r6, lr}
 1995              		.cfi_def_cfa_offset 16
 1996              		.cfi_offset 4, -16
 1997              		.cfi_offset 5, -12
 1998              		.cfi_offset 6, -8
 1999              		.cfi_offset 14, -4
 2000              	.LVL187:
2159:FreeRTOS\src/tasks.c **** 	{
 2001              		.loc 1 2159 0
 2002 0002 FFF7FEFF 		bl	vPortEnterCritical
 2003              	.LVL188:
2161:FreeRTOS\src/tasks.c **** 
 2004              		.loc 1 2161 0
 2005 0006 324B     		ldr	r3, .L188
 2006 0008 D3F80C23 		ldr	r2, [r3, #780]
 2007 000c 013A     		subs	r2, r2, #1
 2008 000e C3F80C23 		str	r2, [r3, #780]
2163:FreeRTOS\src/tasks.c **** 		{
 2009              		.loc 1 2163 0
 2010 0012 D3F80C33 		ldr	r3, [r3, #780]
 2011 0016 002B     		cmp	r3, #0
 2012 0018 53D1     		bne	.L184
2165:FreeRTOS\src/tasks.c **** 			{
 2013              		.loc 1 2165 0
 2014 001a 2D4B     		ldr	r3, .L188
 2015 001c D3F8F032 		ldr	r3, [r3, #752]
 2016 0020 43BB     		cbnz	r3, .L185
2148:FreeRTOS\src/tasks.c **** 
 2017              		.loc 1 2148 0
 2018 0022 0024     		movs	r4, #0
 2019 0024 50E0     		b	.L176
 2020              	.LVL189:
 2021              	.L179:
2171:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2022              		.loc 1 2171 0
 2023 0026 2A4C     		ldr	r4, .L188
 2024 0028 236A     		ldr	r3, [r4, #32]
 2025 002a DD68     		ldr	r5, [r3, #12]
 2026              	.LVL190:
2172:FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2027              		.loc 1 2172 0
 2028 002c 05F11800 		add	r0, r5, #24
 2029 0030 FFF7FEFF 		bl	uxListRemove
 2030              	.LVL191:
2173:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2031              		.loc 1 2173 0
 2032 0034 2E1D     		adds	r6, r5, #4
 2033 0036 3046     		mov	r0, r6
 2034 0038 FFF7FEFF 		bl	uxListRemove
 2035              	.LVL192:
2174:FreeRTOS\src/tasks.c **** 
 2036              		.loc 1 2174 0
 2037 003c EB6A     		ldr	r3, [r5, #44]
 2038 003e 0122     		movs	r2, #1
 2039 0040 02FA03F1 		lsl	r1, r2, r3
 2040 0044 D4F80023 		ldr	r2, [r4, #768]
 2041 0048 0A43     		orrs	r2, r2, r1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 134


 2042 004a C4F80023 		str	r2, [r4, #768]
 2043 004e 04F13000 		add	r0, r4, #48
 2044 0052 03EB8303 		add	r3, r3, r3, lsl #2
 2045 0056 9A00     		lsls	r2, r3, #2
 2046 0058 3146     		mov	r1, r6
 2047 005a 1044     		add	r0, r0, r2
 2048 005c FFF7FEFF 		bl	vListInsertEnd
 2049              	.LVL193:
2178:FreeRTOS\src/tasks.c **** 					{
 2050              		.loc 1 2178 0
 2051 0060 EA6A     		ldr	r2, [r5, #44]
 2052 0062 D4F8F432 		ldr	r3, [r4, #756]
 2053 0066 DB6A     		ldr	r3, [r3, #44]
 2054 0068 9A42     		cmp	r2, r3
 2055 006a 04D3     		bcc	.L177
2180:FreeRTOS\src/tasks.c **** 					}
 2056              		.loc 1 2180 0
 2057 006c 0122     		movs	r2, #1
 2058 006e C4F81C23 		str	r2, [r4, #796]
 2059 0072 00E0     		b	.L177
 2060              	.LVL194:
 2061              	.L185:
 2062 0074 0025     		movs	r5, #0
 2063              	.LVL195:
 2064              	.L177:
2169:FreeRTOS\src/tasks.c **** 				{
 2065              		.loc 1 2169 0
 2066 0076 164B     		ldr	r3, .L188
 2067 0078 5B69     		ldr	r3, [r3, #20]
 2068 007a 002B     		cmp	r3, #0
 2069 007c D3D1     		bne	.L179
2188:FreeRTOS\src/tasks.c **** 				{
 2070              		.loc 1 2188 0
 2071 007e 0DB1     		cbz	r5, .L180
2196:FreeRTOS\src/tasks.c **** 				}
 2072              		.loc 1 2196 0
 2073 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2074              	.LVL196:
 2075              	.L180:
 2076              	.LBB44:
2204:FreeRTOS\src/tasks.c **** 
 2077              		.loc 1 2204 0
 2078 0084 124B     		ldr	r3, .L188
 2079 0086 D3F81843 		ldr	r4, [r3, #792]
 2080              	.LVL197:
2206:FreeRTOS\src/tasks.c **** 					{
 2081              		.loc 1 2206 0
 2082 008a 64B1     		cbz	r4, .L181
 2083              	.L183:
2210:FreeRTOS\src/tasks.c **** 							{
 2084              		.loc 1 2210 0
 2085 008c FFF7FEFF 		bl	xTaskIncrementTick
 2086              	.LVL198:
 2087 0090 18B1     		cbz	r0, .L182
2212:FreeRTOS\src/tasks.c **** 							}
 2088              		.loc 1 2212 0
 2089 0092 0122     		movs	r2, #1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 135


 2090 0094 0E4B     		ldr	r3, .L188
 2091 0096 C3F81C23 		str	r2, [r3, #796]
 2092              	.L182:
 2093              	.LVL199:
2219:FreeRTOS\src/tasks.c **** 
 2094              		.loc 1 2219 0
 2095 009a 013C     		subs	r4, r4, #1
 2096              	.LVL200:
 2097 009c F6D1     		bne	.L183
2221:FreeRTOS\src/tasks.c **** 					}
 2098              		.loc 1 2221 0
 2099 009e 0022     		movs	r2, #0
 2100 00a0 0B4B     		ldr	r3, .L188
 2101 00a2 C3F81823 		str	r2, [r3, #792]
 2102              	.L181:
 2103              	.LBE44:
2229:FreeRTOS\src/tasks.c **** 				{
 2104              		.loc 1 2229 0
 2105 00a6 0A4B     		ldr	r3, .L188
 2106 00a8 D3F81C33 		ldr	r3, [r3, #796]
 2107 00ac 5BB1     		cbz	r3, .L186
 2108              	.LVL201:
2236:FreeRTOS\src/tasks.c **** 				}
 2109              		.loc 1 2236 0
 2110 00ae 4FF08052 		mov	r2, #268435456
 2111 00b2 084B     		ldr	r3, .L188+4
 2112 00b4 1A60     		str	r2, [r3]
 2113              		.syntax unified
 2114              	@ 2236 "FreeRTOS\src\tasks.c" 1
 2115 00b6 BFF34F8F 		dsb
 2116              	@ 0 "" 2
 2117              	@ 2236 "FreeRTOS\src\tasks.c" 1
 2118 00ba BFF36F8F 		isb
 2119              	@ 0 "" 2
2233:FreeRTOS\src/tasks.c **** 					}
 2120              		.loc 1 2233 0
 2121              		.thumb
 2122              		.syntax unified
 2123 00be 0124     		movs	r4, #1
 2124              	.LVL202:
 2125 00c0 02E0     		b	.L176
 2126              	.LVL203:
 2127              	.L184:
2148:FreeRTOS\src/tasks.c **** 
 2128              		.loc 1 2148 0
 2129 00c2 0024     		movs	r4, #0
 2130 00c4 00E0     		b	.L176
 2131              	.LVL204:
 2132              	.L186:
 2133 00c6 0024     		movs	r4, #0
 2134              	.LVL205:
 2135              	.L176:
2249:FreeRTOS\src/tasks.c **** 
 2136              		.loc 1 2249 0
 2137 00c8 FFF7FEFF 		bl	vPortExitCritical
 2138              	.LVL206:
2252:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 136


 2139              		.loc 1 2252 0
 2140 00cc 2046     		mov	r0, r4
 2141 00ce 70BD     		pop	{r4, r5, r6, pc}
 2142              	.LVL207:
 2143              	.L189:
 2144              		.align	2
 2145              	.L188:
 2146 00d0 00000000 		.word	.LANCHOR0
 2147 00d4 04ED00E0 		.word	-536810236
 2148              		.cfi_endproc
 2149              	.LFE22:
 2150              		.size	xTaskResumeAll, .-xTaskResumeAll
 2151              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2152              		.align	2
 2153              		.global	vTaskDelayUntil
 2154              		.thumb
 2155              		.thumb_func
 2156              		.type	vTaskDelayUntil, %function
 2157              	vTaskDelayUntil:
 2158              	.LFB9:
1222:FreeRTOS\src/tasks.c **** 	TickType_t xTimeToWake;
 2159              		.loc 1 1222 0
 2160              		.cfi_startproc
 2161              		@ args = 0, pretend = 0, frame = 0
 2162              		@ frame_needed = 0, uses_anonymous_args = 0
 2163              	.LVL208:
 2164 0000 38B5     		push	{r3, r4, r5, lr}
 2165              		.cfi_def_cfa_offset 16
 2166              		.cfi_offset 3, -16
 2167              		.cfi_offset 4, -12
 2168              		.cfi_offset 5, -8
 2169              		.cfi_offset 14, -4
 2170 0002 0546     		mov	r5, r0
 2171 0004 0C46     		mov	r4, r1
 2172              	.LVL209:
1230:FreeRTOS\src/tasks.c **** 		{
 2173              		.loc 1 1230 0
 2174 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2175              	.LVL210:
 2176              	.LBB45:
1234:FreeRTOS\src/tasks.c **** 
 2177              		.loc 1 1234 0
 2178 000a 164B     		ldr	r3, .L200
 2179 000c D3F80803 		ldr	r0, [r3, #776]
 2180              	.LVL211:
1237:FreeRTOS\src/tasks.c **** 
 2181              		.loc 1 1237 0
 2182 0010 2A68     		ldr	r2, [r5]
 2183 0012 1319     		adds	r3, r2, r4
 2184              	.LVL212:
1239:FreeRTOS\src/tasks.c **** 			{
 2185              		.loc 1 1239 0
 2186 0014 9042     		cmp	r0, r2
 2187 0016 05D2     		bcs	.L191
1246:FreeRTOS\src/tasks.c **** 				{
 2188              		.loc 1 1246 0
 2189 0018 9A42     		cmp	r2, r3
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 137


 2190 001a 09D9     		bls	.L195
1246:FreeRTOS\src/tasks.c **** 				{
 2191              		.loc 1 1246 0 is_stmt 0 discriminator 1
 2192 001c 9842     		cmp	r0, r3
 2193 001e 09D3     		bcc	.L196
 2194              	.LBE45:
1224:FreeRTOS\src/tasks.c **** 
 2195              		.loc 1 1224 0 is_stmt 1
 2196 0020 0022     		movs	r2, #0
 2197 0022 0CE0     		b	.L192
 2198              	.L191:
 2199              	.LBB46:
1260:FreeRTOS\src/tasks.c **** 				{
 2200              		.loc 1 1260 0
 2201 0024 9A42     		cmp	r2, r3
 2202 0026 07D8     		bhi	.L197
1260:FreeRTOS\src/tasks.c **** 				{
 2203              		.loc 1 1260 0 is_stmt 0 discriminator 1
 2204 0028 9842     		cmp	r0, r3
 2205 002a 07D3     		bcc	.L198
 2206              	.LBE46:
1224:FreeRTOS\src/tasks.c **** 
 2207              		.loc 1 1224 0 is_stmt 1
 2208 002c 0022     		movs	r2, #0
 2209 002e 06E0     		b	.L192
 2210              	.L195:
 2211 0030 0022     		movs	r2, #0
 2212 0032 04E0     		b	.L192
 2213              	.L196:
 2214              	.LBB47:
1248:FreeRTOS\src/tasks.c **** 				}
 2215              		.loc 1 1248 0
 2216 0034 0122     		movs	r2, #1
 2217 0036 02E0     		b	.L192
 2218              	.L197:
1262:FreeRTOS\src/tasks.c **** 				}
 2219              		.loc 1 1262 0
 2220 0038 0122     		movs	r2, #1
 2221 003a 00E0     		b	.L192
 2222              	.L198:
 2223 003c 0122     		movs	r2, #1
 2224              	.L192:
 2225              	.LVL213:
1271:FreeRTOS\src/tasks.c **** 
 2226              		.loc 1 1271 0
 2227 003e 2B60     		str	r3, [r5]
1273:FreeRTOS\src/tasks.c **** 			{
 2228              		.loc 1 1273 0
 2229 0040 1AB1     		cbz	r2, .L193
1279:FreeRTOS\src/tasks.c **** 			}
 2230              		.loc 1 1279 0
 2231 0042 0021     		movs	r1, #0
 2232 0044 181A     		subs	r0, r3, r0
 2233              	.LVL214:
 2234 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2235              	.LVL215:
 2236              	.L193:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 138


 2237              	.LBE47:
1286:FreeRTOS\src/tasks.c **** 
 2238              		.loc 1 1286 0
 2239 004a FFF7FEFF 		bl	xTaskResumeAll
 2240              	.LVL216:
1290:FreeRTOS\src/tasks.c **** 		{
 2241              		.loc 1 1290 0
 2242 004e 38B9     		cbnz	r0, .L190
1292:FreeRTOS\src/tasks.c **** 		}
 2243              		.loc 1 1292 0
 2244 0050 4FF08052 		mov	r2, #268435456
 2245 0054 044B     		ldr	r3, .L200+4
 2246 0056 1A60     		str	r2, [r3]
 2247              		.syntax unified
 2248              	@ 1292 "FreeRTOS\src\tasks.c" 1
 2249 0058 BFF34F8F 		dsb
 2250              	@ 0 "" 2
 2251              	@ 1292 "FreeRTOS\src\tasks.c" 1
 2252 005c BFF36F8F 		isb
 2253              	@ 0 "" 2
 2254              		.thumb
 2255              		.syntax unified
 2256              	.L190:
 2257 0060 38BD     		pop	{r3, r4, r5, pc}
 2258              	.LVL217:
 2259              	.L201:
 2260 0062 00BF     		.align	2
 2261              	.L200:
 2262 0064 00000000 		.word	.LANCHOR0
 2263 0068 04ED00E0 		.word	-536810236
 2264              		.cfi_endproc
 2265              	.LFE9:
 2266              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2267              		.section	.text.vTaskDelay,"ax",%progbits
 2268              		.align	2
 2269              		.global	vTaskDelay
 2270              		.thumb
 2271              		.thumb_func
 2272              		.type	vTaskDelay, %function
 2273              	vTaskDelay:
 2274              	.LFB10:
1306:FreeRTOS\src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2275              		.loc 1 1306 0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 0
 2278              		@ frame_needed = 0, uses_anonymous_args = 0
 2279              	.LVL218:
 2280 0000 10B5     		push	{r4, lr}
 2281              		.cfi_def_cfa_offset 8
 2282              		.cfi_offset 4, -8
 2283              		.cfi_offset 14, -4
 2284              	.LVL219:
1310:FreeRTOS\src/tasks.c **** 		{
 2285              		.loc 1 1310 0
 2286 0002 48B1     		cbz	r0, .L205
 2287 0004 0446     		mov	r4, r0
1313:FreeRTOS\src/tasks.c **** 			{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 139


 2288              		.loc 1 1313 0
 2289 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2290              	.LVL220:
1324:FreeRTOS\src/tasks.c **** 			}
 2291              		.loc 1 1324 0
 2292 000a 0021     		movs	r1, #0
 2293 000c 2046     		mov	r0, r4
 2294 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2295              	.LVL221:
1326:FreeRTOS\src/tasks.c **** 		}
 2296              		.loc 1 1326 0
 2297 0012 FFF7FEFF 		bl	xTaskResumeAll
 2298              	.LVL222:
 2299 0016 00E0     		b	.L203
 2300              	.LVL223:
 2301              	.L205:
1307:FreeRTOS\src/tasks.c **** 
 2302              		.loc 1 1307 0
 2303 0018 0020     		movs	r0, #0
 2304              	.LVL224:
 2305              	.L203:
1335:FreeRTOS\src/tasks.c **** 		{
 2306              		.loc 1 1335 0
 2307 001a 38B9     		cbnz	r0, .L202
1337:FreeRTOS\src/tasks.c **** 		}
 2308              		.loc 1 1337 0
 2309 001c 4FF08052 		mov	r2, #268435456
 2310 0020 034B     		ldr	r3, .L207
 2311 0022 1A60     		str	r2, [r3]
 2312              		.syntax unified
 2313              	@ 1337 "FreeRTOS\src\tasks.c" 1
 2314 0024 BFF34F8F 		dsb
 2315              	@ 0 "" 2
 2316              	@ 1337 "FreeRTOS\src\tasks.c" 1
 2317 0028 BFF36F8F 		isb
 2318              	@ 0 "" 2
 2319              		.thumb
 2320              		.syntax unified
 2321              	.L202:
 2322 002c 10BD     		pop	{r4, pc}
 2323              	.L208:
 2324 002e 00BF     		.align	2
 2325              	.L207:
 2326 0030 04ED00E0 		.word	-536810236
 2327              		.cfi_endproc
 2328              	.LFE10:
 2329              		.size	vTaskDelay, .-vTaskDelay
 2330              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2331              		.align	2
 2332              		.global	vTaskSwitchContext
 2333              		.thumb
 2334              		.thumb_func
 2335              		.type	vTaskSwitchContext, %function
 2336              	vTaskSwitchContext:
 2337              	.LFB28:
2901:FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2338              		.loc 1 2901 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 140


 2339              		.cfi_startproc
 2340              		@ args = 0, pretend = 0, frame = 0
 2341              		@ frame_needed = 0, uses_anonymous_args = 0
 2342              		@ link register save eliminated.
2902:FreeRTOS\src/tasks.c **** 	{
 2343              		.loc 1 2902 0
 2344 0000 1A4B     		ldr	r3, .L214
 2345 0002 D3F80C33 		ldr	r3, [r3, #780]
 2346 0006 23B1     		cbz	r3, .L210
2906:FreeRTOS\src/tasks.c **** 	}
 2347              		.loc 1 2906 0
 2348 0008 0122     		movs	r2, #1
 2349 000a 184B     		ldr	r3, .L214
 2350 000c C3F81C23 		str	r2, [r3, #796]
 2351 0010 7047     		bx	lr
 2352              	.L210:
2901:FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2353              		.loc 1 2901 0
 2354 0012 10B4     		push	{r4}
 2355              		.cfi_def_cfa_offset 4
 2356              		.cfi_offset 4, -4
2910:FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2357              		.loc 1 2910 0
 2358 0014 154A     		ldr	r2, .L214
 2359 0016 0023     		movs	r3, #0
 2360 0018 C2F81C33 		str	r3, [r2, #796]
 2361              	.LBB48:
2952:FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2362              		.loc 1 2952 0
 2363 001c D2F80033 		ldr	r3, [r2, #768]
 2364              	.LVL225:
 2365              	.LBB49:
 2366              	.LBB50:
 134:.\FreeRTOS\include/portmacro.h **** 		return ucReturn;
 2367              		.loc 2 134 0
 2368              		.syntax unified
 2369              	@ 134 ".\FreeRTOS\include/portmacro.h" 1
 2370 0020 B3FA83F3 		clz r3, r3
 2371              	@ 0 "" 2
 2372              	.LVL226:
 2373              		.thumb
 2374              		.syntax unified
 2375 0024 DBB2     		uxtb	r3, r3
 2376              	.LBE50:
 2377              	.LBE49:
2952:FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2378              		.loc 1 2952 0
 2379 0026 C3F11F03 		rsb	r3, r3, #31
 2380              	.LVL227:
 2381              	.LBB51:
 2382 002a 9800     		lsls	r0, r3, #2
 2383 002c C418     		adds	r4, r0, r3
 2384 002e A100     		lsls	r1, r4, #2
 2385 0030 1144     		add	r1, r1, r2
 2386 0032 4C6B     		ldr	r4, [r1, #52]
 2387 0034 6468     		ldr	r4, [r4, #4]
 2388 0036 4C63     		str	r4, [r1, #52]
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 141


 2389 0038 02F13001 		add	r1, r2, #48
 2390 003c 1844     		add	r0, r0, r3
 2391 003e 8200     		lsls	r2, r0, #2
 2392 0040 0832     		adds	r2, r2, #8
 2393 0042 0A44     		add	r2, r2, r1
 2394 0044 9442     		cmp	r4, r2
 2395 0046 06D1     		bne	.L212
2952:FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2396              		.loc 1 2952 0 is_stmt 0 discriminator 1
 2397 0048 6068     		ldr	r0, [r4, #4]
 2398 004a 03EB8301 		add	r1, r3, r3, lsl #2
 2399 004e 8A00     		lsls	r2, r1, #2
 2400 0050 0649     		ldr	r1, .L214
 2401 0052 0A44     		add	r2, r2, r1
 2402 0054 5063     		str	r0, [r2, #52]
 2403              	.L212:
2952:FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2404              		.loc 1 2952 0 discriminator 3
 2405 0056 0549     		ldr	r1, .L214
 2406 0058 03EB8303 		add	r3, r3, r3, lsl #2
 2407              	.LVL228:
 2408 005c 9A00     		lsls	r2, r3, #2
 2409 005e 0A44     		add	r2, r2, r1
 2410 0060 536B     		ldr	r3, [r2, #52]
 2411 0062 DB68     		ldr	r3, [r3, #12]
 2412 0064 C1F8F432 		str	r3, [r1, #756]
 2413              	.LBE51:
 2414              	.LBE48:
2970:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 2415              		.loc 1 2970 0 is_stmt 1 discriminator 3
 2416 0068 10BC     		pop	{r4}
 2417              		.cfi_restore 4
 2418              		.cfi_def_cfa_offset 0
 2419 006a 7047     		bx	lr
 2420              	.L215:
 2421              		.align	2
 2422              	.L214:
 2423 006c 00000000 		.word	.LANCHOR0
 2424              		.cfi_endproc
 2425              	.LFE28:
 2426              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2427              		.section	.text.vTaskSuspend,"ax",%progbits
 2428              		.align	2
 2429              		.global	vTaskSuspend
 2430              		.thumb
 2431              		.thumb_func
 2432              		.type	vTaskSuspend, %function
 2433              	vTaskSuspend:
 2434              	.LFB15:
1669:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 2435              		.loc 1 1669 0
 2436              		.cfi_startproc
 2437              		@ args = 0, pretend = 0, frame = 0
 2438              		@ frame_needed = 0, uses_anonymous_args = 0
 2439              	.LVL229:
 2440 0000 38B5     		push	{r3, r4, r5, lr}
 2441              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 142


 2442              		.cfi_offset 3, -16
 2443              		.cfi_offset 4, -12
 2444              		.cfi_offset 5, -8
 2445              		.cfi_offset 14, -4
 2446 0002 0446     		mov	r4, r0
1672:FreeRTOS\src/tasks.c **** 		{
 2447              		.loc 1 1672 0
 2448 0004 FFF7FEFF 		bl	vPortEnterCritical
 2449              	.LVL230:
1676:FreeRTOS\src/tasks.c **** 
 2450              		.loc 1 1676 0
 2451 0008 14B9     		cbnz	r4, .L217
1676:FreeRTOS\src/tasks.c **** 
 2452              		.loc 1 1676 0 is_stmt 0 discriminator 1
 2453 000a 2B4B     		ldr	r3, .L226
 2454 000c D3F8F442 		ldr	r4, [r3, #756]
 2455              	.LVL231:
 2456              	.L217:
1682:FreeRTOS\src/tasks.c **** 			{
 2457              		.loc 1 1682 0 is_stmt 1 discriminator 4
 2458 0010 251D     		adds	r5, r4, #4
 2459 0012 2846     		mov	r0, r5
 2460 0014 FFF7FEFF 		bl	uxListRemove
 2461              	.LVL232:
 2462 0018 80B9     		cbnz	r0, .L218
1684:FreeRTOS\src/tasks.c **** 			}
 2463              		.loc 1 1684 0
 2464 001a E26A     		ldr	r2, [r4, #44]
 2465 001c 02EB8201 		add	r1, r2, r2, lsl #2
 2466 0020 8B00     		lsls	r3, r1, #2
 2467 0022 2549     		ldr	r1, .L226
 2468 0024 0B44     		add	r3, r3, r1
 2469 0026 1B6B     		ldr	r3, [r3, #48]
 2470 0028 43B9     		cbnz	r3, .L218
1684:FreeRTOS\src/tasks.c **** 			}
 2471              		.loc 1 1684 0 is_stmt 0 discriminator 1
 2472 002a 0123     		movs	r3, #1
 2473 002c 03FA02F2 		lsl	r2, r3, r2
 2474 0030 D1F80033 		ldr	r3, [r1, #768]
 2475 0034 23EA0202 		bic	r2, r3, r2
 2476 0038 C1F80023 		str	r2, [r1, #768]
 2477              	.L218:
1692:FreeRTOS\src/tasks.c **** 			{
 2478              		.loc 1 1692 0 is_stmt 1
 2479 003c A36A     		ldr	r3, [r4, #40]
 2480 003e 1BB1     		cbz	r3, .L219
1694:FreeRTOS\src/tasks.c **** 			}
 2481              		.loc 1 1694 0
 2482 0040 04F11800 		add	r0, r4, #24
 2483 0044 FFF7FEFF 		bl	uxListRemove
 2484              	.LVL233:
 2485              	.L219:
1701:FreeRTOS\src/tasks.c **** 
 2486              		.loc 1 1701 0
 2487 0048 2946     		mov	r1, r5
 2488 004a 1B48     		ldr	r0, .L226
 2489 004c FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 143


 2490              	.LVL234:
1705:FreeRTOS\src/tasks.c **** 				{
 2491              		.loc 1 1705 0
 2492 0050 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 2493 0054 DBB2     		uxtb	r3, r3
 2494 0056 012B     		cmp	r3, #1
 2495 0058 02D1     		bne	.L220
1709:FreeRTOS\src/tasks.c **** 				}
 2496              		.loc 1 1709 0
 2497 005a 0023     		movs	r3, #0
 2498 005c 84F84C30 		strb	r3, [r4, #76]
 2499              	.L220:
1714:FreeRTOS\src/tasks.c **** 
 2500              		.loc 1 1714 0
 2501 0060 FFF7FEFF 		bl	vPortExitCritical
 2502              	.LVL235:
1716:FreeRTOS\src/tasks.c **** 		{
 2503              		.loc 1 1716 0
 2504 0064 144B     		ldr	r3, .L226
 2505 0066 D3F8F832 		ldr	r3, [r3, #760]
 2506 006a 2BB1     		cbz	r3, .L221
1720:FreeRTOS\src/tasks.c **** 			{
 2507              		.loc 1 1720 0
 2508 006c FFF7FEFF 		bl	vPortEnterCritical
 2509              	.LVL236:
1722:FreeRTOS\src/tasks.c **** 			}
 2510              		.loc 1 1722 0
 2511 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2512              	.LVL237:
1724:FreeRTOS\src/tasks.c **** 		}
 2513              		.loc 1 1724 0
 2514 0074 FFF7FEFF 		bl	vPortExitCritical
 2515              	.LVL238:
 2516              	.L221:
1731:FreeRTOS\src/tasks.c **** 		{
 2517              		.loc 1 1731 0
 2518 0078 0F4B     		ldr	r3, .L226
 2519 007a D3F8F432 		ldr	r3, [r3, #756]
 2520 007e 9C42     		cmp	r4, r3
 2521 0080 19D1     		bne	.L216
1733:FreeRTOS\src/tasks.c **** 			{
 2522              		.loc 1 1733 0
 2523 0082 0D4B     		ldr	r3, .L226
 2524 0084 D3F8F832 		ldr	r3, [r3, #760]
 2525 0088 43B1     		cbz	r3, .L223
1737:FreeRTOS\src/tasks.c **** 			}
 2526              		.loc 1 1737 0
 2527 008a 4FF08052 		mov	r2, #268435456
 2528 008e 0B4B     		ldr	r3, .L226+4
 2529 0090 1A60     		str	r2, [r3]
 2530              		.syntax unified
 2531              	@ 1737 "FreeRTOS\src\tasks.c" 1
 2532 0092 BFF34F8F 		dsb
 2533              	@ 0 "" 2
 2534              	@ 1737 "FreeRTOS\src\tasks.c" 1
 2535 0096 BFF36F8F 		isb
 2536              	@ 0 "" 2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 144


 2537              		.thumb
 2538              		.syntax unified
 2539 009a 38BD     		pop	{r3, r4, r5, pc}
 2540              	.LVL239:
 2541              	.L223:
1744:FreeRTOS\src/tasks.c **** 				{
 2542              		.loc 1 1744 0
 2543 009c 064B     		ldr	r3, .L226
 2544 009e 1A68     		ldr	r2, [r3]
 2545 00a0 D3F8F032 		ldr	r3, [r3, #752]
 2546 00a4 9A42     		cmp	r2, r3
 2547 00a6 04D1     		bne	.L224
1750:FreeRTOS\src/tasks.c **** 				}
 2548              		.loc 1 1750 0
 2549 00a8 0022     		movs	r2, #0
 2550 00aa 034B     		ldr	r3, .L226
 2551 00ac C3F8F422 		str	r2, [r3, #756]
 2552 00b0 38BD     		pop	{r3, r4, r5, pc}
 2553              	.LVL240:
 2554              	.L224:
1754:FreeRTOS\src/tasks.c **** 				}
 2555              		.loc 1 1754 0
 2556 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 2557              	.LVL241:
 2558              	.L216:
 2559 00b6 38BD     		pop	{r3, r4, r5, pc}
 2560              	.LVL242:
 2561              	.L227:
 2562              		.align	2
 2563              	.L226:
 2564 00b8 00000000 		.word	.LANCHOR0
 2565 00bc 04ED00E0 		.word	-536810236
 2566              		.cfi_endproc
 2567              	.LFE15:
 2568              		.size	vTaskSuspend, .-vTaskSuspend
 2569              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2570              		.align	2
 2571              		.global	vTaskPlaceOnEventList
 2572              		.thumb
 2573              		.thumb_func
 2574              		.type	vTaskPlaceOnEventList, %function
 2575              	vTaskPlaceOnEventList:
 2576              	.LFB29:
2974:FreeRTOS\src/tasks.c **** 	configASSERT( pxEventList );
 2577              		.loc 1 2974 0
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 0
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
 2581              	.LVL243:
 2582 0000 10B5     		push	{r4, lr}
 2583              		.cfi_def_cfa_offset 8
 2584              		.cfi_offset 4, -8
 2585              		.cfi_offset 14, -4
 2586 0002 0C46     		mov	r4, r1
2984:FreeRTOS\src/tasks.c **** 
 2587              		.loc 1 2984 0
 2588 0004 054B     		ldr	r3, .L230
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 145


 2589 0006 D3F8F412 		ldr	r1, [r3, #756]
 2590              	.LVL244:
 2591 000a 1831     		adds	r1, r1, #24
 2592 000c FFF7FEFF 		bl	vListInsert
 2593              	.LVL245:
2986:FreeRTOS\src/tasks.c **** }
 2594              		.loc 1 2986 0
 2595 0010 0121     		movs	r1, #1
 2596 0012 2046     		mov	r0, r4
 2597 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2598              	.LVL246:
 2599 0018 10BD     		pop	{r4, pc}
 2600              	.LVL247:
 2601              	.L231:
 2602 001a 00BF     		.align	2
 2603              	.L230:
 2604 001c 00000000 		.word	.LANCHOR0
 2605              		.cfi_endproc
 2606              	.LFE29:
 2607              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2608              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2609              		.align	2
 2610              		.global	vTaskPlaceOnUnorderedEventList
 2611              		.thumb
 2612              		.thumb_func
 2613              		.type	vTaskPlaceOnUnorderedEventList, %function
 2614              	vTaskPlaceOnUnorderedEventList:
 2615              	.LFB30:
2991:FreeRTOS\src/tasks.c **** 	configASSERT( pxEventList );
 2616              		.loc 1 2991 0
 2617              		.cfi_startproc
 2618              		@ args = 0, pretend = 0, frame = 0
 2619              		@ frame_needed = 0, uses_anonymous_args = 0
 2620              	.LVL248:
 2621 0000 10B5     		push	{r4, lr}
 2622              		.cfi_def_cfa_offset 8
 2623              		.cfi_offset 4, -8
 2624              		.cfi_offset 14, -4
 2625 0002 1446     		mov	r4, r2
3001:FreeRTOS\src/tasks.c **** 
 2626              		.loc 1 3001 0
 2627 0004 074B     		ldr	r3, .L234
 2628 0006 D3F8F422 		ldr	r2, [r3, #756]
 2629              	.LVL249:
 2630 000a 41F00041 		orr	r1, r1, #-2147483648
 2631              	.LVL250:
 2632 000e 9161     		str	r1, [r2, #24]
3008:FreeRTOS\src/tasks.c **** 
 2633              		.loc 1 3008 0
 2634 0010 D3F8F412 		ldr	r1, [r3, #756]
 2635 0014 1831     		adds	r1, r1, #24
 2636 0016 FFF7FEFF 		bl	vListInsertEnd
 2637              	.LVL251:
3010:FreeRTOS\src/tasks.c **** }
 2638              		.loc 1 3010 0
 2639 001a 0121     		movs	r1, #1
 2640 001c 2046     		mov	r0, r4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 146


 2641 001e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2642              	.LVL252:
 2643 0022 10BD     		pop	{r4, pc}
 2644              	.LVL253:
 2645              	.L235:
 2646              		.align	2
 2647              	.L234:
 2648 0024 00000000 		.word	.LANCHOR0
 2649              		.cfi_endproc
 2650              	.LFE30:
 2651              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2652              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 2653              		.align	2
 2654              		.global	vTaskPlaceOnEventListRestricted
 2655              		.thumb
 2656              		.thumb_func
 2657              		.type	vTaskPlaceOnEventListRestricted, %function
 2658              	vTaskPlaceOnEventListRestricted:
 2659              	.LFB31:
3017:FreeRTOS\src/tasks.c **** 		configASSERT( pxEventList );
 2660              		.loc 1 3017 0
 2661              		.cfi_startproc
 2662              		@ args = 0, pretend = 0, frame = 0
 2663              		@ frame_needed = 0, uses_anonymous_args = 0
 2664              	.LVL254:
 2665 0000 38B5     		push	{r3, r4, r5, lr}
 2666              		.cfi_def_cfa_offset 16
 2667              		.cfi_offset 3, -16
 2668              		.cfi_offset 4, -12
 2669              		.cfi_offset 5, -8
 2670              		.cfi_offset 14, -4
 2671 0002 0D46     		mov	r5, r1
 2672 0004 1446     		mov	r4, r2
3030:FreeRTOS\src/tasks.c **** 
 2673              		.loc 1 3030 0
 2674 0006 074B     		ldr	r3, .L240
 2675 0008 D3F8F412 		ldr	r1, [r3, #756]
 2676              	.LVL255:
 2677 000c 1831     		adds	r1, r1, #24
 2678 000e FFF7FEFF 		bl	vListInsertEnd
 2679              	.LVL256:
3035:FreeRTOS\src/tasks.c **** 		{
 2680              		.loc 1 3035 0
 2681 0012 0CB1     		cbz	r4, .L237
3037:FreeRTOS\src/tasks.c **** 		}
 2682              		.loc 1 3037 0
 2683 0014 4FF0FF35 		mov	r5, #-1
 2684              	.LVL257:
 2685              	.L237:
3041:FreeRTOS\src/tasks.c **** 	}
 2686              		.loc 1 3041 0
 2687 0018 2146     		mov	r1, r4
 2688 001a 2846     		mov	r0, r5
 2689 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2690              	.LVL258:
 2691 0020 38BD     		pop	{r3, r4, r5, pc}
 2692              	.LVL259:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 147


 2693              	.L241:
 2694 0022 00BF     		.align	2
 2695              	.L240:
 2696 0024 00000000 		.word	.LANCHOR0
 2697              		.cfi_endproc
 2698              	.LFE31:
 2699              		.size	vTaskPlaceOnEventListRestricted, .-vTaskPlaceOnEventListRestricted
 2700              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2701              		.align	2
 2702              		.global	xTaskRemoveFromEventList
 2703              		.thumb
 2704              		.thumb_func
 2705              		.type	xTaskRemoveFromEventList, %function
 2706              	xTaskRemoveFromEventList:
 2707              	.LFB32:
3048:FreeRTOS\src/tasks.c **** TCB_t *pxUnblockedTCB;
 2708              		.loc 1 3048 0
 2709              		.cfi_startproc
 2710              		@ args = 0, pretend = 0, frame = 0
 2711              		@ frame_needed = 0, uses_anonymous_args = 0
 2712              	.LVL260:
 2713 0000 38B5     		push	{r3, r4, r5, lr}
 2714              		.cfi_def_cfa_offset 16
 2715              		.cfi_offset 3, -16
 2716              		.cfi_offset 4, -12
 2717              		.cfi_offset 5, -8
 2718              		.cfi_offset 14, -4
3065:FreeRTOS\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2719              		.loc 1 3065 0
 2720 0002 C368     		ldr	r3, [r0, #12]
 2721 0004 DC68     		ldr	r4, [r3, #12]
 2722              	.LVL261:
3067:FreeRTOS\src/tasks.c **** 
 2723              		.loc 1 3067 0
 2724 0006 04F11805 		add	r5, r4, #24
 2725 000a 2846     		mov	r0, r5
 2726              	.LVL262:
 2727 000c FFF7FEFF 		bl	uxListRemove
 2728              	.LVL263:
3069:FreeRTOS\src/tasks.c **** 	{
 2729              		.loc 1 3069 0
 2730 0010 164B     		ldr	r3, .L248
 2731 0012 D3F80C33 		ldr	r3, [r3, #780]
 2732 0016 B3B9     		cbnz	r3, .L243
3071:FreeRTOS\src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2733              		.loc 1 3071 0
 2734 0018 251D     		adds	r5, r4, #4
 2735 001a 2846     		mov	r0, r5
 2736 001c FFF7FEFF 		bl	uxListRemove
 2737              	.LVL264:
3072:FreeRTOS\src/tasks.c **** 	}
 2738              		.loc 1 3072 0
 2739 0020 E36A     		ldr	r3, [r4, #44]
 2740 0022 0122     		movs	r2, #1
 2741 0024 02FA03F1 		lsl	r1, r2, r3
 2742 0028 1048     		ldr	r0, .L248
 2743 002a D0F80023 		ldr	r2, [r0, #768]
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 148


 2744 002e 0A43     		orrs	r2, r2, r1
 2745 0030 C0F80023 		str	r2, [r0, #768]
 2746 0034 3030     		adds	r0, r0, #48
 2747 0036 03EB8303 		add	r3, r3, r3, lsl #2
 2748 003a 9A00     		lsls	r2, r3, #2
 2749 003c 2946     		mov	r1, r5
 2750 003e 1044     		add	r0, r0, r2
 2751 0040 FFF7FEFF 		bl	vListInsertEnd
 2752              	.LVL265:
 2753 0044 03E0     		b	.L244
 2754              	.L243:
3078:FreeRTOS\src/tasks.c **** 	}
 2755              		.loc 1 3078 0
 2756 0046 2946     		mov	r1, r5
 2757 0048 0948     		ldr	r0, .L248+4
 2758 004a FFF7FEFF 		bl	vListInsertEnd
 2759              	.LVL266:
 2760              	.L244:
3081:FreeRTOS\src/tasks.c **** 	{
 2761              		.loc 1 3081 0
 2762 004e E26A     		ldr	r2, [r4, #44]
 2763 0050 064B     		ldr	r3, .L248
 2764 0052 D3F8F432 		ldr	r3, [r3, #756]
 2765 0056 DB6A     		ldr	r3, [r3, #44]
 2766 0058 9A42     		cmp	r2, r3
 2767 005a 04D9     		bls	.L246
 2768              	.LVL267:
3090:FreeRTOS\src/tasks.c **** 	}
 2769              		.loc 1 3090 0
 2770 005c 0120     		movs	r0, #1
 2771 005e 034B     		ldr	r3, .L248
 2772 0060 C3F81C03 		str	r0, [r3, #796]
 2773 0064 38BD     		pop	{r3, r4, r5, pc}
 2774              	.LVL268:
 2775              	.L246:
3094:FreeRTOS\src/tasks.c **** 	}
 2776              		.loc 1 3094 0
 2777 0066 0020     		movs	r0, #0
 2778              	.LVL269:
3112:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 2779              		.loc 1 3112 0
 2780 0068 38BD     		pop	{r3, r4, r5, pc}
 2781              	.LVL270:
 2782              	.L249:
 2783 006a 00BF     		.align	2
 2784              	.L248:
 2785 006c 00000000 		.word	.LANCHOR0
 2786 0070 14000000 		.word	.LANCHOR0+20
 2787              		.cfi_endproc
 2788              	.LFE32:
 2789              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2790              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2791              		.align	2
 2792              		.global	vTaskRemoveFromUnorderedEventList
 2793              		.thumb
 2794              		.thumb_func
 2795              		.type	vTaskRemoveFromUnorderedEventList, %function
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 149


 2796              	vTaskRemoveFromUnorderedEventList:
 2797              	.LFB33:
3116:FreeRTOS\src/tasks.c **** TCB_t *pxUnblockedTCB;
 2798              		.loc 1 3116 0
 2799              		.cfi_startproc
 2800              		@ args = 0, pretend = 0, frame = 0
 2801              		@ frame_needed = 0, uses_anonymous_args = 0
 2802              	.LVL271:
 2803 0000 70B5     		push	{r4, r5, r6, lr}
 2804              		.cfi_def_cfa_offset 16
 2805              		.cfi_offset 4, -16
 2806              		.cfi_offset 5, -12
 2807              		.cfi_offset 6, -8
 2808              		.cfi_offset 14, -4
3124:FreeRTOS\src/tasks.c **** 
 2809              		.loc 1 3124 0
 2810 0002 41F00041 		orr	r1, r1, #-2147483648
 2811              	.LVL272:
 2812 0006 0160     		str	r1, [r0]
3128:FreeRTOS\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2813              		.loc 1 3128 0
 2814 0008 C568     		ldr	r5, [r0, #12]
 2815              	.LVL273:
3130:FreeRTOS\src/tasks.c **** 
 2816              		.loc 1 3130 0
 2817 000a FFF7FEFF 		bl	uxListRemove
 2818              	.LVL274:
3135:FreeRTOS\src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2819              		.loc 1 3135 0
 2820 000e 2E1D     		adds	r6, r5, #4
 2821 0010 3046     		mov	r0, r6
 2822 0012 FFF7FEFF 		bl	uxListRemove
 2823              	.LVL275:
3136:FreeRTOS\src/tasks.c **** 
 2824              		.loc 1 3136 0
 2825 0016 EB6A     		ldr	r3, [r5, #44]
 2826 0018 0122     		movs	r2, #1
 2827 001a 02FA03F1 		lsl	r1, r2, r3
 2828 001e 0C4C     		ldr	r4, .L253
 2829 0020 D4F80023 		ldr	r2, [r4, #768]
 2830 0024 0A43     		orrs	r2, r2, r1
 2831 0026 C4F80023 		str	r2, [r4, #768]
 2832 002a 04F13000 		add	r0, r4, #48
 2833 002e 03EB8303 		add	r3, r3, r3, lsl #2
 2834 0032 9A00     		lsls	r2, r3, #2
 2835 0034 3146     		mov	r1, r6
 2836 0036 1044     		add	r0, r0, r2
 2837 0038 FFF7FEFF 		bl	vListInsertEnd
 2838              	.LVL276:
3138:FreeRTOS\src/tasks.c **** 	{
 2839              		.loc 1 3138 0
 2840 003c EA6A     		ldr	r2, [r5, #44]
 2841 003e D4F8F432 		ldr	r3, [r4, #756]
 2842 0042 DB6A     		ldr	r3, [r3, #44]
 2843 0044 9A42     		cmp	r2, r3
 2844 0046 02D9     		bls	.L250
3144:FreeRTOS\src/tasks.c **** 	}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 150


 2845              		.loc 1 3144 0
 2846 0048 0122     		movs	r2, #1
 2847 004a C4F81C23 		str	r2, [r4, #796]
 2848              	.L250:
 2849 004e 70BD     		pop	{r4, r5, r6, pc}
 2850              	.LVL277:
 2851              	.L254:
 2852              		.align	2
 2853              	.L253:
 2854 0050 00000000 		.word	.LANCHOR0
 2855              		.cfi_endproc
 2856              	.LFE33:
 2857              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2858              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2859              		.align	2
 2860              		.global	vTaskSetTimeOutState
 2861              		.thumb
 2862              		.thumb_func
 2863              		.type	vTaskSetTimeOutState, %function
 2864              	vTaskSetTimeOutState:
 2865              	.LFB34:
3150:FreeRTOS\src/tasks.c **** 	configASSERT( pxTimeOut );
 2866              		.loc 1 3150 0
 2867              		.cfi_startproc
 2868              		@ args = 0, pretend = 0, frame = 0
 2869              		@ frame_needed = 0, uses_anonymous_args = 0
 2870              	.LVL278:
 2871 0000 10B5     		push	{r4, lr}
 2872              		.cfi_def_cfa_offset 8
 2873              		.cfi_offset 4, -8
 2874              		.cfi_offset 14, -4
 2875 0002 0446     		mov	r4, r0
3152:FreeRTOS\src/tasks.c **** 	{
 2876              		.loc 1 3152 0
 2877 0004 FFF7FEFF 		bl	vPortEnterCritical
 2878              	.LVL279:
3154:FreeRTOS\src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 2879              		.loc 1 3154 0
 2880 0008 044B     		ldr	r3, .L257
 2881 000a D3F81423 		ldr	r2, [r3, #788]
 2882 000e 2260     		str	r2, [r4]
3155:FreeRTOS\src/tasks.c **** 	}
 2883              		.loc 1 3155 0
 2884 0010 D3F80833 		ldr	r3, [r3, #776]
 2885 0014 6360     		str	r3, [r4, #4]
3157:FreeRTOS\src/tasks.c **** }
 2886              		.loc 1 3157 0
 2887 0016 FFF7FEFF 		bl	vPortExitCritical
 2888              	.LVL280:
 2889 001a 10BD     		pop	{r4, pc}
 2890              	.LVL281:
 2891              	.L258:
 2892              		.align	2
 2893              	.L257:
 2894 001c 00000000 		.word	.LANCHOR0
 2895              		.cfi_endproc
 2896              	.LFE34:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 151


 2897              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2898              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2899              		.align	2
 2900              		.global	vTaskInternalSetTimeOutState
 2901              		.thumb
 2902              		.thumb_func
 2903              		.type	vTaskInternalSetTimeOutState, %function
 2904              	vTaskInternalSetTimeOutState:
 2905              	.LFB35:
3162:FreeRTOS\src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 2906              		.loc 1 3162 0
 2907              		.cfi_startproc
 2908              		@ args = 0, pretend = 0, frame = 0
 2909              		@ frame_needed = 0, uses_anonymous_args = 0
 2910              		@ link register save eliminated.
 2911              	.LVL282:
3164:FreeRTOS\src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2912              		.loc 1 3164 0
 2913 0000 034B     		ldr	r3, .L260
 2914 0002 D3F81423 		ldr	r2, [r3, #788]
 2915 0006 0260     		str	r2, [r0]
3165:FreeRTOS\src/tasks.c **** }
 2916              		.loc 1 3165 0
 2917 0008 D3F80833 		ldr	r3, [r3, #776]
 2918 000c 4360     		str	r3, [r0, #4]
 2919 000e 7047     		bx	lr
 2920              	.L261:
 2921              		.align	2
 2922              	.L260:
 2923 0010 00000000 		.word	.LANCHOR0
 2924              		.cfi_endproc
 2925              	.LFE35:
 2926              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2927              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2928              		.align	2
 2929              		.global	xTaskCheckForTimeOut
 2930              		.thumb
 2931              		.thumb_func
 2932              		.type	xTaskCheckForTimeOut, %function
 2933              	xTaskCheckForTimeOut:
 2934              	.LFB36:
3170:FreeRTOS\src/tasks.c **** BaseType_t xReturn;
 2935              		.loc 1 3170 0
 2936              		.cfi_startproc
 2937              		@ args = 0, pretend = 0, frame = 0
 2938              		@ frame_needed = 0, uses_anonymous_args = 0
 2939              	.LVL283:
 2940 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2941              		.cfi_def_cfa_offset 24
 2942              		.cfi_offset 3, -24
 2943              		.cfi_offset 4, -20
 2944              		.cfi_offset 5, -16
 2945              		.cfi_offset 6, -12
 2946              		.cfi_offset 7, -8
 2947              		.cfi_offset 14, -4
 2948 0002 0446     		mov	r4, r0
 2949 0004 0D46     		mov	r5, r1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 152


3176:FreeRTOS\src/tasks.c **** 	{
 2950              		.loc 1 3176 0
 2951 0006 FFF7FEFF 		bl	vPortEnterCritical
 2952              	.LVL284:
 2953              	.LBB52:
3179:FreeRTOS\src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2954              		.loc 1 3179 0
 2955 000a 124B     		ldr	r3, .L269
 2956 000c D3F80813 		ldr	r1, [r3, #776]
 2957              	.LVL285:
3180:FreeRTOS\src/tasks.c **** 
 2958              		.loc 1 3180 0
 2959 0010 6268     		ldr	r2, [r4, #4]
 2960 0012 881A     		subs	r0, r1, r2
 2961              	.LVL286:
3194:FreeRTOS\src/tasks.c **** 			{
 2962              		.loc 1 3194 0
 2963 0014 2B68     		ldr	r3, [r5]
 2964 0016 B3F1FF3F 		cmp	r3, #-1
 2965 001a 14D0     		beq	.L266
3204:FreeRTOS\src/tasks.c **** 		{
 2966              		.loc 1 3204 0
 2967 001c 2768     		ldr	r7, [r4]
 2968 001e 0D4E     		ldr	r6, .L269
 2969 0020 D6F81463 		ldr	r6, [r6, #788]
 2970 0024 B742     		cmp	r7, r6
 2971 0026 01D0     		beq	.L264
3204:FreeRTOS\src/tasks.c **** 		{
 2972              		.loc 1 3204 0 is_stmt 0 discriminator 1
 2973 0028 9142     		cmp	r1, r2
 2974 002a 0ED2     		bcs	.L267
 2975              	.L264:
3213:FreeRTOS\src/tasks.c **** 		{
 2976              		.loc 1 3213 0 is_stmt 1
 2977 002c 9842     		cmp	r0, r3
 2978 002e 06D2     		bcs	.L265
3216:FreeRTOS\src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 2979              		.loc 1 3216 0
 2980 0030 1B1A     		subs	r3, r3, r0
 2981 0032 2B60     		str	r3, [r5]
3217:FreeRTOS\src/tasks.c **** 			xReturn = pdFALSE;
 2982              		.loc 1 3217 0
 2983 0034 2046     		mov	r0, r4
 2984              	.LVL287:
 2985 0036 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2986              	.LVL288:
3218:FreeRTOS\src/tasks.c **** 		}
 2987              		.loc 1 3218 0
 2988 003a 0024     		movs	r4, #0
 2989              	.LVL289:
 2990 003c 06E0     		b	.L263
 2991              	.LVL290:
 2992              	.L265:
3222:FreeRTOS\src/tasks.c **** 			xReturn = pdTRUE;
 2993              		.loc 1 3222 0
 2994 003e 0023     		movs	r3, #0
 2995 0040 2B60     		str	r3, [r5]
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 153


 2996              	.LVL291:
3223:FreeRTOS\src/tasks.c **** 		}
 2997              		.loc 1 3223 0
 2998 0042 0124     		movs	r4, #1
 2999              	.LVL292:
 3000 0044 02E0     		b	.L263
 3001              	.LVL293:
 3002              	.L266:
3199:FreeRTOS\src/tasks.c **** 			}
 3003              		.loc 1 3199 0
 3004 0046 0024     		movs	r4, #0
 3005              	.LVL294:
 3006 0048 00E0     		b	.L263
 3007              	.LVL295:
 3008              	.L267:
3211:FreeRTOS\src/tasks.c **** 		}
 3009              		.loc 1 3211 0
 3010 004a 0124     		movs	r4, #1
 3011              	.LVL296:
 3012              	.L263:
 3013              	.LBE52:
3226:FreeRTOS\src/tasks.c **** 
 3014              		.loc 1 3226 0
 3015 004c FFF7FEFF 		bl	vPortExitCritical
 3016              	.LVL297:
3229:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 3017              		.loc 1 3229 0
 3018 0050 2046     		mov	r0, r4
 3019 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3020              	.LVL298:
 3021              	.L270:
 3022              		.align	2
 3023              	.L269:
 3024 0054 00000000 		.word	.LANCHOR0
 3025              		.cfi_endproc
 3026              	.LFE36:
 3027              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3028              		.section	.text.vTaskMissedYield,"ax",%progbits
 3029              		.align	2
 3030              		.global	vTaskMissedYield
 3031              		.thumb
 3032              		.thumb_func
 3033              		.type	vTaskMissedYield, %function
 3034              	vTaskMissedYield:
 3035              	.LFB37:
3233:FreeRTOS\src/tasks.c **** 	xYieldPending = pdTRUE;
 3036              		.loc 1 3233 0
 3037              		.cfi_startproc
 3038              		@ args = 0, pretend = 0, frame = 0
 3039              		@ frame_needed = 0, uses_anonymous_args = 0
 3040              		@ link register save eliminated.
3234:FreeRTOS\src/tasks.c **** }
 3041              		.loc 1 3234 0
 3042 0000 0122     		movs	r2, #1
 3043 0002 024B     		ldr	r3, .L272
 3044 0004 C3F81C23 		str	r2, [r3, #796]
 3045 0008 7047     		bx	lr
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 154


 3046              	.L273:
 3047 000a 00BF     		.align	2
 3048              	.L272:
 3049 000c 00000000 		.word	.LANCHOR0
 3050              		.cfi_endproc
 3051              	.LFE37:
 3052              		.size	vTaskMissedYield, .-vTaskMissedYield
 3053              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3054              		.align	2
 3055              		.global	uxTaskGetStackHighWaterMark
 3056              		.thumb
 3057              		.thumb_func
 3058              		.type	uxTaskGetStackHighWaterMark, %function
 3059              	uxTaskGetStackHighWaterMark:
 3060              	.LFB42:
3712:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 3061              		.loc 1 3712 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 0
 3064              		@ frame_needed = 0, uses_anonymous_args = 0
 3065              	.LVL299:
 3066 0000 08B5     		push	{r3, lr}
 3067              		.cfi_def_cfa_offset 8
 3068              		.cfi_offset 3, -8
 3069              		.cfi_offset 14, -4
3717:FreeRTOS\src/tasks.c **** 
 3070              		.loc 1 3717 0
 3071 0002 0346     		mov	r3, r0
 3072 0004 10B9     		cbnz	r0, .L275
3717:FreeRTOS\src/tasks.c **** 
 3073              		.loc 1 3717 0 is_stmt 0 discriminator 1
 3074 0006 034B     		ldr	r3, .L277
 3075 0008 D3F8F432 		ldr	r3, [r3, #756]
 3076              	.LVL300:
 3077              	.L275:
3729:FreeRTOS\src/tasks.c **** 
 3078              		.loc 1 3729 0 is_stmt 1 discriminator 4
 3079 000c 186B     		ldr	r0, [r3, #48]
 3080 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3081              	.LVL301:
3732:FreeRTOS\src/tasks.c **** 
 3082              		.loc 1 3732 0 discriminator 4
 3083 0012 08BD     		pop	{r3, pc}
 3084              	.L278:
 3085              		.align	2
 3086              	.L277:
 3087 0014 00000000 		.word	.LANCHOR0
 3088              		.cfi_endproc
 3089              	.LFE42:
 3090              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3091              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3092              		.align	2
 3093              		.global	xTaskGetCurrentTaskHandle
 3094              		.thumb
 3095              		.thumb_func
 3096              		.type	xTaskGetCurrentTaskHandle, %function
 3097              	xTaskGetCurrentTaskHandle:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 155


 3098              	.LFB45:
3820:FreeRTOS\src/tasks.c **** 	TaskHandle_t xReturn;
 3099              		.loc 1 3820 0
 3100              		.cfi_startproc
 3101              		@ args = 0, pretend = 0, frame = 0
 3102              		@ frame_needed = 0, uses_anonymous_args = 0
 3103              		@ link register save eliminated.
3826:FreeRTOS\src/tasks.c **** 
 3104              		.loc 1 3826 0
 3105 0000 014B     		ldr	r3, .L280
 3106 0002 D3F8F402 		ldr	r0, [r3, #756]
 3107              	.LVL302:
3829:FreeRTOS\src/tasks.c **** 
 3108              		.loc 1 3829 0
 3109 0006 7047     		bx	lr
 3110              	.L281:
 3111              		.align	2
 3112              	.L280:
 3113 0008 00000000 		.word	.LANCHOR0
 3114              		.cfi_endproc
 3115              	.LFE45:
 3116              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3117              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3118              		.align	2
 3119              		.global	xTaskGetSchedulerState
 3120              		.thumb
 3121              		.thumb_func
 3122              		.type	xTaskGetSchedulerState, %function
 3123              	xTaskGetSchedulerState:
 3124              	.LFB46:
3837:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
 3125              		.loc 1 3837 0
 3126              		.cfi_startproc
 3127              		@ args = 0, pretend = 0, frame = 0
 3128              		@ frame_needed = 0, uses_anonymous_args = 0
 3129              		@ link register save eliminated.
3840:FreeRTOS\src/tasks.c **** 		{
 3130              		.loc 1 3840 0
 3131 0000 064B     		ldr	r3, .L286
 3132 0002 D3F8F832 		ldr	r3, [r3, #760]
 3133 0006 2BB1     		cbz	r3, .L284
3846:FreeRTOS\src/tasks.c **** 			{
 3134              		.loc 1 3846 0
 3135 0008 044B     		ldr	r3, .L286
 3136 000a D3F80C33 		ldr	r3, [r3, #780]
 3137 000e 1BB9     		cbnz	r3, .L285
3848:FreeRTOS\src/tasks.c **** 			}
 3138              		.loc 1 3848 0
 3139 0010 0220     		movs	r0, #2
 3140 0012 7047     		bx	lr
 3141              	.L284:
3842:FreeRTOS\src/tasks.c **** 		}
 3142              		.loc 1 3842 0
 3143 0014 0120     		movs	r0, #1
 3144 0016 7047     		bx	lr
 3145              	.L285:
3852:FreeRTOS\src/tasks.c **** 			}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 156


 3146              		.loc 1 3852 0
 3147 0018 0020     		movs	r0, #0
 3148              	.LVL303:
3857:FreeRTOS\src/tasks.c **** 
 3149              		.loc 1 3857 0
 3150 001a 7047     		bx	lr
 3151              	.L287:
 3152              		.align	2
 3153              	.L286:
 3154 001c 00000000 		.word	.LANCHOR0
 3155              		.cfi_endproc
 3156              	.LFE46:
 3157              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 3158              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3159              		.align	2
 3160              		.global	xTaskPriorityInherit
 3161              		.thumb
 3162              		.thumb_func
 3163              		.type	xTaskPriorityInherit, %function
 3164              	xTaskPriorityInherit:
 3165              	.LFB47:
3865:FreeRTOS\src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3166              		.loc 1 3865 0
 3167              		.cfi_startproc
 3168              		@ args = 0, pretend = 0, frame = 0
 3169              		@ frame_needed = 0, uses_anonymous_args = 0
 3170              	.LVL304:
3872:FreeRTOS\src/tasks.c **** 		{
 3171              		.loc 1 3872 0
 3172 0000 0028     		cmp	r0, #0
 3173 0002 58D0     		beq	.L294
3865:FreeRTOS\src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3174              		.loc 1 3865 0
 3175 0004 38B5     		push	{r3, r4, r5, lr}
 3176              		.cfi_def_cfa_offset 16
 3177              		.cfi_offset 3, -16
 3178              		.cfi_offset 4, -12
 3179              		.cfi_offset 5, -8
 3180              		.cfi_offset 14, -4
 3181 0006 0346     		mov	r3, r0
3877:FreeRTOS\src/tasks.c **** 			{
 3182              		.loc 1 3877 0
 3183 0008 C26A     		ldr	r2, [r0, #44]
 3184 000a 2D49     		ldr	r1, .L297
 3185 000c D1F8F412 		ldr	r1, [r1, #756]
 3186 0010 C96A     		ldr	r1, [r1, #44]
 3187 0012 8A42     		cmp	r2, r1
 3188 0014 46D2     		bcs	.L290
3882:FreeRTOS\src/tasks.c **** 				{
 3189              		.loc 1 3882 0
 3190 0016 8169     		ldr	r1, [r0, #24]
 3191 0018 0029     		cmp	r1, #0
 3192 001a 06DB     		blt	.L291
3884:FreeRTOS\src/tasks.c **** 				}
 3193              		.loc 1 3884 0
 3194 001c 2849     		ldr	r1, .L297
 3195 001e D1F8F412 		ldr	r1, [r1, #756]
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 157


 3196 0022 C96A     		ldr	r1, [r1, #44]
 3197 0024 C1F12001 		rsb	r1, r1, #32
 3198 0028 8161     		str	r1, [r0, #24]
 3199              	.L291:
3893:FreeRTOS\src/tasks.c **** 				{
 3200              		.loc 1 3893 0
 3201 002a 5869     		ldr	r0, [r3, #20]
 3202              	.LVL305:
 3203 002c 02EB8202 		add	r2, r2, r2, lsl #2
 3204 0030 9100     		lsls	r1, r2, #2
 3205 0032 244A     		ldr	r2, .L297+4
 3206 0034 1144     		add	r1, r1, r2
 3207 0036 8842     		cmp	r0, r1
 3208 0038 2DD1     		bne	.L292
 3209 003a 1C46     		mov	r4, r3
3895:FreeRTOS\src/tasks.c **** 					{
 3210              		.loc 1 3895 0
 3211 003c 1D1D     		adds	r5, r3, #4
 3212 003e 2846     		mov	r0, r5
 3213 0040 FFF7FEFF 		bl	uxListRemove
 3214              	.LVL306:
 3215 0044 80B9     		cbnz	r0, .L293
3897:FreeRTOS\src/tasks.c **** 					}
 3216              		.loc 1 3897 0
 3217 0046 E26A     		ldr	r2, [r4, #44]
 3218 0048 02EB8201 		add	r1, r2, r2, lsl #2
 3219 004c 8B00     		lsls	r3, r1, #2
 3220 004e 1C49     		ldr	r1, .L297
 3221 0050 0B44     		add	r3, r3, r1
 3222 0052 1B6B     		ldr	r3, [r3, #48]
 3223 0054 43B9     		cbnz	r3, .L293
3897:FreeRTOS\src/tasks.c **** 					}
 3224              		.loc 1 3897 0 is_stmt 0 discriminator 1
 3225 0056 0123     		movs	r3, #1
 3226 0058 03FA02F2 		lsl	r2, r3, r2
 3227 005c D1F80033 		ldr	r3, [r1, #768]
 3228 0060 23EA0202 		bic	r2, r3, r2
 3229 0064 C1F80023 		str	r2, [r1, #768]
 3230              	.L293:
3905:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3231              		.loc 1 3905 0 is_stmt 1
 3232 0068 1548     		ldr	r0, .L297
 3233 006a D0F8F432 		ldr	r3, [r0, #756]
 3234 006e DB6A     		ldr	r3, [r3, #44]
 3235 0070 E362     		str	r3, [r4, #44]
3906:FreeRTOS\src/tasks.c **** 				}
 3236              		.loc 1 3906 0
 3237 0072 0124     		movs	r4, #1
 3238              	.LVL307:
 3239 0074 04FA03F1 		lsl	r1, r4, r3
 3240 0078 D0F80023 		ldr	r2, [r0, #768]
 3241 007c 0A43     		orrs	r2, r2, r1
 3242 007e C0F80023 		str	r2, [r0, #768]
 3243 0082 3030     		adds	r0, r0, #48
 3244 0084 03EB8303 		add	r3, r3, r3, lsl #2
 3245 0088 9A00     		lsls	r2, r3, #2
 3246 008a 2946     		mov	r1, r5
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 158


 3247 008c 1044     		add	r0, r0, r2
 3248 008e FFF7FEFF 		bl	vListInsertEnd
 3249              	.LVL308:
3917:FreeRTOS\src/tasks.c **** 			}
 3250              		.loc 1 3917 0
 3251 0092 2046     		mov	r0, r4
 3252 0094 38BD     		pop	{r3, r4, r5, pc}
 3253              	.LVL309:
 3254              	.L292:
3911:FreeRTOS\src/tasks.c **** 				}
 3255              		.loc 1 3911 0
 3256 0096 0A4A     		ldr	r2, .L297
 3257 0098 D2F8F422 		ldr	r2, [r2, #756]
 3258 009c D26A     		ldr	r2, [r2, #44]
 3259 009e DA62     		str	r2, [r3, #44]
3917:FreeRTOS\src/tasks.c **** 			}
 3260              		.loc 1 3917 0
 3261 00a0 0120     		movs	r0, #1
 3262 00a2 38BD     		pop	{r3, r4, r5, pc}
 3263              	.LVL310:
 3264              	.L290:
3921:FreeRTOS\src/tasks.c **** 				{
 3265              		.loc 1 3921 0
 3266 00a4 026C     		ldr	r2, [r0, #64]
 3267 00a6 064B     		ldr	r3, .L297
 3268 00a8 D3F8F432 		ldr	r3, [r3, #756]
 3269 00ac DB6A     		ldr	r3, [r3, #44]
 3270 00ae 9A42     		cmp	r2, r3
 3271 00b0 03D3     		bcc	.L295
3867:FreeRTOS\src/tasks.c **** 
 3272              		.loc 1 3867 0
 3273 00b2 0020     		movs	r0, #0
 3274              	.LVL311:
 3275 00b4 38BD     		pop	{r3, r4, r5, pc}
 3276              	.LVL312:
 3277              	.L294:
 3278              		.cfi_def_cfa_offset 0
 3279              		.cfi_restore 3
 3280              		.cfi_restore 4
 3281              		.cfi_restore 5
 3282              		.cfi_restore 14
 3283 00b6 0020     		movs	r0, #0
 3284              	.LVL313:
3944:FreeRTOS\src/tasks.c **** 
 3285              		.loc 1 3944 0
 3286 00b8 7047     		bx	lr
 3287              	.LVL314:
 3288              	.L295:
 3289              		.cfi_def_cfa_offset 16
 3290              		.cfi_offset 3, -16
 3291              		.cfi_offset 4, -12
 3292              		.cfi_offset 5, -8
 3293              		.cfi_offset 14, -4
3930:FreeRTOS\src/tasks.c **** 				}
 3294              		.loc 1 3930 0
 3295 00ba 0120     		movs	r0, #1
 3296              	.LVL315:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 159


3944:FreeRTOS\src/tasks.c **** 
 3297              		.loc 1 3944 0
 3298 00bc 38BD     		pop	{r3, r4, r5, pc}
 3299              	.L298:
 3300 00be 00BF     		.align	2
 3301              	.L297:
 3302 00c0 00000000 		.word	.LANCHOR0
 3303 00c4 30000000 		.word	.LANCHOR0+48
 3304              		.cfi_endproc
 3305              	.LFE47:
 3306              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3307              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3308              		.align	2
 3309              		.global	xTaskPriorityDisinherit
 3310              		.thumb
 3311              		.thumb_func
 3312              		.type	xTaskPriorityDisinherit, %function
 3313              	xTaskPriorityDisinherit:
 3314              	.LFB48:
3952:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3315              		.loc 1 3952 0
 3316              		.cfi_startproc
 3317              		@ args = 0, pretend = 0, frame = 0
 3318              		@ frame_needed = 0, uses_anonymous_args = 0
 3319              	.LVL316:
3956:FreeRTOS\src/tasks.c **** 		{
 3320              		.loc 1 3956 0
 3321 0000 0028     		cmp	r0, #0
 3322 0002 38D0     		beq	.L302
3952:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3323              		.loc 1 3952 0
 3324 0004 38B5     		push	{r3, r4, r5, lr}
 3325              		.cfi_def_cfa_offset 16
 3326              		.cfi_offset 3, -16
 3327              		.cfi_offset 4, -12
 3328              		.cfi_offset 5, -8
 3329              		.cfi_offset 14, -4
 3330 0006 0346     		mov	r3, r0
3964:FreeRTOS\src/tasks.c **** 
 3331              		.loc 1 3964 0
 3332 0008 426C     		ldr	r2, [r0, #68]
 3333 000a 013A     		subs	r2, r2, #1
 3334 000c 4264     		str	r2, [r0, #68]
3968:FreeRTOS\src/tasks.c **** 			{
 3335              		.loc 1 3968 0
 3336 000e C06A     		ldr	r0, [r0, #44]
 3337              	.LVL317:
 3338 0010 196C     		ldr	r1, [r3, #64]
 3339 0012 8842     		cmp	r0, r1
 3340 0014 31D0     		beq	.L303
3971:FreeRTOS\src/tasks.c **** 				{
 3341              		.loc 1 3971 0
 3342 0016 92BB     		cbnz	r2, .L304
 3343 0018 1C46     		mov	r4, r3
3978:FreeRTOS\src/tasks.c **** 					{
 3344              		.loc 1 3978 0
 3345 001a 1D1D     		adds	r5, r3, #4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 160


 3346 001c 2846     		mov	r0, r5
 3347 001e FFF7FEFF 		bl	uxListRemove
 3348              	.LVL318:
 3349 0022 80B9     		cbnz	r0, .L301
3980:FreeRTOS\src/tasks.c **** 					}
 3350              		.loc 1 3980 0
 3351 0024 E26A     		ldr	r2, [r4, #44]
 3352 0026 02EB8201 		add	r1, r2, r2, lsl #2
 3353 002a 8B00     		lsls	r3, r1, #2
 3354 002c 1549     		ldr	r1, .L306
 3355 002e 0B44     		add	r3, r3, r1
 3356 0030 1B6B     		ldr	r3, [r3, #48]
 3357 0032 43B9     		cbnz	r3, .L301
3980:FreeRTOS\src/tasks.c **** 					}
 3358              		.loc 1 3980 0 is_stmt 0 discriminator 1
 3359 0034 0123     		movs	r3, #1
 3360 0036 03FA02F2 		lsl	r2, r3, r2
 3361 003a D1F80033 		ldr	r3, [r1, #768]
 3362 003e 23EA0202 		bic	r2, r3, r2
 3363 0042 C1F80023 		str	r2, [r1, #768]
 3364              	.L301:
3990:FreeRTOS\src/tasks.c **** 
 3365              		.loc 1 3990 0 is_stmt 1
 3366 0046 236C     		ldr	r3, [r4, #64]
 3367 0048 E362     		str	r3, [r4, #44]
3995:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3368              		.loc 1 3995 0
 3369 004a C3F12002 		rsb	r2, r3, #32
 3370 004e A261     		str	r2, [r4, #24]
3996:FreeRTOS\src/tasks.c **** 
 3371              		.loc 1 3996 0
 3372 0050 0124     		movs	r4, #1
 3373              	.LVL319:
 3374 0052 04FA03F1 		lsl	r1, r4, r3
 3375 0056 0B48     		ldr	r0, .L306
 3376 0058 D0F80023 		ldr	r2, [r0, #768]
 3377 005c 0A43     		orrs	r2, r2, r1
 3378 005e C0F80023 		str	r2, [r0, #768]
 3379 0062 3030     		adds	r0, r0, #48
 3380 0064 03EB8303 		add	r3, r3, r3, lsl #2
 3381 0068 9A00     		lsls	r2, r3, #2
 3382 006a 2946     		mov	r1, r5
 3383 006c 1044     		add	r0, r0, r2
 3384 006e FFF7FEFF 		bl	vListInsertEnd
 3385              	.LVL320:
4006:FreeRTOS\src/tasks.c **** 				}
 3386              		.loc 1 4006 0
 3387 0072 2046     		mov	r0, r4
 3388 0074 38BD     		pop	{r3, r4, r5, pc}
 3389              	.LVL321:
 3390              	.L302:
 3391              		.cfi_def_cfa_offset 0
 3392              		.cfi_restore 3
 3393              		.cfi_restore 4
 3394              		.cfi_restore 5
 3395              		.cfi_restore 14
3954:FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 161


 3396              		.loc 1 3954 0
 3397 0076 0020     		movs	r0, #0
 3398              	.LVL322:
4024:FreeRTOS\src/tasks.c **** 
 3399              		.loc 1 4024 0
 3400 0078 7047     		bx	lr
 3401              	.LVL323:
 3402              	.L303:
 3403              		.cfi_def_cfa_offset 16
 3404              		.cfi_offset 3, -16
 3405              		.cfi_offset 4, -12
 3406              		.cfi_offset 5, -8
 3407              		.cfi_offset 14, -4
3954:FreeRTOS\src/tasks.c **** 
 3408              		.loc 1 3954 0
 3409 007a 0020     		movs	r0, #0
 3410 007c 38BD     		pop	{r3, r4, r5, pc}
 3411              	.LVL324:
 3412              	.L304:
 3413 007e 0020     		movs	r0, #0
 3414              	.LVL325:
4024:FreeRTOS\src/tasks.c **** 
 3415              		.loc 1 4024 0
 3416 0080 38BD     		pop	{r3, r4, r5, pc}
 3417              	.LVL326:
 3418              	.L307:
 3419 0082 00BF     		.align	2
 3420              	.L306:
 3421 0084 00000000 		.word	.LANCHOR0
 3422              		.cfi_endproc
 3423              	.LFE48:
 3424              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3425              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3426              		.align	2
 3427              		.global	vTaskPriorityDisinheritAfterTimeout
 3428              		.thumb
 3429              		.thumb_func
 3430              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3431              	vTaskPriorityDisinheritAfterTimeout:
 3432              	.LFB49:
4032:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3433              		.loc 1 4032 0
 3434              		.cfi_startproc
 3435              		@ args = 0, pretend = 0, frame = 0
 3436              		@ frame_needed = 0, uses_anonymous_args = 0
 3437              	.LVL327:
4037:FreeRTOS\src/tasks.c **** 		{
 3438              		.loc 1 4037 0
 3439 0000 0028     		cmp	r0, #0
 3440 0002 44D0     		beq	.L314
4032:FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3441              		.loc 1 4032 0
 3442 0004 38B5     		push	{r3, r4, r5, lr}
 3443              		.cfi_def_cfa_offset 16
 3444              		.cfi_offset 3, -16
 3445              		.cfi_offset 4, -12
 3446              		.cfi_offset 5, -8
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 162


 3447              		.cfi_offset 14, -4
 3448 0006 0346     		mov	r3, r0
4047:FreeRTOS\src/tasks.c **** 			{
 3449              		.loc 1 4047 0
 3450 0008 026C     		ldr	r2, [r0, #64]
 3451 000a 8A42     		cmp	r2, r1
 3452 000c 00D2     		bcs	.L310
4049:FreeRTOS\src/tasks.c **** 			}
 3453              		.loc 1 4049 0
 3454 000e 0A46     		mov	r2, r1
 3455              	.L310:
 3456              	.LVL328:
4057:FreeRTOS\src/tasks.c **** 			{
 3457              		.loc 1 4057 0
 3458 0010 D96A     		ldr	r1, [r3, #44]
 3459              	.LVL329:
 3460 0012 8A42     		cmp	r2, r1
 3461 0014 3AD0     		beq	.L308
4063:FreeRTOS\src/tasks.c **** 				{
 3462              		.loc 1 4063 0
 3463 0016 586C     		ldr	r0, [r3, #68]
 3464              	.LVL330:
 3465 0018 0128     		cmp	r0, #1
 3466 001a 37D1     		bne	.L308
 3467              	.LVL331:
4075:FreeRTOS\src/tasks.c **** 
 3468              		.loc 1 4075 0
 3469 001c DA62     		str	r2, [r3, #44]
4079:FreeRTOS\src/tasks.c **** 					{
 3470              		.loc 1 4079 0
 3471 001e 9869     		ldr	r0, [r3, #24]
 3472 0020 0028     		cmp	r0, #0
 3473 0022 02DB     		blt	.L311
4081:FreeRTOS\src/tasks.c **** 					}
 3474              		.loc 1 4081 0
 3475 0024 C2F12002 		rsb	r2, r2, #32
 3476              	.LVL332:
 3477 0028 9A61     		str	r2, [r3, #24]
 3478              	.L311:
4094:FreeRTOS\src/tasks.c **** 					{
 3479              		.loc 1 4094 0
 3480 002a 5869     		ldr	r0, [r3, #20]
 3481 002c 01EB8101 		add	r1, r1, r1, lsl #2
 3482              	.LVL333:
 3483 0030 8A00     		lsls	r2, r1, #2
 3484 0032 1749     		ldr	r1, .L315
 3485 0034 0A44     		add	r2, r2, r1
 3486 0036 9042     		cmp	r0, r2
 3487 0038 28D1     		bne	.L308
 3488 003a 1C46     		mov	r4, r3
4096:FreeRTOS\src/tasks.c **** 						{
 3489              		.loc 1 4096 0
 3490 003c 1D1D     		adds	r5, r3, #4
 3491 003e 2846     		mov	r0, r5
 3492 0040 FFF7FEFF 		bl	uxListRemove
 3493              	.LVL334:
 3494 0044 80B9     		cbnz	r0, .L312
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 163


4098:FreeRTOS\src/tasks.c **** 						}
 3495              		.loc 1 4098 0
 3496 0046 E26A     		ldr	r2, [r4, #44]
 3497 0048 02EB8201 		add	r1, r2, r2, lsl #2
 3498 004c 8B00     		lsls	r3, r1, #2
 3499 004e 1149     		ldr	r1, .L315+4
 3500 0050 0B44     		add	r3, r3, r1
 3501 0052 1B6B     		ldr	r3, [r3, #48]
 3502 0054 43B9     		cbnz	r3, .L312
4098:FreeRTOS\src/tasks.c **** 						}
 3503              		.loc 1 4098 0 is_stmt 0 discriminator 1
 3504 0056 0123     		movs	r3, #1
 3505 0058 03FA02F2 		lsl	r2, r3, r2
 3506 005c D1F80033 		ldr	r3, [r1, #768]
 3507 0060 23EA0203 		bic	r3, r3, r2
 3508 0064 C1F80033 		str	r3, [r1, #768]
 3509              	.L312:
4105:FreeRTOS\src/tasks.c **** 					}
 3510              		.loc 1 4105 0 is_stmt 1
 3511 0068 E36A     		ldr	r3, [r4, #44]
 3512 006a 0122     		movs	r2, #1
 3513 006c 02FA03F1 		lsl	r1, r2, r3
 3514 0070 0848     		ldr	r0, .L315+4
 3515 0072 D0F80023 		ldr	r2, [r0, #768]
 3516 0076 0A43     		orrs	r2, r2, r1
 3517 0078 C0F80023 		str	r2, [r0, #768]
 3518 007c 3030     		adds	r0, r0, #48
 3519 007e 03EB8303 		add	r3, r3, r3, lsl #2
 3520 0082 9A00     		lsls	r2, r3, #2
 3521 0084 2946     		mov	r1, r5
 3522 0086 1044     		add	r0, r0, r2
 3523 0088 FFF7FEFF 		bl	vListInsertEnd
 3524              	.LVL335:
 3525              	.L308:
 3526 008c 38BD     		pop	{r3, r4, r5, pc}
 3527              	.LVL336:
 3528              	.L314:
 3529              		.cfi_def_cfa_offset 0
 3530              		.cfi_restore 3
 3531              		.cfi_restore 4
 3532              		.cfi_restore 5
 3533              		.cfi_restore 14
 3534 008e 7047     		bx	lr
 3535              	.L316:
 3536              		.align	2
 3537              	.L315:
 3538 0090 30000000 		.word	.LANCHOR0+48
 3539 0094 00000000 		.word	.LANCHOR0
 3540              		.cfi_endproc
 3541              	.LFE49:
 3542              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3543              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3544              		.align	2
 3545              		.global	uxTaskResetEventItemValue
 3546              		.thumb
 3547              		.thumb_func
 3548              		.type	uxTaskResetEventItemValue, %function
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 164


 3549              	uxTaskResetEventItemValue:
 3550              	.LFB50:
4447:FreeRTOS\src/tasks.c **** TickType_t uxReturn;
 3551              		.loc 1 4447 0
 3552              		.cfi_startproc
 3553              		@ args = 0, pretend = 0, frame = 0
 3554              		@ frame_needed = 0, uses_anonymous_args = 0
 3555              		@ link register save eliminated.
4450:FreeRTOS\src/tasks.c **** 
 3556              		.loc 1 4450 0
 3557 0000 064B     		ldr	r3, .L318
 3558 0002 D3F8F422 		ldr	r2, [r3, #756]
 3559 0006 9069     		ldr	r0, [r2, #24]
 3560              	.LVL337:
4454:FreeRTOS\src/tasks.c **** 
 3561              		.loc 1 4454 0
 3562 0008 D3F8F422 		ldr	r2, [r3, #756]
 3563 000c D3F8F432 		ldr	r3, [r3, #756]
 3564 0010 DB6A     		ldr	r3, [r3, #44]
 3565 0012 C3F12003 		rsb	r3, r3, #32
 3566 0016 9361     		str	r3, [r2, #24]
4457:FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 3567              		.loc 1 4457 0
 3568 0018 7047     		bx	lr
 3569              	.L319:
 3570 001a 00BF     		.align	2
 3571              	.L318:
 3572 001c 00000000 		.word	.LANCHOR0
 3573              		.cfi_endproc
 3574              	.LFE50:
 3575              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3576              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3577              		.align	2
 3578              		.global	pvTaskIncrementMutexHeldCount
 3579              		.thumb
 3580              		.thumb_func
 3581              		.type	pvTaskIncrementMutexHeldCount, %function
 3582              	pvTaskIncrementMutexHeldCount:
 3583              	.LFB51:
4463:FreeRTOS\src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3584              		.loc 1 4463 0
 3585              		.cfi_startproc
 3586              		@ args = 0, pretend = 0, frame = 0
 3587              		@ frame_needed = 0, uses_anonymous_args = 0
 3588              		@ link register save eliminated.
4466:FreeRTOS\src/tasks.c **** 		{
 3589              		.loc 1 4466 0
 3590 0000 064B     		ldr	r3, .L322
 3591 0002 D3F8F432 		ldr	r3, [r3, #756]
 3592 0006 2BB1     		cbz	r3, .L321
4468:FreeRTOS\src/tasks.c **** 		}
 3593              		.loc 1 4468 0
 3594 0008 044B     		ldr	r3, .L322
 3595 000a D3F8F422 		ldr	r2, [r3, #756]
 3596 000e 536C     		ldr	r3, [r2, #68]
 3597 0010 0133     		adds	r3, r3, #1
 3598 0012 5364     		str	r3, [r2, #68]
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 165


 3599              	.L321:
4471:FreeRTOS\src/tasks.c **** 	}
 3600              		.loc 1 4471 0
 3601 0014 014B     		ldr	r3, .L322
 3602 0016 D3F8F402 		ldr	r0, [r3, #756]
4472:FreeRTOS\src/tasks.c **** 
 3603              		.loc 1 4472 0
 3604 001a 7047     		bx	lr
 3605              	.L323:
 3606              		.align	2
 3607              	.L322:
 3608 001c 00000000 		.word	.LANCHOR0
 3609              		.cfi_endproc
 3610              	.LFE51:
 3611              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3612              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3613              		.align	2
 3614              		.global	ulTaskNotifyTake
 3615              		.thumb
 3616              		.thumb_func
 3617              		.type	ulTaskNotifyTake, %function
 3618              	ulTaskNotifyTake:
 3619              	.LFB52:
4480:FreeRTOS\src/tasks.c **** 	uint32_t ulReturn;
 3620              		.loc 1 4480 0
 3621              		.cfi_startproc
 3622              		@ args = 0, pretend = 0, frame = 0
 3623              		@ frame_needed = 0, uses_anonymous_args = 0
 3624              	.LVL338:
 3625 0000 38B5     		push	{r3, r4, r5, lr}
 3626              		.cfi_def_cfa_offset 16
 3627              		.cfi_offset 3, -16
 3628              		.cfi_offset 4, -12
 3629              		.cfi_offset 5, -8
 3630              		.cfi_offset 14, -4
 3631 0002 0546     		mov	r5, r0
 3632 0004 0C46     		mov	r4, r1
4483:FreeRTOS\src/tasks.c **** 		{
 3633              		.loc 1 4483 0
 3634 0006 FFF7FEFF 		bl	vPortEnterCritical
 3635              	.LVL339:
4486:FreeRTOS\src/tasks.c **** 			{
 3636              		.loc 1 4486 0
 3637 000a 1B4B     		ldr	r3, .L329
 3638 000c D3F8F432 		ldr	r3, [r3, #756]
 3639 0010 9B6C     		ldr	r3, [r3, #72]
 3640 0012 93B9     		cbnz	r3, .L325
4489:FreeRTOS\src/tasks.c **** 
 3641              		.loc 1 4489 0
 3642 0014 184B     		ldr	r3, .L329
 3643 0016 D3F8F432 		ldr	r3, [r3, #756]
 3644 001a 0122     		movs	r2, #1
 3645 001c 83F84C20 		strb	r2, [r3, #76]
4491:FreeRTOS\src/tasks.c **** 				{
 3646              		.loc 1 4491 0
 3647 0020 5CB1     		cbz	r4, .L325
4493:FreeRTOS\src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 166


 3648              		.loc 1 4493 0
 3649 0022 1146     		mov	r1, r2
 3650 0024 2046     		mov	r0, r4
 3651 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3652              	.LVL340:
4500:FreeRTOS\src/tasks.c **** 				}
 3653              		.loc 1 4500 0
 3654 002a 4FF08052 		mov	r2, #268435456
 3655 002e 134B     		ldr	r3, .L329+4
 3656 0030 1A60     		str	r2, [r3]
 3657              		.syntax unified
 3658              	@ 4500 "FreeRTOS\src\tasks.c" 1
 3659 0032 BFF34F8F 		dsb
 3660              	@ 0 "" 2
 3661              	@ 4500 "FreeRTOS\src\tasks.c" 1
 3662 0036 BFF36F8F 		isb
 3663              	@ 0 "" 2
 3664              		.thumb
 3665              		.syntax unified
 3666              	.L325:
4512:FreeRTOS\src/tasks.c **** 
 3667              		.loc 1 4512 0
 3668 003a FFF7FEFF 		bl	vPortExitCritical
 3669              	.LVL341:
4514:FreeRTOS\src/tasks.c **** 		{
 3670              		.loc 1 4514 0
 3671 003e FFF7FEFF 		bl	vPortEnterCritical
 3672              	.LVL342:
4517:FreeRTOS\src/tasks.c **** 
 3673              		.loc 1 4517 0
 3674 0042 0D4B     		ldr	r3, .L329
 3675 0044 D3F8F432 		ldr	r3, [r3, #756]
 3676 0048 9C6C     		ldr	r4, [r3, #72]
 3677              	.LVL343:
4519:FreeRTOS\src/tasks.c **** 			{
 3678              		.loc 1 4519 0
 3679 004a 5CB1     		cbz	r4, .L326
4521:FreeRTOS\src/tasks.c **** 				{
 3680              		.loc 1 4521 0
 3681 004c 2DB1     		cbz	r5, .L327
4523:FreeRTOS\src/tasks.c **** 				}
 3682              		.loc 1 4523 0
 3683 004e 0A4B     		ldr	r3, .L329
 3684 0050 D3F8F432 		ldr	r3, [r3, #756]
 3685 0054 0022     		movs	r2, #0
 3686 0056 9A64     		str	r2, [r3, #72]
 3687 0058 04E0     		b	.L326
 3688              	.L327:
4527:FreeRTOS\src/tasks.c **** 				}
 3689              		.loc 1 4527 0
 3690 005a 074B     		ldr	r3, .L329
 3691 005c D3F8F432 		ldr	r3, [r3, #756]
 3692 0060 621E     		subs	r2, r4, #1
 3693 0062 9A64     		str	r2, [r3, #72]
 3694              	.L326:
4535:FreeRTOS\src/tasks.c **** 		}
 3695              		.loc 1 4535 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 167


 3696 0064 044B     		ldr	r3, .L329
 3697 0066 D3F8F432 		ldr	r3, [r3, #756]
 3698 006a 0022     		movs	r2, #0
 3699 006c 83F84C20 		strb	r2, [r3, #76]
4537:FreeRTOS\src/tasks.c **** 
 3700              		.loc 1 4537 0
 3701 0070 FFF7FEFF 		bl	vPortExitCritical
 3702              	.LVL344:
4540:FreeRTOS\src/tasks.c **** 
 3703              		.loc 1 4540 0
 3704 0074 2046     		mov	r0, r4
 3705 0076 38BD     		pop	{r3, r4, r5, pc}
 3706              	.LVL345:
 3707              	.L330:
 3708              		.align	2
 3709              	.L329:
 3710 0078 00000000 		.word	.LANCHOR0
 3711 007c 04ED00E0 		.word	-536810236
 3712              		.cfi_endproc
 3713              	.LFE52:
 3714              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3715              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3716              		.align	2
 3717              		.global	xTaskNotifyWait
 3718              		.thumb
 3719              		.thumb_func
 3720              		.type	xTaskNotifyWait, %function
 3721              	xTaskNotifyWait:
 3722              	.LFB53:
4548:FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
 3723              		.loc 1 4548 0
 3724              		.cfi_startproc
 3725              		@ args = 0, pretend = 0, frame = 0
 3726              		@ frame_needed = 0, uses_anonymous_args = 0
 3727              	.LVL346:
 3728 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3729              		.cfi_def_cfa_offset 24
 3730              		.cfi_offset 3, -24
 3731              		.cfi_offset 4, -20
 3732              		.cfi_offset 5, -16
 3733              		.cfi_offset 6, -12
 3734              		.cfi_offset 7, -8
 3735              		.cfi_offset 14, -4
 3736 0002 0746     		mov	r7, r0
 3737 0004 0D46     		mov	r5, r1
 3738 0006 1446     		mov	r4, r2
 3739 0008 1E46     		mov	r6, r3
4551:FreeRTOS\src/tasks.c **** 		{
 3740              		.loc 1 4551 0
 3741 000a FFF7FEFF 		bl	vPortEnterCritical
 3742              	.LVL347:
4554:FreeRTOS\src/tasks.c **** 			{
 3743              		.loc 1 4554 0
 3744 000e 234B     		ldr	r3, .L337
 3745 0010 D3F8F432 		ldr	r3, [r3, #756]
 3746 0014 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3747 0018 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 168


 3748 001a 022B     		cmp	r3, #2
 3749 001c 18D0     		beq	.L332
4559:FreeRTOS\src/tasks.c **** 
 3750              		.loc 1 4559 0
 3751 001e 1F4B     		ldr	r3, .L337
 3752 0020 D3F8F422 		ldr	r2, [r3, #756]
 3753 0024 906C     		ldr	r0, [r2, #72]
 3754 0026 20EA0700 		bic	r0, r0, r7
 3755 002a 9064     		str	r0, [r2, #72]
4562:FreeRTOS\src/tasks.c **** 
 3756              		.loc 1 4562 0
 3757 002c D3F8F432 		ldr	r3, [r3, #756]
 3758 0030 0122     		movs	r2, #1
 3759 0032 83F84C20 		strb	r2, [r3, #76]
4564:FreeRTOS\src/tasks.c **** 				{
 3760              		.loc 1 4564 0
 3761 0036 5EB1     		cbz	r6, .L332
4566:FreeRTOS\src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3762              		.loc 1 4566 0
 3763 0038 1146     		mov	r1, r2
 3764 003a 3046     		mov	r0, r6
 3765 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3766              	.LVL348:
4573:FreeRTOS\src/tasks.c **** 				}
 3767              		.loc 1 4573 0
 3768 0040 4FF08052 		mov	r2, #268435456
 3769 0044 164B     		ldr	r3, .L337+4
 3770 0046 1A60     		str	r2, [r3]
 3771              		.syntax unified
 3772              	@ 4573 "FreeRTOS\src\tasks.c" 1
 3773 0048 BFF34F8F 		dsb
 3774              	@ 0 "" 2
 3775              	@ 4573 "FreeRTOS\src\tasks.c" 1
 3776 004c BFF36F8F 		isb
 3777              	@ 0 "" 2
 3778              		.thumb
 3779              		.syntax unified
 3780              	.L332:
4585:FreeRTOS\src/tasks.c **** 
 3781              		.loc 1 4585 0
 3782 0050 FFF7FEFF 		bl	vPortExitCritical
 3783              	.LVL349:
4587:FreeRTOS\src/tasks.c **** 		{
 3784              		.loc 1 4587 0
 3785 0054 FFF7FEFF 		bl	vPortEnterCritical
 3786              	.LVL350:
4591:FreeRTOS\src/tasks.c **** 			{
 3787              		.loc 1 4591 0
 3788 0058 24B1     		cbz	r4, .L333
4595:FreeRTOS\src/tasks.c **** 			}
 3789              		.loc 1 4595 0
 3790 005a 104B     		ldr	r3, .L337
 3791 005c D3F8F432 		ldr	r3, [r3, #756]
 3792 0060 9B6C     		ldr	r3, [r3, #72]
 3793 0062 2360     		str	r3, [r4]
 3794              	.L333:
4602:FreeRTOS\src/tasks.c **** 			{
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 169


 3795              		.loc 1 4602 0
 3796 0064 0D4B     		ldr	r3, .L337
 3797 0066 D3F8F432 		ldr	r3, [r3, #756]
 3798 006a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3799 006e DBB2     		uxtb	r3, r3
 3800 0070 022B     		cmp	r3, #2
 3801 0072 08D1     		bne	.L335
4611:FreeRTOS\src/tasks.c **** 				xReturn = pdTRUE;
 3802              		.loc 1 4611 0
 3803 0074 094B     		ldr	r3, .L337
 3804 0076 D3F8F422 		ldr	r2, [r3, #756]
 3805 007a 936C     		ldr	r3, [r2, #72]
 3806 007c 23EA0505 		bic	r5, r3, r5
 3807              	.LVL351:
 3808 0080 9564     		str	r5, [r2, #72]
 3809              	.LVL352:
4612:FreeRTOS\src/tasks.c **** 			}
 3810              		.loc 1 4612 0
 3811 0082 0124     		movs	r4, #1
 3812              	.LVL353:
 3813 0084 00E0     		b	.L334
 3814              	.LVL354:
 3815              	.L335:
4605:FreeRTOS\src/tasks.c **** 			}
 3816              		.loc 1 4605 0
 3817 0086 0024     		movs	r4, #0
 3818              	.LVL355:
 3819              	.L334:
4615:FreeRTOS\src/tasks.c **** 		}
 3820              		.loc 1 4615 0
 3821 0088 044B     		ldr	r3, .L337
 3822 008a D3F8F432 		ldr	r3, [r3, #756]
 3823 008e 0022     		movs	r2, #0
 3824 0090 83F84C20 		strb	r2, [r3, #76]
4617:FreeRTOS\src/tasks.c **** 
 3825              		.loc 1 4617 0
 3826 0094 FFF7FEFF 		bl	vPortExitCritical
 3827              	.LVL356:
4620:FreeRTOS\src/tasks.c **** 
 3828              		.loc 1 4620 0
 3829 0098 2046     		mov	r0, r4
 3830 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3831              	.LVL357:
 3832              	.L338:
 3833              		.align	2
 3834              	.L337:
 3835 009c 00000000 		.word	.LANCHOR0
 3836 00a0 04ED00E0 		.word	-536810236
 3837              		.cfi_endproc
 3838              	.LFE53:
 3839              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3840              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3841              		.align	2
 3842              		.global	xTaskGenericNotify
 3843              		.thumb
 3844              		.thumb_func
 3845              		.type	xTaskGenericNotify, %function
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 170


 3846              	xTaskGenericNotify:
 3847              	.LFB54:
4628:FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
 3848              		.loc 1 4628 0
 3849              		.cfi_startproc
 3850              		@ args = 0, pretend = 0, frame = 0
 3851              		@ frame_needed = 0, uses_anonymous_args = 0
 3852              	.LVL358:
 3853 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3854              		.cfi_def_cfa_offset 24
 3855              		.cfi_offset 3, -24
 3856              		.cfi_offset 4, -20
 3857              		.cfi_offset 5, -16
 3858              		.cfi_offset 6, -12
 3859              		.cfi_offset 7, -8
 3860              		.cfi_offset 14, -4
 3861 0002 0446     		mov	r4, r0
 3862 0004 0F46     		mov	r7, r1
 3863 0006 1546     		mov	r5, r2
 3864 0008 1E46     		mov	r6, r3
 3865              	.LVL359:
4636:FreeRTOS\src/tasks.c **** 		{
 3866              		.loc 1 4636 0
 3867 000a FFF7FEFF 		bl	vPortEnterCritical
 3868              	.LVL360:
4638:FreeRTOS\src/tasks.c **** 			{
 3869              		.loc 1 4638 0
 3870 000e 0EB1     		cbz	r6, .L340
4640:FreeRTOS\src/tasks.c **** 			}
 3871              		.loc 1 4640 0
 3872 0010 A36C     		ldr	r3, [r4, #72]
 3873 0012 3360     		str	r3, [r6]
 3874              	.L340:
4643:FreeRTOS\src/tasks.c **** 
 3875              		.loc 1 4643 0
 3876 0014 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3877 0018 DBB2     		uxtb	r3, r3
 3878              	.LVL361:
4645:FreeRTOS\src/tasks.c **** 
 3879              		.loc 1 4645 0
 3880 001a 0222     		movs	r2, #2
 3881 001c 84F84C20 		strb	r2, [r4, #76]
4647:FreeRTOS\src/tasks.c **** 			{
 3882              		.loc 1 4647 0
 3883 0020 6A1E     		subs	r2, r5, #1
 3884 0022 032A     		cmp	r2, #3
 3885 0024 15D8     		bhi	.L348
 3886 0026 DFE802F0 		tbb	[pc, r2]
 3887              	.L343:
 3888 002a 02       		.byte	(.L342-.L343)/2
 3889 002b 07       		.byte	(.L344-.L343)/2
 3890 002c 0C       		.byte	(.L345-.L343)/2
 3891 002d 0F       		.byte	(.L346-.L343)/2
 3892              		.p2align 1
 3893              	.L342:
4650:FreeRTOS\src/tasks.c **** 					break;
 3894              		.loc 1 4650 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 171


 3895 002e A26C     		ldr	r2, [r4, #72]
 3896 0030 1743     		orrs	r7, r7, r2
 3897              	.LVL362:
 3898 0032 A764     		str	r7, [r4, #72]
4630:FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3899              		.loc 1 4630 0
 3900 0034 0125     		movs	r5, #1
4651:FreeRTOS\src/tasks.c **** 
 3901              		.loc 1 4651 0
 3902 0036 0FE0     		b	.L341
 3903              	.LVL363:
 3904              	.L344:
4654:FreeRTOS\src/tasks.c **** 					break;
 3905              		.loc 1 4654 0
 3906 0038 A26C     		ldr	r2, [r4, #72]
 3907 003a 0132     		adds	r2, r2, #1
 3908 003c A264     		str	r2, [r4, #72]
4630:FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3909              		.loc 1 4630 0
 3910 003e 0125     		movs	r5, #1
4655:FreeRTOS\src/tasks.c **** 
 3911              		.loc 1 4655 0
 3912 0040 0AE0     		b	.L341
 3913              	.L345:
4658:FreeRTOS\src/tasks.c **** 					break;
 3914              		.loc 1 4658 0
 3915 0042 A764     		str	r7, [r4, #72]
4630:FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3916              		.loc 1 4630 0
 3917 0044 0125     		movs	r5, #1
4659:FreeRTOS\src/tasks.c **** 
 3918              		.loc 1 4659 0
 3919 0046 07E0     		b	.L341
 3920              	.L346:
4662:FreeRTOS\src/tasks.c **** 					{
 3921              		.loc 1 4662 0
 3922 0048 022B     		cmp	r3, #2
 3923 004a 04D0     		beq	.L349
4664:FreeRTOS\src/tasks.c **** 					}
 3924              		.loc 1 4664 0
 3925 004c A764     		str	r7, [r4, #72]
4630:FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3926              		.loc 1 4630 0
 3927 004e 0125     		movs	r5, #1
 3928 0050 02E0     		b	.L341
 3929              	.L348:
 3930 0052 0125     		movs	r5, #1
 3931 0054 00E0     		b	.L341
 3932              	.L349:
4669:FreeRTOS\src/tasks.c **** 					}
 3933              		.loc 1 4669 0
 3934 0056 0025     		movs	r5, #0
 3935              	.LVL364:
 3936              	.L341:
4691:FreeRTOS\src/tasks.c **** 			{
 3937              		.loc 1 4691 0
 3938 0058 012B     		cmp	r3, #1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 172


 3939 005a 24D1     		bne	.L347
4693:FreeRTOS\src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3940              		.loc 1 4693 0
 3941 005c 271D     		adds	r7, r4, #4
 3942 005e 3846     		mov	r0, r7
 3943 0060 FFF7FEFF 		bl	uxListRemove
 3944              	.LVL365:
4694:FreeRTOS\src/tasks.c **** 
 3945              		.loc 1 4694 0
 3946 0064 E36A     		ldr	r3, [r4, #44]
 3947 0066 0122     		movs	r2, #1
 3948 0068 02FA03F1 		lsl	r1, r2, r3
 3949 006c 104E     		ldr	r6, .L351
 3950              	.LVL366:
 3951 006e D6F80023 		ldr	r2, [r6, #768]
 3952 0072 0A43     		orrs	r2, r2, r1
 3953 0074 C6F80023 		str	r2, [r6, #768]
 3954 0078 06F13000 		add	r0, r6, #48
 3955 007c 03EB8303 		add	r3, r3, r3, lsl #2
 3956 0080 9A00     		lsls	r2, r3, #2
 3957 0082 3946     		mov	r1, r7
 3958 0084 1044     		add	r0, r0, r2
 3959 0086 FFF7FEFF 		bl	vListInsertEnd
 3960              	.LVL367:
4715:FreeRTOS\src/tasks.c **** 				{
 3961              		.loc 1 4715 0
 3962 008a E26A     		ldr	r2, [r4, #44]
 3963 008c D6F8F432 		ldr	r3, [r6, #756]
 3964 0090 DB6A     		ldr	r3, [r3, #44]
 3965 0092 9A42     		cmp	r2, r3
 3966 0094 07D9     		bls	.L347
4719:FreeRTOS\src/tasks.c **** 				}
 3967              		.loc 1 4719 0
 3968 0096 4FF08052 		mov	r2, #268435456
 3969 009a 064B     		ldr	r3, .L351+4
 3970 009c 1A60     		str	r2, [r3]
 3971              		.syntax unified
 3972              	@ 4719 "FreeRTOS\src\tasks.c" 1
 3973 009e BFF34F8F 		dsb
 3974              	@ 0 "" 2
 3975              	@ 4719 "FreeRTOS\src\tasks.c" 1
 3976 00a2 BFF36F8F 		isb
 3977              	@ 0 "" 2
 3978              		.thumb
 3979              		.syntax unified
 3980              	.L347:
4731:FreeRTOS\src/tasks.c **** 
 3981              		.loc 1 4731 0
 3982 00a6 FFF7FEFF 		bl	vPortExitCritical
 3983              	.LVL368:
4734:FreeRTOS\src/tasks.c **** 
 3984              		.loc 1 4734 0
 3985 00aa 2846     		mov	r0, r5
 3986 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3987              	.LVL369:
 3988              	.L352:
 3989 00ae 00BF     		.align	2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 173


 3990              	.L351:
 3991 00b0 00000000 		.word	.LANCHOR0
 3992 00b4 04ED00E0 		.word	-536810236
 3993              		.cfi_endproc
 3994              	.LFE54:
 3995              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3996              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3997              		.align	2
 3998              		.global	xTaskGenericNotifyFromISR
 3999              		.thumb
 4000              		.thumb_func
 4001              		.type	xTaskGenericNotifyFromISR, %function
 4002              	xTaskGenericNotifyFromISR:
 4003              	.LFB55:
4742:FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
 4004              		.loc 1 4742 0
 4005              		.cfi_startproc
 4006              		@ args = 4, pretend = 0, frame = 0
 4007              		@ frame_needed = 0, uses_anonymous_args = 0
 4008              	.LVL370:
 4009 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4010              		.cfi_def_cfa_offset 24
 4011              		.cfi_offset 3, -24
 4012              		.cfi_offset 4, -20
 4013              		.cfi_offset 5, -16
 4014              		.cfi_offset 6, -12
 4015              		.cfi_offset 7, -8
 4016              		.cfi_offset 14, -4
 4017              	.LVL371:
 4018              	.LBB53:
 4019              	.LBB54:
 211:.\FreeRTOS\include/portmacro.h **** 	(
 4020              		.loc 2 211 0
 4021              		.syntax unified
 4022              	@ 211 ".\FreeRTOS\include/portmacro.h" 1
 4023 0002 EFF31185 			mrs r5, basepri											
 4024 0006 4FF0A004 		mov r4, #160												
 4025 000a 84F31188 		msr basepri, r4											
 4026 000e BFF36F8F 		isb														
 4027 0012 BFF34F8F 		dsb														
 4028              	
 4029              	@ 0 "" 2
 4030              		.thumb
 4031              		.syntax unified
 4032              	.LBE54:
 4033              	.LBE53:
4772:FreeRTOS\src/tasks.c **** 			{
 4034              		.loc 1 4772 0
 4035 0016 0BB1     		cbz	r3, .L354
4774:FreeRTOS\src/tasks.c **** 			}
 4036              		.loc 1 4774 0
 4037 0018 846C     		ldr	r4, [r0, #72]
 4038 001a 1C60     		str	r4, [r3]
 4039              	.L354:
4777:FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4040              		.loc 1 4777 0
 4041 001c 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 174


 4042              	.LVL372:
 4043 0020 DBB2     		uxtb	r3, r3
 4044              	.LVL373:
4778:FreeRTOS\src/tasks.c **** 
 4045              		.loc 1 4778 0
 4046 0022 0224     		movs	r4, #2
 4047 0024 80F84C40 		strb	r4, [r0, #76]
4780:FreeRTOS\src/tasks.c **** 			{
 4048              		.loc 1 4780 0
 4049 0028 013A     		subs	r2, r2, #1
 4050              	.LVL374:
 4051 002a 032A     		cmp	r2, #3
 4052 002c 15D8     		bhi	.L365
 4053 002e DFE802F0 		tbb	[pc, r2]
 4054              	.L357:
 4055 0032 02       		.byte	(.L356-.L357)/2
 4056 0033 07       		.byte	(.L358-.L357)/2
 4057 0034 0C       		.byte	(.L359-.L357)/2
 4058 0035 0F       		.byte	(.L360-.L357)/2
 4059              		.p2align 1
 4060              	.L356:
4783:FreeRTOS\src/tasks.c **** 					break;
 4061              		.loc 1 4783 0
 4062 0036 826C     		ldr	r2, [r0, #72]
 4063 0038 1143     		orrs	r1, r1, r2
 4064              	.LVL375:
 4065 003a 8164     		str	r1, [r0, #72]
4745:FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4066              		.loc 1 4745 0
 4067 003c 0124     		movs	r4, #1
4784:FreeRTOS\src/tasks.c **** 
 4068              		.loc 1 4784 0
 4069 003e 0FE0     		b	.L355
 4070              	.LVL376:
 4071              	.L358:
4787:FreeRTOS\src/tasks.c **** 					break;
 4072              		.loc 1 4787 0
 4073 0040 826C     		ldr	r2, [r0, #72]
 4074 0042 0132     		adds	r2, r2, #1
 4075 0044 8264     		str	r2, [r0, #72]
4745:FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4076              		.loc 1 4745 0
 4077 0046 0124     		movs	r4, #1
4788:FreeRTOS\src/tasks.c **** 
 4078              		.loc 1 4788 0
 4079 0048 0AE0     		b	.L355
 4080              	.L359:
4791:FreeRTOS\src/tasks.c **** 					break;
 4081              		.loc 1 4791 0
 4082 004a 8164     		str	r1, [r0, #72]
4745:FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4083              		.loc 1 4745 0
 4084 004c 0124     		movs	r4, #1
4792:FreeRTOS\src/tasks.c **** 
 4085              		.loc 1 4792 0
 4086 004e 07E0     		b	.L355
 4087              	.L360:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 175


4795:FreeRTOS\src/tasks.c **** 					{
 4088              		.loc 1 4795 0
 4089 0050 022B     		cmp	r3, #2
 4090 0052 04D0     		beq	.L366
4797:FreeRTOS\src/tasks.c **** 					}
 4091              		.loc 1 4797 0
 4092 0054 8164     		str	r1, [r0, #72]
4745:FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4093              		.loc 1 4745 0
 4094 0056 0124     		movs	r4, #1
 4095 0058 02E0     		b	.L355
 4096              	.L365:
 4097 005a 0124     		movs	r4, #1
 4098 005c 00E0     		b	.L355
 4099              	.L366:
4802:FreeRTOS\src/tasks.c **** 					}
 4100              		.loc 1 4802 0
 4101 005e 0024     		movs	r4, #0
 4102              	.LVL377:
 4103              	.L355:
4823:FreeRTOS\src/tasks.c **** 			{
 4104              		.loc 1 4823 0
 4105 0060 012B     		cmp	r3, #1
 4106 0062 30D1     		bne	.L361
 4107 0064 0646     		mov	r6, r0
4828:FreeRTOS\src/tasks.c **** 				{
 4108              		.loc 1 4828 0
 4109 0066 1A4B     		ldr	r3, .L368
 4110              	.LVL378:
 4111 0068 D3F80C33 		ldr	r3, [r3, #780]
 4112 006c B3B9     		cbnz	r3, .L362
4830:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4113              		.loc 1 4830 0
 4114 006e 071D     		adds	r7, r0, #4
 4115 0070 3846     		mov	r0, r7
 4116              	.LVL379:
 4117 0072 FFF7FEFF 		bl	uxListRemove
 4118              	.LVL380:
4831:FreeRTOS\src/tasks.c **** 				}
 4119              		.loc 1 4831 0
 4120 0076 F36A     		ldr	r3, [r6, #44]
 4121 0078 0122     		movs	r2, #1
 4122 007a 02FA03F1 		lsl	r1, r2, r3
 4123 007e 1448     		ldr	r0, .L368
 4124 0080 D0F80023 		ldr	r2, [r0, #768]
 4125 0084 0A43     		orrs	r2, r2, r1
 4126 0086 C0F80023 		str	r2, [r0, #768]
 4127 008a 3030     		adds	r0, r0, #48
 4128 008c 03EB8303 		add	r3, r3, r3, lsl #2
 4129 0090 9A00     		lsls	r2, r3, #2
 4130 0092 3946     		mov	r1, r7
 4131 0094 1044     		add	r0, r0, r2
 4132 0096 FFF7FEFF 		bl	vListInsertEnd
 4133              	.LVL381:
 4134 009a 04E0     		b	.L363
 4135              	.LVL382:
 4136              	.L362:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 176


4837:FreeRTOS\src/tasks.c **** 				}
 4137              		.loc 1 4837 0
 4138 009c 00F11801 		add	r1, r0, #24
 4139 00a0 0C48     		ldr	r0, .L368+4
 4140              	.LVL383:
 4141 00a2 FFF7FEFF 		bl	vListInsertEnd
 4142              	.LVL384:
 4143              	.L363:
4840:FreeRTOS\src/tasks.c **** 				{
 4144              		.loc 1 4840 0
 4145 00a6 F26A     		ldr	r2, [r6, #44]
 4146 00a8 094B     		ldr	r3, .L368
 4147 00aa D3F8F432 		ldr	r3, [r3, #756]
 4148 00ae DB6A     		ldr	r3, [r3, #44]
 4149 00b0 9A42     		cmp	r2, r3
 4150 00b2 08D9     		bls	.L361
4844:FreeRTOS\src/tasks.c **** 					{
 4151              		.loc 1 4844 0
 4152 00b4 069B     		ldr	r3, [sp, #24]
 4153 00b6 13B1     		cbz	r3, .L364
4846:FreeRTOS\src/tasks.c **** 					}
 4154              		.loc 1 4846 0
 4155 00b8 0123     		movs	r3, #1
 4156 00ba 069A     		ldr	r2, [sp, #24]
 4157 00bc 1360     		str	r3, [r2]
 4158              	.L364:
4852:FreeRTOS\src/tasks.c **** 				}
 4159              		.loc 1 4852 0
 4160 00be 0122     		movs	r2, #1
 4161 00c0 034B     		ldr	r3, .L368
 4162 00c2 C3F81C23 		str	r2, [r3, #796]
 4163              	.LVL385:
 4164              	.L361:
 4165              	.LBB55:
 4166              	.LBB56:
 4167              		.loc 2 229 0
 4168              		.syntax unified
 4169              	@ 229 ".\FreeRTOS\include/portmacro.h" 1
 4170 00c6 85F31188 			msr basepri, r5	
 4171              	@ 0 "" 2
 4172              	.LVL386:
 4173              		.thumb
 4174              		.syntax unified
 4175              	.LBE56:
 4176              	.LBE55:
4863:FreeRTOS\src/tasks.c **** 
 4177              		.loc 1 4863 0
 4178 00ca 2046     		mov	r0, r4
 4179 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4180              	.LVL387:
 4181              	.L369:
 4182 00ce 00BF     		.align	2
 4183              	.L368:
 4184 00d0 00000000 		.word	.LANCHOR0
 4185 00d4 14000000 		.word	.LANCHOR0+20
 4186              		.cfi_endproc
 4187              	.LFE55:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 177


 4188              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4189              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4190              		.align	2
 4191              		.global	vTaskNotifyGiveFromISR
 4192              		.thumb
 4193              		.thumb_func
 4194              		.type	vTaskNotifyGiveFromISR, %function
 4195              	vTaskNotifyGiveFromISR:
 4196              	.LFB56:
4871:FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
 4197              		.loc 1 4871 0
 4198              		.cfi_startproc
 4199              		@ args = 0, pretend = 0, frame = 0
 4200              		@ frame_needed = 0, uses_anonymous_args = 0
 4201              	.LVL388:
 4202 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4203              		.cfi_def_cfa_offset 24
 4204              		.cfi_offset 3, -24
 4205              		.cfi_offset 4, -20
 4206              		.cfi_offset 5, -16
 4207              		.cfi_offset 6, -12
 4208              		.cfi_offset 7, -8
 4209              		.cfi_offset 14, -4
 4210              	.LVL389:
 4211              	.LBB57:
 4212              	.LBB58:
 211:.\FreeRTOS\include/portmacro.h **** 	(
 4213              		.loc 2 211 0
 4214              		.syntax unified
 4215              	@ 211 ".\FreeRTOS\include/portmacro.h" 1
 4216 0002 EFF31185 			mrs r5, basepri											
 4217 0006 4FF0A003 		mov r3, #160												
 4218 000a 83F31188 		msr basepri, r3											
 4219 000e BFF36F8F 		isb														
 4220 0012 BFF34F8F 		dsb														
 4221              	
 4222              	@ 0 "" 2
 4223              		.thumb
 4224              		.syntax unified
 4225              	.LBE58:
 4226              	.LBE57:
4900:FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4227              		.loc 1 4900 0
 4228 0016 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 4229 001a DBB2     		uxtb	r3, r3
 4230              	.LVL390:
4901:FreeRTOS\src/tasks.c **** 
 4231              		.loc 1 4901 0
 4232 001c 0222     		movs	r2, #2
 4233 001e 80F84C20 		strb	r2, [r0, #76]
4905:FreeRTOS\src/tasks.c **** 
 4234              		.loc 1 4905 0
 4235 0022 826C     		ldr	r2, [r0, #72]
 4236 0024 0132     		adds	r2, r2, #1
 4237 0026 8264     		str	r2, [r0, #72]
4911:FreeRTOS\src/tasks.c **** 			{
 4238              		.loc 1 4911 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 178


 4239 0028 012B     		cmp	r3, #1
 4240 002a 2FD1     		bne	.L371
 4241 002c 0E46     		mov	r6, r1
 4242 002e 0446     		mov	r4, r0
4916:FreeRTOS\src/tasks.c **** 				{
 4243              		.loc 1 4916 0
 4244 0030 184B     		ldr	r3, .L376
 4245              	.LVL391:
 4246 0032 D3F80C33 		ldr	r3, [r3, #780]
 4247 0036 B3B9     		cbnz	r3, .L372
4918:FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4248              		.loc 1 4918 0
 4249 0038 071D     		adds	r7, r0, #4
 4250 003a 3846     		mov	r0, r7
 4251              	.LVL392:
 4252 003c FFF7FEFF 		bl	uxListRemove
 4253              	.LVL393:
4919:FreeRTOS\src/tasks.c **** 				}
 4254              		.loc 1 4919 0
 4255 0040 E36A     		ldr	r3, [r4, #44]
 4256 0042 0122     		movs	r2, #1
 4257 0044 02FA03F1 		lsl	r1, r2, r3
 4258 0048 1248     		ldr	r0, .L376
 4259 004a D0F80023 		ldr	r2, [r0, #768]
 4260 004e 0A43     		orrs	r2, r2, r1
 4261 0050 C0F80023 		str	r2, [r0, #768]
 4262 0054 3030     		adds	r0, r0, #48
 4263 0056 03EB8303 		add	r3, r3, r3, lsl #2
 4264 005a 9A00     		lsls	r2, r3, #2
 4265 005c 3946     		mov	r1, r7
 4266 005e 1044     		add	r0, r0, r2
 4267 0060 FFF7FEFF 		bl	vListInsertEnd
 4268              	.LVL394:
 4269 0064 04E0     		b	.L373
 4270              	.LVL395:
 4271              	.L372:
4925:FreeRTOS\src/tasks.c **** 				}
 4272              		.loc 1 4925 0
 4273 0066 00F11801 		add	r1, r0, #24
 4274              	.LVL396:
 4275 006a 0B48     		ldr	r0, .L376+4
 4276              	.LVL397:
 4277 006c FFF7FEFF 		bl	vListInsertEnd
 4278              	.LVL398:
 4279              	.L373:
4928:FreeRTOS\src/tasks.c **** 				{
 4280              		.loc 1 4928 0
 4281 0070 E26A     		ldr	r2, [r4, #44]
 4282 0072 084B     		ldr	r3, .L376
 4283 0074 D3F8F432 		ldr	r3, [r3, #756]
 4284 0078 DB6A     		ldr	r3, [r3, #44]
 4285 007a 9A42     		cmp	r2, r3
 4286 007c 06D9     		bls	.L371
4932:FreeRTOS\src/tasks.c **** 					{
 4287              		.loc 1 4932 0
 4288 007e 0EB1     		cbz	r6, .L374
4934:FreeRTOS\src/tasks.c **** 					}
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 179


 4289              		.loc 1 4934 0
 4290 0080 0123     		movs	r3, #1
 4291 0082 3360     		str	r3, [r6]
 4292              	.L374:
4940:FreeRTOS\src/tasks.c **** 				}
 4293              		.loc 1 4940 0
 4294 0084 0122     		movs	r2, #1
 4295 0086 034B     		ldr	r3, .L376
 4296 0088 C3F81C23 		str	r2, [r3, #796]
 4297              	.LVL399:
 4298              	.L371:
 4299              	.LBB59:
 4300              	.LBB60:
 4301              		.loc 2 229 0
 4302              		.syntax unified
 4303              	@ 229 ".\FreeRTOS\include/portmacro.h" 1
 4304 008c 85F31188 			msr basepri, r5	
 4305              	@ 0 "" 2
 4306              	.LVL400:
 4307              		.thumb
 4308              		.syntax unified
 4309 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4310              	.L377:
 4311 0092 00BF     		.align	2
 4312              	.L376:
 4313 0094 00000000 		.word	.LANCHOR0
 4314 0098 14000000 		.word	.LANCHOR0+20
 4315              	.LBE60:
 4316              	.LBE59:
 4317              		.cfi_endproc
 4318              	.LFE56:
 4319              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4320              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4321              		.align	2
 4322              		.global	xTaskNotifyStateClear
 4323              		.thumb
 4324              		.thumb_func
 4325              		.type	xTaskNotifyStateClear, %function
 4326              	xTaskNotifyStateClear:
 4327              	.LFB57:
4958:FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 4328              		.loc 1 4958 0
 4329              		.cfi_startproc
 4330              		@ args = 0, pretend = 0, frame = 0
 4331              		@ frame_needed = 0, uses_anonymous_args = 0
 4332              	.LVL401:
 4333 0000 10B5     		push	{r4, lr}
 4334              		.cfi_def_cfa_offset 8
 4335              		.cfi_offset 4, -8
 4336              		.cfi_offset 14, -4
4964:FreeRTOS\src/tasks.c **** 
 4337              		.loc 1 4964 0
 4338 0002 0446     		mov	r4, r0
 4339 0004 10B9     		cbnz	r0, .L379
4964:FreeRTOS\src/tasks.c **** 
 4340              		.loc 1 4964 0 is_stmt 0 discriminator 1
 4341 0006 0A4B     		ldr	r3, .L383
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 180


 4342 0008 D3F8F442 		ldr	r4, [r3, #756]
 4343              	.LVL402:
 4344              	.L379:
4966:FreeRTOS\src/tasks.c **** 		{
 4345              		.loc 1 4966 0 is_stmt 1 discriminator 4
 4346 000c FFF7FEFF 		bl	vPortEnterCritical
 4347              	.LVL403:
4968:FreeRTOS\src/tasks.c **** 			{
 4348              		.loc 1 4968 0 discriminator 4
 4349 0010 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4350 0014 DBB2     		uxtb	r3, r3
 4351 0016 022B     		cmp	r3, #2
 4352 0018 04D1     		bne	.L381
4970:FreeRTOS\src/tasks.c **** 				xReturn = pdPASS;
 4353              		.loc 1 4970 0
 4354 001a 0023     		movs	r3, #0
 4355 001c 84F84C30 		strb	r3, [r4, #76]
 4356              	.LVL404:
4971:FreeRTOS\src/tasks.c **** 			}
 4357              		.loc 1 4971 0
 4358 0020 0124     		movs	r4, #1
 4359              	.LVL405:
 4360 0022 00E0     		b	.L380
 4361              	.LVL406:
 4362              	.L381:
4975:FreeRTOS\src/tasks.c **** 			}
 4363              		.loc 1 4975 0
 4364 0024 0024     		movs	r4, #0
 4365              	.LVL407:
 4366              	.L380:
4978:FreeRTOS\src/tasks.c **** 
 4367              		.loc 1 4978 0
 4368 0026 FFF7FEFF 		bl	vPortExitCritical
 4369              	.LVL408:
4981:FreeRTOS\src/tasks.c **** 
 4370              		.loc 1 4981 0
 4371 002a 2046     		mov	r0, r4
 4372 002c 10BD     		pop	{r4, pc}
 4373              	.LVL409:
 4374              	.L384:
 4375 002e 00BF     		.align	2
 4376              	.L383:
 4377 0030 00000000 		.word	.LANCHOR0
 4378              		.cfi_endproc
 4379              	.LFE57:
 4380              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4381              		.global	pxCurrentTCB
 4382              		.section	.rodata.str1.4,"aMS",%progbits,1
 4383              		.align	2
 4384              	.LC0:
 4385 0000 49444C45 		.ascii	"IDLE\000"
 4385      00
 4386              		.bss
 4387              		.align	2
 4388              		.set	.LANCHOR0,. + 0
 4389              		.type	xSuspendedTaskList, %object
 4390              		.size	xSuspendedTaskList, 20
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 181


 4391              	xSuspendedTaskList:
 4392 0000 00000000 		.space	20
 4392      00000000 
 4392      00000000 
 4392      00000000 
 4392      00000000 
 4393              		.type	xPendingReadyList, %object
 4394              		.size	xPendingReadyList, 20
 4395              	xPendingReadyList:
 4396 0014 00000000 		.space	20
 4396      00000000 
 4396      00000000 
 4396      00000000 
 4396      00000000 
 4397              		.type	pxDelayedTaskList, %object
 4398              		.size	pxDelayedTaskList, 4
 4399              	pxDelayedTaskList:
 4400 0028 00000000 		.space	4
 4401              		.type	xNextTaskUnblockTime, %object
 4402              		.size	xNextTaskUnblockTime, 4
 4403              	xNextTaskUnblockTime:
 4404 002c 00000000 		.space	4
 4405              		.type	pxReadyTasksLists, %object
 4406              		.size	pxReadyTasksLists, 640
 4407              	pxReadyTasksLists:
 4408 0030 00000000 		.space	640
 4408      00000000 
 4408      00000000 
 4408      00000000 
 4408      00000000 
 4409              		.type	xDelayedTaskList1, %object
 4410              		.size	xDelayedTaskList1, 20
 4411              	xDelayedTaskList1:
 4412 02b0 00000000 		.space	20
 4412      00000000 
 4412      00000000 
 4412      00000000 
 4412      00000000 
 4413              		.type	xDelayedTaskList2, %object
 4414              		.size	xDelayedTaskList2, 20
 4415              	xDelayedTaskList2:
 4416 02c4 00000000 		.space	20
 4416      00000000 
 4416      00000000 
 4416      00000000 
 4416      00000000 
 4417              		.type	xTasksWaitingTermination, %object
 4418              		.size	xTasksWaitingTermination, 20
 4419              	xTasksWaitingTermination:
 4420 02d8 00000000 		.space	20
 4420      00000000 
 4420      00000000 
 4420      00000000 
 4420      00000000 
 4421              		.type	pxOverflowDelayedTaskList, %object
 4422              		.size	pxOverflowDelayedTaskList, 4
 4423              	pxOverflowDelayedTaskList:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 182


 4424 02ec 00000000 		.space	4
 4425              		.type	uxCurrentNumberOfTasks, %object
 4426              		.size	uxCurrentNumberOfTasks, 4
 4427              	uxCurrentNumberOfTasks:
 4428 02f0 00000000 		.space	4
 4429              		.type	pxCurrentTCB, %object
 4430              		.size	pxCurrentTCB, 4
 4431              	pxCurrentTCB:
 4432 02f4 00000000 		.space	4
 4433              		.type	xSchedulerRunning, %object
 4434              		.size	xSchedulerRunning, 4
 4435              	xSchedulerRunning:
 4436 02f8 00000000 		.space	4
 4437              		.type	uxTaskNumber, %object
 4438              		.size	uxTaskNumber, 4
 4439              	uxTaskNumber:
 4440 02fc 00000000 		.space	4
 4441              		.type	uxTopReadyPriority, %object
 4442              		.size	uxTopReadyPriority, 4
 4443              	uxTopReadyPriority:
 4444 0300 00000000 		.space	4
 4445              		.type	uxDeletedTasksWaitingCleanUp, %object
 4446              		.size	uxDeletedTasksWaitingCleanUp, 4
 4447              	uxDeletedTasksWaitingCleanUp:
 4448 0304 00000000 		.space	4
 4449              		.type	xTickCount, %object
 4450              		.size	xTickCount, 4
 4451              	xTickCount:
 4452 0308 00000000 		.space	4
 4453              		.type	uxSchedulerSuspended, %object
 4454              		.size	uxSchedulerSuspended, 4
 4455              	uxSchedulerSuspended:
 4456 030c 00000000 		.space	4
 4457              		.type	xIdleTaskHandle, %object
 4458              		.size	xIdleTaskHandle, 4
 4459              	xIdleTaskHandle:
 4460 0310 00000000 		.space	4
 4461              		.type	xNumOfOverflows, %object
 4462              		.size	xNumOfOverflows, 4
 4463              	xNumOfOverflows:
 4464 0314 00000000 		.space	4
 4465              		.type	uxPendedTicks, %object
 4466              		.size	uxPendedTicks, 4
 4467              	uxPendedTicks:
 4468 0318 00000000 		.space	4
 4469              		.type	xYieldPending, %object
 4470              		.size	xYieldPending, 4
 4471              	xYieldPending:
 4472 031c 00000000 		.space	4
 4473              		.text
 4474              	.Letext0:
 4475              		.file 3 "d:\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.1\\lib\\gcc\\arm-none
 4476              		.file 4 "d:\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.1\\arm-none-eabi\\inc
 4477              		.file 5 "d:\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.1\\arm-none-eabi\\inc
 4478              		.file 6 ".\\FreeRTOS\\include/projdefs.h"
 4479              		.file 7 ".\\FreeRTOS\\include/list.h"
 4480              		.file 8 ".\\FreeRTOS\\include/task.h"
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 183


 4481              		.file 9 ".\\FreeRTOS\\include/portable.h"
 4482              		.file 10 "d:\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.1\\arm-none-eabi\\in
 4483              		.file 11 ".\\FreeRTOS\\include/timers.h"
 4484              		.section	.debug_info,"",%progbits
 4485              	.Ldebug_info0:
 4486 0000 6B200000 		.4byte	0x206b
 4487 0004 0400     		.2byte	0x4
 4488 0006 00000000 		.4byte	.Ldebug_abbrev0
 4489 000a 04       		.byte	0x4
 4490 000b 01       		.uleb128 0x1
 4491 000c FA040000 		.4byte	.LASF238
 4492 0010 0C       		.byte	0xc
 4493 0011 27000000 		.4byte	.LASF239
 4494 0015 CD010000 		.4byte	.LASF240
 4495 0019 40000000 		.4byte	.Ldebug_ranges0+0x40
 4496 001d 00000000 		.4byte	0
 4497 0021 00000000 		.4byte	.Ldebug_line0
 4498 0025 02       		.uleb128 0x2
 4499 0026 96050000 		.4byte	.LASF4
 4500 002a 03       		.byte	0x3
 4501 002b D8       		.byte	0xd8
 4502 002c 30000000 		.4byte	0x30
 4503 0030 03       		.uleb128 0x3
 4504 0031 04       		.byte	0x4
 4505 0032 07       		.byte	0x7
 4506 0033 38010000 		.4byte	.LASF0
 4507 0037 04       		.uleb128 0x4
 4508 0038 04       		.byte	0x4
 4509 0039 05       		.byte	0x5
 4510 003a 696E7400 		.ascii	"int\000"
 4511 003e 03       		.uleb128 0x3
 4512 003f 08       		.byte	0x8
 4513 0040 05       		.byte	0x5
 4514 0041 71080000 		.4byte	.LASF1
 4515 0045 03       		.uleb128 0x3
 4516 0046 08       		.byte	0x8
 4517 0047 04       		.byte	0x4
 4518 0048 320A0000 		.4byte	.LASF2
 4519 004c 03       		.uleb128 0x3
 4520 004d 01       		.byte	0x1
 4521 004e 06       		.byte	0x6
 4522 004f C50E0000 		.4byte	.LASF3
 4523 0053 02       		.uleb128 0x2
 4524 0054 130C0000 		.4byte	.LASF5
 4525 0058 04       		.byte	0x4
 4526 0059 1D       		.byte	0x1d
 4527 005a 5E000000 		.4byte	0x5e
 4528 005e 03       		.uleb128 0x3
 4529 005f 01       		.byte	0x1
 4530 0060 08       		.byte	0x8
 4531 0061 200D0000 		.4byte	.LASF6
 4532 0065 03       		.uleb128 0x3
 4533 0066 02       		.byte	0x2
 4534 0067 05       		.byte	0x5
 4535 0068 E40A0000 		.4byte	.LASF7
 4536 006c 02       		.uleb128 0x2
 4537 006d 6C040000 		.4byte	.LASF8
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 184


 4538 0071 04       		.byte	0x4
 4539 0072 2B       		.byte	0x2b
 4540 0073 77000000 		.4byte	0x77
 4541 0077 03       		.uleb128 0x3
 4542 0078 02       		.byte	0x2
 4543 0079 07       		.byte	0x7
 4544 007a D10E0000 		.4byte	.LASF9
 4545 007e 03       		.uleb128 0x3
 4546 007f 04       		.byte	0x4
 4547 0080 05       		.byte	0x5
 4548 0081 1A0B0000 		.4byte	.LASF10
 4549 0085 02       		.uleb128 0x2
 4550 0086 4D0D0000 		.4byte	.LASF11
 4551 008a 04       		.byte	0x4
 4552 008b 41       		.byte	0x41
 4553 008c 90000000 		.4byte	0x90
 4554 0090 03       		.uleb128 0x3
 4555 0091 04       		.byte	0x4
 4556 0092 07       		.byte	0x7
 4557 0093 6B0C0000 		.4byte	.LASF12
 4558 0097 03       		.uleb128 0x3
 4559 0098 08       		.byte	0x8
 4560 0099 07       		.byte	0x7
 4561 009a C6030000 		.4byte	.LASF13
 4562 009e 03       		.uleb128 0x3
 4563 009f 04       		.byte	0x4
 4564 00a0 07       		.byte	0x7
 4565 00a1 430C0000 		.4byte	.LASF14
 4566 00a5 05       		.uleb128 0x5
 4567 00a6 04       		.byte	0x4
 4568 00a7 06       		.uleb128 0x6
 4569 00a8 04       		.byte	0x4
 4570 00a9 AD000000 		.4byte	0xad
 4571 00ad 03       		.uleb128 0x3
 4572 00ae 01       		.byte	0x1
 4573 00af 08       		.byte	0x8
 4574 00b0 01070000 		.4byte	.LASF15
 4575 00b4 06       		.uleb128 0x6
 4576 00b5 04       		.byte	0x4
 4577 00b6 BA000000 		.4byte	0xba
 4578 00ba 07       		.uleb128 0x7
 4579 00bb AD000000 		.4byte	0xad
 4580 00bf 02       		.uleb128 0x2
 4581 00c0 E8070000 		.4byte	.LASF16
 4582 00c4 05       		.byte	0x5
 4583 00c5 18       		.byte	0x18
 4584 00c6 53000000 		.4byte	0x53
 4585 00ca 02       		.uleb128 0x2
 4586 00cb 630A0000 		.4byte	.LASF17
 4587 00cf 05       		.byte	0x5
 4588 00d0 24       		.byte	0x24
 4589 00d1 6C000000 		.4byte	0x6c
 4590 00d5 02       		.uleb128 0x2
 4591 00d6 1C030000 		.4byte	.LASF18
 4592 00da 05       		.byte	0x5
 4593 00db 30       		.byte	0x30
 4594 00dc 85000000 		.4byte	0x85
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 185


 4595 00e0 02       		.uleb128 0x2
 4596 00e1 F5080000 		.4byte	.LASF19
 4597 00e5 06       		.byte	0x6
 4598 00e6 23       		.byte	0x23
 4599 00e7 EB000000 		.4byte	0xeb
 4600 00eb 06       		.uleb128 0x6
 4601 00ec 04       		.byte	0x4
 4602 00ed F1000000 		.4byte	0xf1
 4603 00f1 08       		.uleb128 0x8
 4604 00f2 FC000000 		.4byte	0xfc
 4605 00f6 09       		.uleb128 0x9
 4606 00f7 A5000000 		.4byte	0xa5
 4607 00fb 00       		.byte	0
 4608 00fc 02       		.uleb128 0x2
 4609 00fd 6B010000 		.4byte	.LASF20
 4610 0101 02       		.byte	0x2
 4611 0102 37       		.byte	0x37
 4612 0103 D5000000 		.4byte	0xd5
 4613 0107 02       		.uleb128 0x2
 4614 0108 B0080000 		.4byte	.LASF21
 4615 010c 02       		.byte	0x2
 4616 010d 38       		.byte	0x38
 4617 010e 7E000000 		.4byte	0x7e
 4618 0112 02       		.uleb128 0x2
 4619 0113 38070000 		.4byte	.LASF22
 4620 0117 02       		.byte	0x2
 4621 0118 39       		.byte	0x39
 4622 0119 90000000 		.4byte	0x90
 4623 011d 02       		.uleb128 0x2
 4624 011e 0A0A0000 		.4byte	.LASF23
 4625 0122 02       		.byte	0x2
 4626 0123 3F       		.byte	0x3f
 4627 0124 D5000000 		.4byte	0xd5
 4628 0128 06       		.uleb128 0x6
 4629 0129 04       		.byte	0x4
 4630 012a BF000000 		.4byte	0xbf
 4631 012e 0A       		.uleb128 0xa
 4632 012f 9E010000 		.4byte	.LASF29
 4633 0133 14       		.byte	0x14
 4634 0134 07       		.byte	0x7
 4635 0135 8C       		.byte	0x8c
 4636 0136 77010000 		.4byte	0x177
 4637 013a 0B       		.uleb128 0xb
 4638 013b 0F0B0000 		.4byte	.LASF24
 4639 013f 07       		.byte	0x7
 4640 0140 8F       		.byte	0x8f
 4641 0141 1D010000 		.4byte	0x11d
 4642 0145 00       		.byte	0
 4643 0146 0B       		.uleb128 0xb
 4644 0147 04090000 		.4byte	.LASF25
 4645 014b 07       		.byte	0x7
 4646 014c 90       		.byte	0x90
 4647 014d 77010000 		.4byte	0x177
 4648 0151 04       		.byte	0x4
 4649 0152 0B       		.uleb128 0xb
 4650 0153 33040000 		.4byte	.LASF26
 4651 0157 07       		.byte	0x7
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 186


 4652 0158 91       		.byte	0x91
 4653 0159 77010000 		.4byte	0x177
 4654 015d 08       		.byte	0x8
 4655 015e 0B       		.uleb128 0xb
 4656 015f FA0D0000 		.4byte	.LASF27
 4657 0163 07       		.byte	0x7
 4658 0164 92       		.byte	0x92
 4659 0165 A5000000 		.4byte	0xa5
 4660 0169 0C       		.byte	0xc
 4661 016a 0B       		.uleb128 0xb
 4662 016b AB0A0000 		.4byte	.LASF28
 4663 016f 07       		.byte	0x7
 4664 0170 93       		.byte	0x93
 4665 0171 AE010000 		.4byte	0x1ae
 4666 0175 10       		.byte	0x10
 4667 0176 00       		.byte	0
 4668 0177 06       		.uleb128 0x6
 4669 0178 04       		.byte	0x4
 4670 0179 2E010000 		.4byte	0x12e
 4671 017d 0A       		.uleb128 0xa
 4672 017e CB050000 		.4byte	.LASF30
 4673 0182 14       		.byte	0x14
 4674 0183 07       		.byte	0x7
 4675 0184 A4       		.byte	0xa4
 4676 0185 AE010000 		.4byte	0x1ae
 4677 0189 0B       		.uleb128 0xb
 4678 018a 17000000 		.4byte	.LASF31
 4679 018e 07       		.byte	0x7
 4680 018f A7       		.byte	0xa7
 4681 0190 FB010000 		.4byte	0x1fb
 4682 0194 00       		.byte	0
 4683 0195 0B       		.uleb128 0xb
 4684 0196 63010000 		.4byte	.LASF32
 4685 019a 07       		.byte	0x7
 4686 019b A8       		.byte	0xa8
 4687 019c 00020000 		.4byte	0x200
 4688 01a0 04       		.byte	0x4
 4689 01a1 0B       		.uleb128 0xb
 4690 01a2 6A070000 		.4byte	.LASF33
 4691 01a6 07       		.byte	0x7
 4692 01a7 A9       		.byte	0xa9
 4693 01a8 F0010000 		.4byte	0x1f0
 4694 01ac 08       		.byte	0x8
 4695 01ad 00       		.byte	0
 4696 01ae 06       		.uleb128 0x6
 4697 01af 04       		.byte	0x4
 4698 01b0 7D010000 		.4byte	0x17d
 4699 01b4 02       		.uleb128 0x2
 4700 01b5 06070000 		.4byte	.LASF34
 4701 01b9 07       		.byte	0x7
 4702 01ba 96       		.byte	0x96
 4703 01bb 2E010000 		.4byte	0x12e
 4704 01bf 0A       		.uleb128 0xa
 4705 01c0 A8050000 		.4byte	.LASF35
 4706 01c4 0C       		.byte	0xc
 4707 01c5 07       		.byte	0x7
 4708 01c6 98       		.byte	0x98
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 187


 4709 01c7 F0010000 		.4byte	0x1f0
 4710 01cb 0B       		.uleb128 0xb
 4711 01cc 0F0B0000 		.4byte	.LASF24
 4712 01d0 07       		.byte	0x7
 4713 01d1 9B       		.byte	0x9b
 4714 01d2 1D010000 		.4byte	0x11d
 4715 01d6 00       		.byte	0
 4716 01d7 0B       		.uleb128 0xb
 4717 01d8 04090000 		.4byte	.LASF25
 4718 01dc 07       		.byte	0x7
 4719 01dd 9C       		.byte	0x9c
 4720 01de 77010000 		.4byte	0x177
 4721 01e2 04       		.byte	0x4
 4722 01e3 0B       		.uleb128 0xb
 4723 01e4 33040000 		.4byte	.LASF26
 4724 01e8 07       		.byte	0x7
 4725 01e9 9D       		.byte	0x9d
 4726 01ea 77010000 		.4byte	0x177
 4727 01ee 08       		.byte	0x8
 4728 01ef 00       		.byte	0
 4729 01f0 02       		.uleb128 0x2
 4730 01f1 A4070000 		.4byte	.LASF36
 4731 01f5 07       		.byte	0x7
 4732 01f6 9F       		.byte	0x9f
 4733 01f7 BF010000 		.4byte	0x1bf
 4734 01fb 0C       		.uleb128 0xc
 4735 01fc 12010000 		.4byte	0x112
 4736 0200 06       		.uleb128 0x6
 4737 0201 04       		.byte	0x4
 4738 0202 B4010000 		.4byte	0x1b4
 4739 0206 02       		.uleb128 0x2
 4740 0207 F6090000 		.4byte	.LASF37
 4741 020b 07       		.byte	0x7
 4742 020c AB       		.byte	0xab
 4743 020d 7D010000 		.4byte	0x17d
 4744 0211 02       		.uleb128 0x2
 4745 0212 9C090000 		.4byte	.LASF38
 4746 0216 08       		.byte	0x8
 4747 0217 3E       		.byte	0x3e
 4748 0218 1C020000 		.4byte	0x21c
 4749 021c 06       		.uleb128 0x6
 4750 021d 04       		.byte	0x4
 4751 021e 22020000 		.4byte	0x222
 4752 0222 0D       		.uleb128 0xd
 4753 0223 90000000 		.4byte	.LASF39
 4754 0227 50       		.byte	0x50
 4755 0228 01       		.byte	0x1
 4756 0229 0D01     		.2byte	0x10d
 4757 022b B2020000 		.4byte	0x2b2
 4758 022f 0E       		.uleb128 0xe
 4759 0230 1A0F0000 		.4byte	.LASF40
 4760 0234 01       		.byte	0x1
 4761 0235 0F01     		.2byte	0x10f
 4762 0237 9B030000 		.4byte	0x39b
 4763 023b 00       		.byte	0
 4764 023c 0E       		.uleb128 0xe
 4765 023d F00E0000 		.4byte	.LASF41
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 188


 4766 0241 01       		.byte	0x1
 4767 0242 1501     		.2byte	0x115
 4768 0244 B4010000 		.4byte	0x1b4
 4769 0248 04       		.byte	0x4
 4770 0249 0E       		.uleb128 0xe
 4771 024a C20D0000 		.4byte	.LASF42
 4772 024e 01       		.byte	0x1
 4773 024f 1601     		.2byte	0x116
 4774 0251 B4010000 		.4byte	0x1b4
 4775 0255 18       		.byte	0x18
 4776 0256 0E       		.uleb128 0xe
 4777 0257 62000000 		.4byte	.LASF43
 4778 025b 01       		.byte	0x1
 4779 025c 1701     		.2byte	0x117
 4780 025e 12010000 		.4byte	0x112
 4781 0262 2C       		.byte	0x2c
 4782 0263 0E       		.uleb128 0xe
 4783 0264 A20B0000 		.4byte	.LASF44
 4784 0268 01       		.byte	0x1
 4785 0269 1801     		.2byte	0x118
 4786 026b 95030000 		.4byte	0x395
 4787 026f 30       		.byte	0x30
 4788 0270 0E       		.uleb128 0xe
 4789 0271 0C000000 		.4byte	.LASF45
 4790 0275 01       		.byte	0x1
 4791 0276 1901     		.2byte	0x119
 4792 0278 A6030000 		.4byte	0x3a6
 4793 027c 34       		.byte	0x34
 4794 027d 0E       		.uleb128 0xe
 4795 027e A30D0000 		.4byte	.LASF46
 4796 0282 01       		.byte	0x1
 4797 0283 2901     		.2byte	0x129
 4798 0285 12010000 		.4byte	0x112
 4799 0289 40       		.byte	0x40
 4800 028a 0E       		.uleb128 0xe
 4801 028b C2060000 		.4byte	.LASF47
 4802 028f 01       		.byte	0x1
 4803 0290 2A01     		.2byte	0x12a
 4804 0292 12010000 		.4byte	0x112
 4805 0296 44       		.byte	0x44
 4806 0297 0E       		.uleb128 0xe
 4807 0298 90060000 		.4byte	.LASF48
 4808 029c 01       		.byte	0x1
 4809 029d 4501     		.2byte	0x145
 4810 029f B6030000 		.4byte	0x3b6
 4811 02a3 48       		.byte	0x48
 4812 02a4 0E       		.uleb128 0xe
 4813 02a5 25030000 		.4byte	.LASF49
 4814 02a9 01       		.byte	0x1
 4815 02aa 4601     		.2byte	0x146
 4816 02ac BB030000 		.4byte	0x3bb
 4817 02b0 4C       		.byte	0x4c
 4818 02b1 00       		.byte	0
 4819 02b2 0F       		.uleb128 0xf
 4820 02b3 01       		.byte	0x1
 4821 02b4 5E000000 		.4byte	0x5e
 4822 02b8 08       		.byte	0x8
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 189


 4823 02b9 48       		.byte	0x48
 4824 02ba E3020000 		.4byte	0x2e3
 4825 02be 10       		.uleb128 0x10
 4826 02bf 020D0000 		.4byte	.LASF50
 4827 02c3 00       		.byte	0
 4828 02c4 10       		.uleb128 0x10
 4829 02c5 F0070000 		.4byte	.LASF51
 4830 02c9 01       		.byte	0x1
 4831 02ca 10       		.uleb128 0x10
 4832 02cb 0F0E0000 		.4byte	.LASF52
 4833 02cf 02       		.byte	0x2
 4834 02d0 10       		.uleb128 0x10
 4835 02d1 85000000 		.4byte	.LASF53
 4836 02d5 03       		.byte	0x3
 4837 02d6 10       		.uleb128 0x10
 4838 02d7 7F080000 		.4byte	.LASF54
 4839 02db 04       		.byte	0x4
 4840 02dc 10       		.uleb128 0x10
 4841 02dd 8C0D0000 		.4byte	.LASF55
 4842 02e1 05       		.byte	0x5
 4843 02e2 00       		.byte	0
 4844 02e3 02       		.uleb128 0x2
 4845 02e4 EB090000 		.4byte	.LASF56
 4846 02e8 08       		.byte	0x8
 4847 02e9 4F       		.byte	0x4f
 4848 02ea B2020000 		.4byte	0x2b2
 4849 02ee 0F       		.uleb128 0xf
 4850 02ef 01       		.byte	0x1
 4851 02f0 5E000000 		.4byte	0x5e
 4852 02f4 08       		.byte	0x8
 4853 02f5 53       		.byte	0x53
 4854 02f6 19030000 		.4byte	0x319
 4855 02fa 10       		.uleb128 0x10
 4856 02fb 0D010000 		.4byte	.LASF57
 4857 02ff 00       		.byte	0
 4858 0300 10       		.uleb128 0x10
 4859 0301 290A0000 		.4byte	.LASF58
 4860 0305 01       		.byte	0x1
 4861 0306 10       		.uleb128 0x10
 4862 0307 9D050000 		.4byte	.LASF59
 4863 030b 02       		.byte	0x2
 4864 030c 10       		.uleb128 0x10
 4865 030d AF030000 		.4byte	.LASF60
 4866 0311 03       		.byte	0x3
 4867 0312 10       		.uleb128 0x10
 4868 0313 11070000 		.4byte	.LASF61
 4869 0317 04       		.byte	0x4
 4870 0318 00       		.byte	0
 4871 0319 02       		.uleb128 0x2
 4872 031a 88050000 		.4byte	.LASF62
 4873 031e 08       		.byte	0x8
 4874 031f 59       		.byte	0x59
 4875 0320 EE020000 		.4byte	0x2ee
 4876 0324 0A       		.uleb128 0xa
 4877 0325 77010000 		.4byte	.LASF63
 4878 0329 08       		.byte	0x8
 4879 032a 08       		.byte	0x8
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 190


 4880 032b 5E       		.byte	0x5e
 4881 032c 49030000 		.4byte	0x349
 4882 0330 0B       		.uleb128 0xb
 4883 0331 64020000 		.4byte	.LASF64
 4884 0335 08       		.byte	0x8
 4885 0336 60       		.byte	0x60
 4886 0337 07010000 		.4byte	0x107
 4887 033b 00       		.byte	0
 4888 033c 0B       		.uleb128 0xb
 4889 033d D7080000 		.4byte	.LASF65
 4890 0341 08       		.byte	0x8
 4891 0342 61       		.byte	0x61
 4892 0343 1D010000 		.4byte	0x11d
 4893 0347 04       		.byte	0x4
 4894 0348 00       		.byte	0
 4895 0349 02       		.uleb128 0x2
 4896 034a 68090000 		.4byte	.LASF66
 4897 034e 08       		.byte	0x8
 4898 034f 62       		.byte	0x62
 4899 0350 24030000 		.4byte	0x324
 4900 0354 0A       		.uleb128 0xa
 4901 0355 540A0000 		.4byte	.LASF67
 4902 0359 0C       		.byte	0xc
 4903 035a 08       		.byte	0x8
 4904 035b 67       		.byte	0x67
 4905 035c 85030000 		.4byte	0x385
 4906 0360 0B       		.uleb128 0xb
 4907 0361 0B0D0000 		.4byte	.LASF68
 4908 0365 08       		.byte	0x8
 4909 0366 69       		.byte	0x69
 4910 0367 A5000000 		.4byte	0xa5
 4911 036b 00       		.byte	0
 4912 036c 0B       		.uleb128 0xb
 4913 036d A0080000 		.4byte	.LASF69
 4914 0371 08       		.byte	0x8
 4915 0372 6A       		.byte	0x6a
 4916 0373 D5000000 		.4byte	0xd5
 4917 0377 04       		.byte	0x4
 4918 0378 0B       		.uleb128 0xb
 4919 0379 9E020000 		.4byte	.LASF70
 4920 037d 08       		.byte	0x8
 4921 037e 6B       		.byte	0x6b
 4922 037f D5000000 		.4byte	0xd5
 4923 0383 08       		.byte	0x8
 4924 0384 00       		.byte	0
 4925 0385 02       		.uleb128 0x2
 4926 0386 19080000 		.4byte	.LASF71
 4927 038a 08       		.byte	0x8
 4928 038b 6C       		.byte	0x6c
 4929 038c 54030000 		.4byte	0x354
 4930 0390 07       		.uleb128 0x7
 4931 0391 B4000000 		.4byte	0xb4
 4932 0395 06       		.uleb128 0x6
 4933 0396 04       		.byte	0x4
 4934 0397 FC000000 		.4byte	0xfc
 4935 039b 06       		.uleb128 0x6
 4936 039c 04       		.byte	0x4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 191


 4937 039d A1030000 		.4byte	0x3a1
 4938 03a1 0C       		.uleb128 0xc
 4939 03a2 FC000000 		.4byte	0xfc
 4940 03a6 11       		.uleb128 0x11
 4941 03a7 AD000000 		.4byte	0xad
 4942 03ab B6030000 		.4byte	0x3b6
 4943 03af 12       		.uleb128 0x12
 4944 03b0 9E000000 		.4byte	0x9e
 4945 03b4 0B       		.byte	0xb
 4946 03b5 00       		.byte	0
 4947 03b6 0C       		.uleb128 0xc
 4948 03b7 D5000000 		.4byte	0xd5
 4949 03bb 0C       		.uleb128 0xc
 4950 03bc BF000000 		.4byte	0xbf
 4951 03c0 13       		.uleb128 0x13
 4952 03c1 FE020000 		.4byte	.LASF72
 4953 03c5 01       		.byte	0x1
 4954 03c6 5701     		.2byte	0x157
 4955 03c8 22020000 		.4byte	0x222
 4956 03cc 13       		.uleb128 0x13
 4957 03cd E70D0000 		.4byte	.LASF73
 4958 03d1 01       		.byte	0x1
 4959 03d2 5B01     		.2byte	0x15b
 4960 03d4 C0030000 		.4byte	0x3c0
 4961 03d8 14       		.uleb128 0x14
 4962 03d9 3D080000 		.4byte	.LASF78
 4963 03dd 02       		.byte	0x2
 4964 03de CF       		.byte	0xcf
 4965 03df D5000000 		.4byte	0xd5
 4966 03e3 03       		.byte	0x3
 4967 03e4 FF030000 		.4byte	0x3ff
 4968 03e8 15       		.uleb128 0x15
 4969 03e9 4F030000 		.4byte	.LASF74
 4970 03ed 02       		.byte	0x2
 4971 03ee D1       		.byte	0xd1
 4972 03ef D5000000 		.4byte	0xd5
 4973 03f3 15       		.uleb128 0x15
 4974 03f4 2B070000 		.4byte	.LASF75
 4975 03f8 02       		.byte	0x2
 4976 03f9 D1       		.byte	0xd1
 4977 03fa D5000000 		.4byte	0xd5
 4978 03fe 00       		.byte	0
 4979 03ff 16       		.uleb128 0x16
 4980 0400 27060000 		.4byte	.LASF76
 4981 0404 02       		.byte	0x2
 4982 0405 E3       		.byte	0xe3
 4983 0406 03       		.byte	0x3
 4984 0407 17040000 		.4byte	0x417
 4985 040b 17       		.uleb128 0x17
 4986 040c B1090000 		.4byte	.LASF80
 4987 0410 02       		.byte	0x2
 4988 0411 E3       		.byte	0xe3
 4989 0412 D5000000 		.4byte	0xd5
 4990 0416 00       		.byte	0
 4991 0417 16       		.uleb128 0x16
 4992 0418 7D0C0000 		.4byte	.LASF77
 4993 041c 02       		.byte	0x2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 192


 4994 041d BF       		.byte	0xbf
 4995 041e 03       		.byte	0x3
 4996 041f 2F040000 		.4byte	0x42f
 4997 0423 15       		.uleb128 0x15
 4998 0424 2B070000 		.4byte	.LASF75
 4999 0428 02       		.byte	0x2
 5000 0429 C1       		.byte	0xc1
 5001 042a D5000000 		.4byte	0xd5
 5002 042e 00       		.byte	0
 5003 042f 14       		.uleb128 0x14
 5004 0430 88080000 		.4byte	.LASF79
 5005 0434 02       		.byte	0x2
 5006 0435 82       		.byte	0x82
 5007 0436 BF000000 		.4byte	0xbf
 5008 043a 03       		.byte	0x3
 5009 043b 56040000 		.4byte	0x456
 5010 043f 17       		.uleb128 0x17
 5011 0440 37020000 		.4byte	.LASF81
 5012 0444 02       		.byte	0x2
 5013 0445 82       		.byte	0x82
 5014 0446 D5000000 		.4byte	0xd5
 5015 044a 15       		.uleb128 0x15
 5016 044b 1D0C0000 		.4byte	.LASF82
 5017 044f 02       		.byte	0x2
 5018 0450 84       		.byte	0x84
 5019 0451 BF000000 		.4byte	0xbf
 5020 0455 00       		.byte	0
 5021 0456 18       		.uleb128 0x18
 5022 0457 6D0B0000 		.4byte	.LASF85
 5023 045b 01       		.byte	0x1
 5024 045c E906     		.2byte	0x6e9
 5025 045e 07010000 		.4byte	0x107
 5026 0462 00000000 		.4byte	.LFB16
 5027 0466 2C000000 		.4byte	.LFE16-.LFB16
 5028 046a 01       		.uleb128 0x1
 5029 046b 9C       		.byte	0x9c
 5030 046c A1040000 		.4byte	0x4a1
 5031 0470 19       		.uleb128 0x19
 5032 0471 230A0000 		.4byte	.LASF87
 5033 0475 01       		.byte	0x1
 5034 0476 E906     		.2byte	0x6e9
 5035 0478 A1040000 		.4byte	0x4a1
 5036 047c 00000000 		.4byte	.LLST0
 5037 0480 1A       		.uleb128 0x1a
 5038 0481 3B0C0000 		.4byte	.LASF83
 5039 0485 01       		.byte	0x1
 5040 0486 EB06     		.2byte	0x6eb
 5041 0488 07010000 		.4byte	0x107
 5042 048c 6C000000 		.4byte	.LLST1
 5043 0490 1A       		.uleb128 0x1a
 5044 0491 FF0E0000 		.4byte	.LASF84
 5045 0495 01       		.byte	0x1
 5046 0496 EC06     		.2byte	0x6ec
 5047 0498 B1040000 		.4byte	0x4b1
 5048 049c 8B000000 		.4byte	.LLST2
 5049 04a0 00       		.byte	0
 5050 04a1 07       		.uleb128 0x7
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 193


 5051 04a2 11020000 		.4byte	0x211
 5052 04a6 06       		.uleb128 0x6
 5053 04a7 04       		.byte	0x4
 5054 04a8 AC040000 		.4byte	0x4ac
 5055 04ac 07       		.uleb128 0x7
 5056 04ad CC030000 		.4byte	0x3cc
 5057 04b1 07       		.uleb128 0x7
 5058 04b2 A6040000 		.4byte	0x4a6
 5059 04b6 18       		.uleb128 0x18
 5060 04b7 4F0E0000 		.4byte	.LASF86
 5061 04bb 01       		.byte	0x1
 5062 04bc 6B0E     		.2byte	0xe6b
 5063 04be CA000000 		.4byte	0xca
 5064 04c2 00000000 		.4byte	.LFB41
 5065 04c6 14000000 		.4byte	.LFE41-.LFB41
 5066 04ca 01       		.uleb128 0x1
 5067 04cb 9C       		.byte	0x9c
 5068 04cc F1040000 		.4byte	0x4f1
 5069 04d0 19       		.uleb128 0x19
 5070 04d1 2A020000 		.4byte	.LASF88
 5071 04d5 01       		.byte	0x1
 5072 04d6 6B0E     		.2byte	0xe6b
 5073 04d8 F1040000 		.4byte	0x4f1
 5074 04dc F7000000 		.4byte	.LLST3
 5075 04e0 1A       		.uleb128 0x1a
 5076 04e1 60090000 		.4byte	.LASF89
 5077 04e5 01       		.byte	0x1
 5078 04e6 6D0E     		.2byte	0xe6d
 5079 04e8 D5000000 		.4byte	0xd5
 5080 04ec 15010000 		.4byte	.LLST4
 5081 04f0 00       		.byte	0
 5082 04f1 06       		.uleb128 0x6
 5083 04f2 04       		.byte	0x4
 5084 04f3 F7040000 		.4byte	0x4f7
 5085 04f7 07       		.uleb128 0x7
 5086 04f8 BF000000 		.4byte	0xbf
 5087 04fc 1B       		.uleb128 0x1b
 5088 04fd BB080000 		.4byte	.LASF90
 5089 0501 01       		.byte	0x1
 5090 0502 D10E     		.2byte	0xed1
 5091 0504 00000000 		.4byte	.LFB44
 5092 0508 24000000 		.4byte	.LFE44-.LFB44
 5093 050c 01       		.uleb128 0x1
 5094 050d 9C       		.byte	0x9c
 5095 050e 23050000 		.4byte	0x523
 5096 0512 1A       		.uleb128 0x1a
 5097 0513 FF0E0000 		.4byte	.LASF84
 5098 0517 01       		.byte	0x1
 5099 0518 D30E     		.2byte	0xed3
 5100 051a 23050000 		.4byte	0x523
 5101 051e 43010000 		.4byte	.LLST5
 5102 0522 00       		.byte	0
 5103 0523 06       		.uleb128 0x6
 5104 0524 04       		.byte	0x4
 5105 0525 CC030000 		.4byte	0x3cc
 5106 0529 1B       		.uleb128 0x1b
 5107 052a 020E0000 		.4byte	.LASF91
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 194


 5108 052e 01       		.byte	0x1
 5109 052f 9B0E     		.2byte	0xe9b
 5110 0531 00000000 		.4byte	.LFB43
 5111 0535 12000000 		.4byte	.LFE43-.LFB43
 5112 0539 01       		.uleb128 0x1
 5113 053a 9C       		.byte	0x9c
 5114 053b 69050000 		.4byte	0x569
 5115 053f 19       		.uleb128 0x19
 5116 0540 FF0E0000 		.4byte	.LASF84
 5117 0544 01       		.byte	0x1
 5118 0545 9B0E     		.2byte	0xe9b
 5119 0547 23050000 		.4byte	0x523
 5120 054b 56010000 		.4byte	.LLST6
 5121 054f 1C       		.uleb128 0x1c
 5122 0550 0A000000 		.4byte	.LVL18
 5123 0554 CE1F0000 		.4byte	0x1fce
 5124 0558 1D       		.uleb128 0x1d
 5125 0559 10000000 		.4byte	.LVL19
 5126 055d CE1F0000 		.4byte	0x1fce
 5127 0561 1E       		.uleb128 0x1e
 5128 0562 01       		.uleb128 0x1
 5129 0563 50       		.byte	0x50
 5130 0564 02       		.uleb128 0x2
 5131 0565 74       		.byte	0x74
 5132 0566 00       		.sleb128 0
 5133 0567 00       		.byte	0
 5134 0568 00       		.byte	0
 5135 0569 1B       		.uleb128 0x1b
 5136 056a C7000000 		.4byte	.LASF92
 5137 056e 01       		.byte	0x1
 5138 056f 4603     		.2byte	0x346
 5139 0571 00000000 		.4byte	.LFB6
 5140 0575 90000000 		.4byte	.LFE6-.LFB6
 5141 0579 01       		.uleb128 0x1
 5142 057a 9C       		.byte	0x9c
 5143 057b 79060000 		.4byte	0x679
 5144 057f 19       		.uleb128 0x19
 5145 0580 0E080000 		.4byte	.LASF93
 5146 0584 01       		.byte	0x1
 5147 0585 4603     		.2byte	0x346
 5148 0587 E0000000 		.4byte	0xe0
 5149 058b 74010000 		.4byte	.LLST7
 5150 058f 19       		.uleb128 0x19
 5151 0590 F7020000 		.4byte	.LASF94
 5152 0594 01       		.byte	0x1
 5153 0595 4703     		.2byte	0x347
 5154 0597 90030000 		.4byte	0x390
 5155 059b 92010000 		.4byte	.LLST8
 5156 059f 19       		.uleb128 0x19
 5157 05a0 44070000 		.4byte	.LASF95
 5158 05a4 01       		.byte	0x1
 5159 05a5 4803     		.2byte	0x348
 5160 05a7 79060000 		.4byte	0x679
 5161 05ab BE010000 		.4byte	.LLST9
 5162 05af 19       		.uleb128 0x19
 5163 05b0 020B0000 		.4byte	.LASF96
 5164 05b4 01       		.byte	0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 195


 5165 05b5 4903     		.2byte	0x349
 5166 05b7 7E060000 		.4byte	0x67e
 5167 05bb FB010000 		.4byte	.LLST10
 5168 05bf 19       		.uleb128 0x19
 5169 05c0 62000000 		.4byte	.LASF43
 5170 05c4 01       		.byte	0x1
 5171 05c5 4A03     		.2byte	0x34a
 5172 05c7 12010000 		.4byte	0x112
 5173 05cb 19020000 		.4byte	.LLST11
 5174 05cf 1F       		.uleb128 0x1f
 5175 05d0 5A0F0000 		.4byte	.LASF97
 5176 05d4 01       		.byte	0x1
 5177 05d5 4B03     		.2byte	0x34b
 5178 05d7 89060000 		.4byte	0x689
 5179 05db 02       		.uleb128 0x2
 5180 05dc 91       		.byte	0x91
 5181 05dd 04       		.sleb128 4
 5182 05de 1F       		.uleb128 0x1f
 5183 05df 05080000 		.4byte	.LASF98
 5184 05e3 01       		.byte	0x1
 5185 05e4 4C03     		.2byte	0x34c
 5186 05e6 23050000 		.4byte	0x523
 5187 05ea 02       		.uleb128 0x2
 5188 05eb 91       		.byte	0x91
 5189 05ec 08       		.sleb128 8
 5190 05ed 1F       		.uleb128 0x1f
 5191 05ee 6A0E0000 		.4byte	.LASF99
 5192 05f2 01       		.byte	0x1
 5193 05f3 4D03     		.2byte	0x34d
 5194 05f5 99060000 		.4byte	0x699
 5195 05f9 02       		.uleb128 0x2
 5196 05fa 91       		.byte	0x91
 5197 05fb 0C       		.sleb128 12
 5198 05fc 20       		.uleb128 0x20
 5199 05fd 1A0F0000 		.4byte	.LASF40
 5200 0601 01       		.byte	0x1
 5201 0602 4F03     		.2byte	0x34f
 5202 0604 95030000 		.4byte	0x395
 5203 0608 01       		.uleb128 0x1
 5204 0609 57       		.byte	0x57
 5205 060a 21       		.uleb128 0x21
 5206 060b 7800     		.ascii	"x\000"
 5207 060d 01       		.byte	0x1
 5208 060e 5003     		.2byte	0x350
 5209 0610 12010000 		.4byte	0x112
 5210 0614 38020000 		.4byte	.LLST12
 5211 0618 22       		.uleb128 0x22
 5212 0619 1E000000 		.4byte	.LVL24
 5213 061d D91F0000 		.4byte	0x1fd9
 5214 0621 34060000 		.4byte	0x634
 5215 0625 1E       		.uleb128 0x1e
 5216 0626 01       		.uleb128 0x1
 5217 0627 51       		.byte	0x51
 5218 0628 02       		.uleb128 0x2
 5219 0629 08       		.byte	0x8
 5220 062a A5       		.byte	0xa5
 5221 062b 1E       		.uleb128 0x1e
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 196


 5222 062c 01       		.uleb128 0x1
 5223 062d 52       		.byte	0x52
 5224 062e 04       		.uleb128 0x4
 5225 062f 77       		.byte	0x77
 5226 0630 00       		.sleb128 0
 5227 0631 32       		.byte	0x32
 5228 0632 24       		.byte	0x24
 5229 0633 00       		.byte	0
 5230 0634 22       		.uleb128 0x22
 5231 0635 5E000000 		.4byte	.LVL32
 5232 0639 E41F0000 		.4byte	0x1fe4
 5233 063d 48060000 		.4byte	0x648
 5234 0641 1E       		.uleb128 0x1e
 5235 0642 01       		.uleb128 0x1
 5236 0643 50       		.byte	0x50
 5237 0644 02       		.uleb128 0x2
 5238 0645 74       		.byte	0x74
 5239 0646 04       		.sleb128 4
 5240 0647 00       		.byte	0
 5241 0648 22       		.uleb128 0x22
 5242 0649 66000000 		.4byte	.LVL33
 5243 064d E41F0000 		.4byte	0x1fe4
 5244 0651 5C060000 		.4byte	0x65c
 5245 0655 1E       		.uleb128 0x1e
 5246 0656 01       		.uleb128 0x1
 5247 0657 50       		.byte	0x50
 5248 0658 02       		.uleb128 0x2
 5249 0659 74       		.byte	0x74
 5250 065a 18       		.sleb128 24
 5251 065b 00       		.byte	0
 5252 065c 1D       		.uleb128 0x1d
 5253 065d 80000000 		.4byte	.LVL35
 5254 0661 F01F0000 		.4byte	0x1ff0
 5255 0665 1E       		.uleb128 0x1e
 5256 0666 01       		.uleb128 0x1
 5257 0667 50       		.byte	0x50
 5258 0668 02       		.uleb128 0x2
 5259 0669 77       		.byte	0x77
 5260 066a 00       		.sleb128 0
 5261 066b 1E       		.uleb128 0x1e
 5262 066c 01       		.uleb128 0x1
 5263 066d 51       		.byte	0x51
 5264 066e 02       		.uleb128 0x2
 5265 066f 79       		.byte	0x79
 5266 0670 00       		.sleb128 0
 5267 0671 1E       		.uleb128 0x1e
 5268 0672 01       		.uleb128 0x1
 5269 0673 52       		.byte	0x52
 5270 0674 02       		.uleb128 0x2
 5271 0675 7A       		.byte	0x7a
 5272 0676 00       		.sleb128 0
 5273 0677 00       		.byte	0
 5274 0678 00       		.byte	0
 5275 0679 07       		.uleb128 0x7
 5276 067a D5000000 		.4byte	0xd5
 5277 067e 07       		.uleb128 0x7
 5278 067f A5000000 		.4byte	0xa5
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 197


 5279 0683 06       		.uleb128 0x6
 5280 0684 04       		.byte	0x4
 5281 0685 11020000 		.4byte	0x211
 5282 0689 07       		.uleb128 0x7
 5283 068a 83060000 		.4byte	0x683
 5284 068e 06       		.uleb128 0x6
 5285 068f 04       		.byte	0x4
 5286 0690 94060000 		.4byte	0x694
 5287 0694 07       		.uleb128 0x7
 5288 0695 85030000 		.4byte	0x385
 5289 0699 07       		.uleb128 0x7
 5290 069a 8E060000 		.4byte	0x68e
 5291 069e 1B       		.uleb128 0x1b
 5292 069f 330F0000 		.4byte	.LASF100
 5293 06a3 01       		.byte	0x1
 5294 06a4 AB0D     		.2byte	0xdab
 5295 06a6 00000000 		.4byte	.LFB39
 5296 06aa 58000000 		.4byte	.LFE39-.LFB39
 5297 06ae 01       		.uleb128 0x1
 5298 06af 9C       		.byte	0x9c
 5299 06b0 47070000 		.4byte	0x747
 5300 06b4 1A       		.uleb128 0x1a
 5301 06b5 62000000 		.4byte	.LASF43
 5302 06b9 01       		.byte	0x1
 5303 06ba AD0D     		.2byte	0xdad
 5304 06bc 12010000 		.4byte	0x112
 5305 06c0 57020000 		.4byte	.LLST13
 5306 06c4 22       		.uleb128 0x22
 5307 06c5 14000000 		.4byte	.LVL38
 5308 06c9 FB1F0000 		.4byte	0x1ffb
 5309 06cd E5060000 		.4byte	0x6e5
 5310 06d1 1E       		.uleb128 0x1e
 5311 06d2 01       		.uleb128 0x1
 5312 06d3 50       		.byte	0x50
 5313 06d4 0F       		.uleb128 0xf
 5314 06d5 74       		.byte	0x74
 5315 06d6 00       		.sleb128 0
 5316 06d7 32       		.byte	0x32
 5317 06d8 24       		.byte	0x24
 5318 06d9 74       		.byte	0x74
 5319 06da 00       		.sleb128 0
 5320 06db 22       		.byte	0x22
 5321 06dc 32       		.byte	0x32
 5322 06dd 24       		.byte	0x24
 5323 06de 03       		.byte	0x3
 5324 06df 30000000 		.4byte	.LANCHOR0+48
 5325 06e3 22       		.byte	0x22
 5326 06e4 00       		.byte	0
 5327 06e5 22       		.uleb128 0x22
 5328 06e6 26000000 		.4byte	.LVL41
 5329 06ea FB1F0000 		.4byte	0x1ffb
 5330 06ee F9060000 		.4byte	0x6f9
 5331 06f2 1E       		.uleb128 0x1e
 5332 06f3 01       		.uleb128 0x1
 5333 06f4 50       		.byte	0x50
 5334 06f5 02       		.uleb128 0x2
 5335 06f6 76       		.byte	0x76
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 198


 5336 06f7 00       		.sleb128 0
 5337 06f8 00       		.byte	0
 5338 06f9 22       		.uleb128 0x22
 5339 06fa 30000000 		.4byte	.LVL42
 5340 06fe FB1F0000 		.4byte	0x1ffb
 5341 0702 0D070000 		.4byte	0x70d
 5342 0706 1E       		.uleb128 0x1e
 5343 0707 01       		.uleb128 0x1
 5344 0708 50       		.byte	0x50
 5345 0709 02       		.uleb128 0x2
 5346 070a 75       		.byte	0x75
 5347 070b 00       		.sleb128 0
 5348 070c 00       		.byte	0
 5349 070d 22       		.uleb128 0x22
 5350 070e 38000000 		.4byte	.LVL43
 5351 0712 FB1F0000 		.4byte	0x1ffb
 5352 0716 21070000 		.4byte	0x721
 5353 071a 1E       		.uleb128 0x1e
 5354 071b 01       		.uleb128 0x1
 5355 071c 50       		.byte	0x50
 5356 071d 02       		.uleb128 0x2
 5357 071e 74       		.byte	0x74
 5358 071f 14       		.sleb128 20
 5359 0720 00       		.byte	0
 5360 0721 22       		.uleb128 0x22
 5361 0722 40000000 		.4byte	.LVL44
 5362 0726 FB1F0000 		.4byte	0x1ffb
 5363 072a 36070000 		.4byte	0x736
 5364 072e 1E       		.uleb128 0x1e
 5365 072f 01       		.uleb128 0x1
 5366 0730 50       		.byte	0x50
 5367 0731 03       		.uleb128 0x3
 5368 0732 74       		.byte	0x74
 5369 0733 D805     		.sleb128 728
 5370 0735 00       		.byte	0
 5371 0736 1D       		.uleb128 0x1d
 5372 0737 46000000 		.4byte	.LVL45
 5373 073b FB1F0000 		.4byte	0x1ffb
 5374 073f 1E       		.uleb128 0x1e
 5375 0740 01       		.uleb128 0x1
 5376 0741 50       		.byte	0x50
 5377 0742 02       		.uleb128 0x2
 5378 0743 74       		.byte	0x74
 5379 0744 00       		.sleb128 0
 5380 0745 00       		.byte	0
 5381 0746 00       		.byte	0
 5382 0747 1B       		.uleb128 0x1b
 5383 0748 CF070000 		.4byte	.LASF101
 5384 074c 01       		.byte	0x1
 5385 074d 1404     		.2byte	0x414
 5386 074f 00000000 		.4byte	.LFB7
 5387 0753 AC000000 		.4byte	.LFE7-.LFB7
 5388 0757 01       		.uleb128 0x1
 5389 0758 9C       		.byte	0x9c
 5390 0759 9D070000 		.4byte	0x79d
 5391 075d 19       		.uleb128 0x19
 5392 075e 05080000 		.4byte	.LASF98
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 199


 5393 0762 01       		.byte	0x1
 5394 0763 1404     		.2byte	0x414
 5395 0765 23050000 		.4byte	0x523
 5396 0769 76020000 		.4byte	.LLST14
 5397 076d 1C       		.uleb128 0x1c
 5398 076e 08000000 		.4byte	.LVL47
 5399 0772 07200000 		.4byte	0x2007
 5400 0776 1C       		.uleb128 0x1c
 5401 0777 2C000000 		.4byte	.LVL48
 5402 077b 9E060000 		.4byte	0x69e
 5403 077f 22       		.uleb128 0x22
 5404 0780 7A000000 		.4byte	.LVL49
 5405 0784 12200000 		.4byte	0x2012
 5406 0788 93070000 		.4byte	0x793
 5407 078c 1E       		.uleb128 0x1e
 5408 078d 01       		.uleb128 0x1
 5409 078e 51       		.byte	0x51
 5410 078f 02       		.uleb128 0x2
 5411 0790 75       		.byte	0x75
 5412 0791 04       		.sleb128 4
 5413 0792 00       		.byte	0
 5414 0793 1C       		.uleb128 0x1c
 5415 0794 7E000000 		.4byte	.LVL50
 5416 0798 1E200000 		.4byte	0x201e
 5417 079c 00       		.byte	0
 5418 079d 1B       		.uleb128 0x1b
 5419 079e 680F0000 		.4byte	.LASF102
 5420 07a2 01       		.byte	0x1
 5421 07a3 CB0D     		.2byte	0xdcb
 5422 07a5 00000000 		.4byte	.LFB40
 5423 07a9 44000000 		.4byte	.LFE40-.LFB40
 5424 07ad 01       		.uleb128 0x1
 5425 07ae 9C       		.byte	0x9c
 5426 07af 04080000 		.4byte	0x804
 5427 07b3 23       		.uleb128 0x23
 5428 07b4 02000000 		.4byte	.LBB26
 5429 07b8 3C000000 		.4byte	.LBE26-.LBB26
 5430 07bc 1A       		.uleb128 0x1a
 5431 07bd FF0E0000 		.4byte	.LASF84
 5432 07c1 01       		.byte	0x1
 5433 07c2 D20D     		.2byte	0xdd2
 5434 07c4 23050000 		.4byte	0x523
 5435 07c8 A2020000 		.4byte	.LLST15
 5436 07cc 1C       		.uleb128 0x1c
 5437 07cd 08000000 		.4byte	.LVL52
 5438 07d1 07200000 		.4byte	0x2007
 5439 07d5 22       		.uleb128 0x22
 5440 07d6 16000000 		.4byte	.LVL54
 5441 07da 29200000 		.4byte	0x2029
 5442 07de E9070000 		.4byte	0x7e9
 5443 07e2 1E       		.uleb128 0x1e
 5444 07e3 01       		.uleb128 0x1
 5445 07e4 50       		.byte	0x50
 5446 07e5 02       		.uleb128 0x2
 5447 07e6 75       		.byte	0x75
 5448 07e7 04       		.sleb128 4
 5449 07e8 00       		.byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 200


 5450 07e9 1C       		.uleb128 0x1c
 5451 07ea 2E000000 		.4byte	.LVL55
 5452 07ee 1E200000 		.4byte	0x201e
 5453 07f2 1D       		.uleb128 0x1d
 5454 07f3 34000000 		.4byte	.LVL56
 5455 07f7 29050000 		.4byte	0x529
 5456 07fb 1E       		.uleb128 0x1e
 5457 07fc 01       		.uleb128 0x1
 5458 07fd 50       		.byte	0x50
 5459 07fe 02       		.uleb128 0x2
 5460 07ff 75       		.byte	0x75
 5461 0800 00       		.sleb128 0
 5462 0801 00       		.byte	0
 5463 0802 00       		.byte	0
 5464 0803 00       		.byte	0
 5465 0804 24       		.uleb128 0x24
 5466 0805 5E070000 		.4byte	.LASF103
 5467 0809 01       		.byte	0x1
 5468 080a D70C     		.2byte	0xcd7
 5469 080c 00000000 		.4byte	.LFB38
 5470 0810 08000000 		.4byte	.LFE38-.LFB38
 5471 0814 01       		.uleb128 0x1
 5472 0815 9C       		.byte	0x9c
 5473 0816 34080000 		.4byte	0x834
 5474 081a 19       		.uleb128 0x19
 5475 081b 020B0000 		.4byte	.LASF96
 5476 081f 01       		.byte	0x1
 5477 0820 D70C     		.2byte	0xcd7
 5478 0822 A5000000 		.4byte	0xa5
 5479 0826 B5020000 		.4byte	.LLST16
 5480 082a 1C       		.uleb128 0x1c
 5481 082b 06000000 		.4byte	.LVL59
 5482 082f 9D070000 		.4byte	0x79d
 5483 0833 00       		.byte	0
 5484 0834 1B       		.uleb128 0x1b
 5485 0835 730E0000 		.4byte	.LASF104
 5486 0839 01       		.byte	0x1
 5487 083a 7B13     		.2byte	0x137b
 5488 083c 00000000 		.4byte	.LFB58
 5489 0840 84000000 		.4byte	.LFE58-.LFB58
 5490 0844 01       		.uleb128 0x1
 5491 0845 9C       		.byte	0x9c
 5492 0846 BD080000 		.4byte	0x8bd
 5493 084a 19       		.uleb128 0x19
 5494 084b ED0D0000 		.4byte	.LASF105
 5495 084f 01       		.byte	0x1
 5496 0850 7B13     		.2byte	0x137b
 5497 0852 1D010000 		.4byte	0x11d
 5498 0856 D6020000 		.4byte	.LLST17
 5499 085a 19       		.uleb128 0x19
 5500 085b EC0C0000 		.4byte	.LASF106
 5501 085f 01       		.byte	0x1
 5502 0860 7B13     		.2byte	0x137b
 5503 0862 BD080000 		.4byte	0x8bd
 5504 0866 02030000 		.4byte	.LLST18
 5505 086a 1A       		.uleb128 0x1a
 5506 086b E40E0000 		.4byte	.LASF107
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 201


 5507 086f 01       		.byte	0x1
 5508 0870 7D13     		.2byte	0x137d
 5509 0872 1D010000 		.4byte	0x11d
 5510 0876 2E030000 		.4byte	.LLST19
 5511 087a 1A       		.uleb128 0x1a
 5512 087b F5050000 		.4byte	.LASF108
 5513 087f 01       		.byte	0x1
 5514 0880 7E13     		.2byte	0x137e
 5515 0882 C2080000 		.4byte	0x8c2
 5516 0886 41030000 		.4byte	.LLST20
 5517 088a 1C       		.uleb128 0x1c
 5518 088b 16000000 		.4byte	.LVL63
 5519 088f 29200000 		.4byte	0x2029
 5520 0893 22       		.uleb128 0x22
 5521 0894 46000000 		.4byte	.LVL64
 5522 0898 12200000 		.4byte	0x2012
 5523 089c AA080000 		.4byte	0x8aa
 5524 08a0 1E       		.uleb128 0x1e
 5525 08a1 01       		.uleb128 0x1
 5526 08a2 50       		.byte	0x50
 5527 08a3 05       		.uleb128 0x5
 5528 08a4 03       		.byte	0x3
 5529 08a5 00000000 		.4byte	.LANCHOR0
 5530 08a9 00       		.byte	0
 5531 08aa 1C       		.uleb128 0x1c
 5532 08ab 66000000 		.4byte	.LVL67
 5533 08af 35200000 		.4byte	0x2035
 5534 08b3 1C       		.uleb128 0x1c
 5535 08b4 76000000 		.4byte	.LVL70
 5536 08b8 35200000 		.4byte	0x2035
 5537 08bc 00       		.byte	0
 5538 08bd 07       		.uleb128 0x7
 5539 08be 07010000 		.4byte	0x107
 5540 08c2 07       		.uleb128 0x7
 5541 08c3 1D010000 		.4byte	0x11d
 5542 08c7 25       		.uleb128 0x25
 5543 08c8 C3070000 		.4byte	.LASF111
 5544 08cc 01       		.byte	0x1
 5545 08cd EB02     		.2byte	0x2eb
 5546 08cf 07010000 		.4byte	0x107
 5547 08d3 00000000 		.4byte	.LFB5
 5548 08d7 62000000 		.4byte	.LFE5-.LFB5
 5549 08db 01       		.uleb128 0x1
 5550 08dc 9C       		.byte	0x9c
 5551 08dd 0B0A0000 		.4byte	0xa0b
 5552 08e1 19       		.uleb128 0x19
 5553 08e2 0E080000 		.4byte	.LASF93
 5554 08e6 01       		.byte	0x1
 5555 08e7 EB02     		.2byte	0x2eb
 5556 08e9 E0000000 		.4byte	0xe0
 5557 08ed 54030000 		.4byte	.LLST21
 5558 08f1 19       		.uleb128 0x19
 5559 08f2 F7020000 		.4byte	.LASF94
 5560 08f6 01       		.byte	0x1
 5561 08f7 EC02     		.2byte	0x2ec
 5562 08f9 90030000 		.4byte	0x390
 5563 08fd 72030000 		.4byte	.LLST22
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 202


 5564 0901 19       		.uleb128 0x19
 5565 0902 83030000 		.4byte	.LASF109
 5566 0906 01       		.byte	0x1
 5567 0907 ED02     		.2byte	0x2ed
 5568 0909 0B0A0000 		.4byte	0xa0b
 5569 090d 90030000 		.4byte	.LLST23
 5570 0911 19       		.uleb128 0x19
 5571 0912 020B0000 		.4byte	.LASF96
 5572 0916 01       		.byte	0x1
 5573 0917 EE02     		.2byte	0x2ee
 5574 0919 7E060000 		.4byte	0x67e
 5575 091d B1030000 		.4byte	.LLST24
 5576 0921 1F       		.uleb128 0x1f
 5577 0922 62000000 		.4byte	.LASF43
 5578 0926 01       		.byte	0x1
 5579 0927 EF02     		.2byte	0x2ef
 5580 0929 12010000 		.4byte	0x112
 5581 092d 02       		.uleb128 0x2
 5582 092e 91       		.byte	0x91
 5583 092f 00       		.sleb128 0
 5584 0930 1F       		.uleb128 0x1f
 5585 0931 5A0F0000 		.4byte	.LASF97
 5586 0935 01       		.byte	0x1
 5587 0936 F002     		.2byte	0x2f0
 5588 0938 89060000 		.4byte	0x689
 5589 093c 02       		.uleb128 0x2
 5590 093d 91       		.byte	0x91
 5591 093e 04       		.sleb128 4
 5592 093f 1A       		.uleb128 0x1a
 5593 0940 05080000 		.4byte	.LASF98
 5594 0944 01       		.byte	0x1
 5595 0945 F202     		.2byte	0x2f2
 5596 0947 23050000 		.4byte	0x523
 5597 094b CF030000 		.4byte	.LLST25
 5598 094f 1A       		.uleb128 0x1a
 5599 0950 3B0C0000 		.4byte	.LASF83
 5600 0954 01       		.byte	0x1
 5601 0955 F302     		.2byte	0x2f3
 5602 0957 07010000 		.4byte	0x107
 5603 095b F8030000 		.4byte	.LLST26
 5604 095f 26       		.uleb128 0x26
 5605 0960 0E000000 		.4byte	.LBB27
 5606 0964 24000000 		.4byte	.LBE27-.LBB27
 5607 0968 B7090000 		.4byte	0x9b7
 5608 096c 1A       		.uleb128 0x1a
 5609 096d A20B0000 		.4byte	.LASF44
 5610 0971 01       		.byte	0x1
 5611 0972 1003     		.2byte	0x310
 5612 0974 95030000 		.4byte	0x395
 5613 0978 17040000 		.4byte	.LLST27
 5614 097c 22       		.uleb128 0x22
 5615 097d 14000000 		.4byte	.LVL74
 5616 0981 41200000 		.4byte	0x2041
 5617 0985 92090000 		.4byte	0x992
 5618 0989 1E       		.uleb128 0x1e
 5619 098a 01       		.uleb128 0x1
 5620 098b 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 203


 5621 098c 04       		.uleb128 0x4
 5622 098d 75       		.byte	0x75
 5623 098e 00       		.sleb128 0
 5624 098f 32       		.byte	0x32
 5625 0990 24       		.byte	0x24
 5626 0991 00       		.byte	0
 5627 0992 22       		.uleb128 0x22
 5628 0993 1E000000 		.4byte	.LVL76
 5629 0997 41200000 		.4byte	0x2041
 5630 099b A6090000 		.4byte	0x9a6
 5631 099f 1E       		.uleb128 0x1e
 5632 09a0 01       		.uleb128 0x1
 5633 09a1 50       		.byte	0x50
 5634 09a2 02       		.uleb128 0x2
 5635 09a3 08       		.byte	0x8
 5636 09a4 50       		.byte	0x50
 5637 09a5 00       		.byte	0
 5638 09a6 1D       		.uleb128 0x1d
 5639 09a7 2E000000 		.4byte	.LVL78
 5640 09ab CE1F0000 		.4byte	0x1fce
 5641 09af 1E       		.uleb128 0x1e
 5642 09b0 01       		.uleb128 0x1
 5643 09b1 50       		.byte	0x50
 5644 09b2 02       		.uleb128 0x2
 5645 09b3 79       		.byte	0x79
 5646 09b4 00       		.sleb128 0
 5647 09b5 00       		.byte	0
 5648 09b6 00       		.byte	0
 5649 09b7 22       		.uleb128 0x22
 5650 09b8 4E000000 		.4byte	.LVL81
 5651 09bc 69050000 		.4byte	0x569
 5652 09c0 FA090000 		.4byte	0x9fa
 5653 09c4 1E       		.uleb128 0x1e
 5654 09c5 01       		.uleb128 0x1
 5655 09c6 50       		.byte	0x50
 5656 09c7 02       		.uleb128 0x2
 5657 09c8 76       		.byte	0x76
 5658 09c9 00       		.sleb128 0
 5659 09ca 1E       		.uleb128 0x1e
 5660 09cb 01       		.uleb128 0x1
 5661 09cc 51       		.byte	0x51
 5662 09cd 02       		.uleb128 0x2
 5663 09ce 77       		.byte	0x77
 5664 09cf 00       		.sleb128 0
 5665 09d0 1E       		.uleb128 0x1e
 5666 09d1 01       		.uleb128 0x1
 5667 09d2 52       		.byte	0x52
 5668 09d3 02       		.uleb128 0x2
 5669 09d4 75       		.byte	0x75
 5670 09d5 00       		.sleb128 0
 5671 09d6 1E       		.uleb128 0x1e
 5672 09d7 01       		.uleb128 0x1
 5673 09d8 53       		.byte	0x53
 5674 09d9 02       		.uleb128 0x2
 5675 09da 78       		.byte	0x78
 5676 09db 00       		.sleb128 0
 5677 09dc 1E       		.uleb128 0x1e
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 204


 5678 09dd 02       		.uleb128 0x2
 5679 09de 7D       		.byte	0x7d
 5680 09df 00       		.sleb128 0
 5681 09e0 03       		.uleb128 0x3
 5682 09e1 91       		.byte	0x91
 5683 09e2 00       		.sleb128 0
 5684 09e3 06       		.byte	0x6
 5685 09e4 1E       		.uleb128 0x1e
 5686 09e5 02       		.uleb128 0x2
 5687 09e6 7D       		.byte	0x7d
 5688 09e7 04       		.sleb128 4
 5689 09e8 03       		.uleb128 0x3
 5690 09e9 91       		.byte	0x91
 5691 09ea 04       		.sleb128 4
 5692 09eb 06       		.byte	0x6
 5693 09ec 1E       		.uleb128 0x1e
 5694 09ed 02       		.uleb128 0x2
 5695 09ee 7D       		.byte	0x7d
 5696 09ef 08       		.sleb128 8
 5697 09f0 02       		.uleb128 0x2
 5698 09f1 74       		.byte	0x74
 5699 09f2 00       		.sleb128 0
 5700 09f3 1E       		.uleb128 0x1e
 5701 09f4 02       		.uleb128 0x2
 5702 09f5 7D       		.byte	0x7d
 5703 09f6 0C       		.sleb128 12
 5704 09f7 01       		.uleb128 0x1
 5705 09f8 30       		.byte	0x30
 5706 09f9 00       		.byte	0
 5707 09fa 1D       		.uleb128 0x1d
 5708 09fb 54000000 		.4byte	.LVL82
 5709 09ff 47070000 		.4byte	0x747
 5710 0a03 1E       		.uleb128 0x1e
 5711 0a04 01       		.uleb128 0x1
 5712 0a05 50       		.byte	0x50
 5713 0a06 02       		.uleb128 0x2
 5714 0a07 74       		.byte	0x74
 5715 0a08 00       		.sleb128 0
 5716 0a09 00       		.byte	0
 5717 0a0a 00       		.byte	0
 5718 0a0b 07       		.uleb128 0x7
 5719 0a0c CA000000 		.4byte	0xca
 5720 0a10 27       		.uleb128 0x27
 5721 0a11 6C0A0000 		.4byte	.LASF121
 5722 0a15 01       		.byte	0x1
 5723 0a16 6904     		.2byte	0x469
 5724 0a18 00000000 		.4byte	.LFB8
 5725 0a1c BC000000 		.4byte	.LFE8-.LFB8
 5726 0a20 01       		.uleb128 0x1
 5727 0a21 9C       		.byte	0x9c
 5728 0a22 B90A0000 		.4byte	0xab9
 5729 0a26 19       		.uleb128 0x19
 5730 0a27 AA0B0000 		.4byte	.LASF110
 5731 0a2b 01       		.byte	0x1
 5732 0a2c 6904     		.2byte	0x469
 5733 0a2e 11020000 		.4byte	0x211
 5734 0a32 40040000 		.4byte	.LLST28
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 205


 5735 0a36 1A       		.uleb128 0x1a
 5736 0a37 FF0E0000 		.4byte	.LASF84
 5737 0a3b 01       		.byte	0x1
 5738 0a3c 6B04     		.2byte	0x46b
 5739 0a3e 23050000 		.4byte	0x523
 5740 0a42 5E040000 		.4byte	.LLST29
 5741 0a46 1C       		.uleb128 0x1c
 5742 0a47 08000000 		.4byte	.LVL86
 5743 0a4b 07200000 		.4byte	0x2007
 5744 0a4f 22       		.uleb128 0x22
 5745 0a50 18000000 		.4byte	.LVL88
 5746 0a54 29200000 		.4byte	0x2029
 5747 0a58 630A0000 		.4byte	0xa63
 5748 0a5c 1E       		.uleb128 0x1e
 5749 0a5d 01       		.uleb128 0x1
 5750 0a5e 50       		.byte	0x50
 5751 0a5f 02       		.uleb128 0x2
 5752 0a60 75       		.byte	0x75
 5753 0a61 00       		.sleb128 0
 5754 0a62 00       		.byte	0
 5755 0a63 22       		.uleb128 0x22
 5756 0a64 48000000 		.4byte	.LVL89
 5757 0a68 29200000 		.4byte	0x2029
 5758 0a6c 770A0000 		.4byte	0xa77
 5759 0a70 1E       		.uleb128 0x1e
 5760 0a71 01       		.uleb128 0x1
 5761 0a72 50       		.byte	0x50
 5762 0a73 02       		.uleb128 0x2
 5763 0a74 74       		.byte	0x74
 5764 0a75 18       		.sleb128 24
 5765 0a76 00       		.byte	0
 5766 0a77 22       		.uleb128 0x22
 5767 0a78 68000000 		.4byte	.LVL90
 5768 0a7c 12200000 		.4byte	0x2012
 5769 0a80 920A0000 		.4byte	0xa92
 5770 0a84 1E       		.uleb128 0x1e
 5771 0a85 01       		.uleb128 0x1
 5772 0a86 50       		.byte	0x50
 5773 0a87 03       		.uleb128 0x3
 5774 0a88 76       		.byte	0x76
 5775 0a89 D805     		.sleb128 728
 5776 0a8b 1E       		.uleb128 0x1e
 5777 0a8c 01       		.uleb128 0x1
 5778 0a8d 51       		.byte	0x51
 5779 0a8e 02       		.uleb128 0x2
 5780 0a8f 75       		.byte	0x75
 5781 0a90 00       		.sleb128 0
 5782 0a91 00       		.byte	0
 5783 0a92 22       		.uleb128 0x22
 5784 0a93 86000000 		.4byte	.LVL91
 5785 0a97 29050000 		.4byte	0x529
 5786 0a9b A60A0000 		.4byte	0xaa6
 5787 0a9f 1E       		.uleb128 0x1e
 5788 0aa0 01       		.uleb128 0x1
 5789 0aa1 50       		.byte	0x50
 5790 0aa2 02       		.uleb128 0x2
 5791 0aa3 74       		.byte	0x74
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 206


 5792 0aa4 00       		.sleb128 0
 5793 0aa5 00       		.byte	0
 5794 0aa6 1C       		.uleb128 0x1c
 5795 0aa7 8A000000 		.4byte	.LVL92
 5796 0aab FC040000 		.4byte	0x4fc
 5797 0aaf 1C       		.uleb128 0x1c
 5798 0ab0 8E000000 		.4byte	.LVL93
 5799 0ab4 1E200000 		.4byte	0x201e
 5800 0ab8 00       		.byte	0
 5801 0ab9 25       		.uleb128 0x25
 5802 0aba F7070000 		.4byte	.LASF112
 5803 0abe 01       		.byte	0x1
 5804 0abf 4605     		.2byte	0x546
 5805 0ac1 E3020000 		.4byte	0x2e3
 5806 0ac5 00000000 		.4byte	.LFB11
 5807 0ac9 70000000 		.4byte	.LFE11-.LFB11
 5808 0acd 01       		.uleb128 0x1
 5809 0ace 9C       		.byte	0x9c
 5810 0acf 440B0000 		.4byte	0xb44
 5811 0ad3 19       		.uleb128 0x19
 5812 0ad4 230A0000 		.4byte	.LASF87
 5813 0ad8 01       		.byte	0x1
 5814 0ad9 4605     		.2byte	0x546
 5815 0adb 11020000 		.4byte	0x211
 5816 0adf 71040000 		.4byte	.LLST30
 5817 0ae3 20       		.uleb128 0x20
 5818 0ae4 AB020000 		.4byte	.LASF113
 5819 0ae8 01       		.byte	0x1
 5820 0ae9 4805     		.2byte	0x548
 5821 0aeb E3020000 		.4byte	0x2e3
 5822 0aef 01       		.uleb128 0x1
 5823 0af0 50       		.byte	0x50
 5824 0af1 1A       		.uleb128 0x1a
 5825 0af2 79000000 		.4byte	.LASF114
 5826 0af6 01       		.byte	0x1
 5827 0af7 4905     		.2byte	0x549
 5828 0af9 440B0000 		.4byte	0xb44
 5829 0afd C1040000 		.4byte	.LLST31
 5830 0b01 1A       		.uleb128 0x1a
 5831 0b02 2A010000 		.4byte	.LASF115
 5832 0b06 01       		.byte	0x1
 5833 0b07 4905     		.2byte	0x549
 5834 0b09 440B0000 		.4byte	0xb44
 5835 0b0d DF040000 		.4byte	.LLST32
 5836 0b11 1A       		.uleb128 0x1a
 5837 0b12 86020000 		.4byte	.LASF116
 5838 0b16 01       		.byte	0x1
 5839 0b17 4905     		.2byte	0x549
 5840 0b19 440B0000 		.4byte	0xb44
 5841 0b1d FD040000 		.4byte	.LLST33
 5842 0b21 1A       		.uleb128 0x1a
 5843 0b22 FF0E0000 		.4byte	.LASF84
 5844 0b26 01       		.byte	0x1
 5845 0b27 4A05     		.2byte	0x54a
 5846 0b29 B1040000 		.4byte	0x4b1
 5847 0b2d 1B050000 		.4byte	.LLST34
 5848 0b31 1C       		.uleb128 0x1c
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 207


 5849 0b32 12000000 		.4byte	.LVL97
 5850 0b36 07200000 		.4byte	0x2007
 5851 0b3a 1C       		.uleb128 0x1c
 5852 0b3b 20000000 		.4byte	.LVL101
 5853 0b3f 1E200000 		.4byte	0x201e
 5854 0b43 00       		.byte	0
 5855 0b44 06       		.uleb128 0x6
 5856 0b45 04       		.byte	0x4
 5857 0b46 4A0B0000 		.4byte	0xb4a
 5858 0b4a 07       		.uleb128 0x7
 5859 0b4b 06020000 		.4byte	0x206
 5860 0b4f 25       		.uleb128 0x25
 5861 0b50 E3050000 		.4byte	.LASF117
 5862 0b54 01       		.byte	0x1
 5863 0b55 A205     		.2byte	0x5a2
 5864 0b57 12010000 		.4byte	0x112
 5865 0b5b 00000000 		.4byte	.LFB12
 5866 0b5f 20000000 		.4byte	.LFE12-.LFB12
 5867 0b63 01       		.uleb128 0x1
 5868 0b64 9C       		.byte	0x9c
 5869 0b65 AC0B0000 		.4byte	0xbac
 5870 0b69 19       		.uleb128 0x19
 5871 0b6a 230A0000 		.4byte	.LASF87
 5872 0b6e 01       		.byte	0x1
 5873 0b6f A205     		.2byte	0x5a2
 5874 0b71 A1040000 		.4byte	0x4a1
 5875 0b75 6B050000 		.4byte	.LLST35
 5876 0b79 1A       		.uleb128 0x1a
 5877 0b7a FF0E0000 		.4byte	.LASF84
 5878 0b7e 01       		.byte	0x1
 5879 0b7f A405     		.2byte	0x5a4
 5880 0b81 A6040000 		.4byte	0x4a6
 5881 0b85 97050000 		.4byte	.LLST36
 5882 0b89 1A       		.uleb128 0x1a
 5883 0b8a C1020000 		.4byte	.LASF118
 5884 0b8e 01       		.byte	0x1
 5885 0b8f A505     		.2byte	0x5a5
 5886 0b91 12010000 		.4byte	0x112
 5887 0b95 AA050000 		.4byte	.LLST37
 5888 0b99 1C       		.uleb128 0x1c
 5889 0b9a 08000000 		.4byte	.LVL114
 5890 0b9e 07200000 		.4byte	0x2007
 5891 0ba2 1C       		.uleb128 0x1c
 5892 0ba3 16000000 		.4byte	.LVL117
 5893 0ba7 1E200000 		.4byte	0x201e
 5894 0bab 00       		.byte	0
 5895 0bac 25       		.uleb128 0x25
 5896 0bad 47090000 		.4byte	.LASF119
 5897 0bb1 01       		.byte	0x1
 5898 0bb2 B805     		.2byte	0x5b8
 5899 0bb4 12010000 		.4byte	0x112
 5900 0bb8 00000000 		.4byte	.LFB13
 5901 0bbc 28000000 		.4byte	.LFE13-.LFB13
 5902 0bc0 01       		.uleb128 0x1
 5903 0bc1 9C       		.byte	0x9c
 5904 0bc2 440C0000 		.4byte	0xc44
 5905 0bc6 19       		.uleb128 0x19
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 208


 5906 0bc7 230A0000 		.4byte	.LASF87
 5907 0bcb 01       		.byte	0x1
 5908 0bcc B805     		.2byte	0x5b8
 5909 0bce A1040000 		.4byte	0x4a1
 5910 0bd2 C8050000 		.4byte	.LLST38
 5911 0bd6 1A       		.uleb128 0x1a
 5912 0bd7 FF0E0000 		.4byte	.LASF84
 5913 0bdb 01       		.byte	0x1
 5914 0bdc BA05     		.2byte	0x5ba
 5915 0bde A6040000 		.4byte	0x4a6
 5916 0be2 E9050000 		.4byte	.LLST39
 5917 0be6 20       		.uleb128 0x20
 5918 0be7 C1020000 		.4byte	.LASF118
 5919 0beb 01       		.byte	0x1
 5920 0bec BB05     		.2byte	0x5bb
 5921 0bee 12010000 		.4byte	0x112
 5922 0bf2 01       		.uleb128 0x1
 5923 0bf3 50       		.byte	0x50
 5924 0bf4 28       		.uleb128 0x28
 5925 0bf5 F6030000 		.4byte	.LASF120
 5926 0bf9 01       		.byte	0x1
 5927 0bfa BB05     		.2byte	0x5bb
 5928 0bfc 12010000 		.4byte	0x112
 5929 0c00 29       		.uleb128 0x29
 5930 0c01 D8030000 		.4byte	0x3d8
 5931 0c05 00000000 		.4byte	.LBB28
 5932 0c09 14000000 		.4byte	.LBE28-.LBB28
 5933 0c0d 01       		.byte	0x1
 5934 0c0e CF05     		.2byte	0x5cf
 5935 0c10 290C0000 		.4byte	0xc29
 5936 0c14 23       		.uleb128 0x23
 5937 0c15 00000000 		.4byte	.LBB29
 5938 0c19 14000000 		.4byte	.LBE29-.LBB29
 5939 0c1d 2A       		.uleb128 0x2a
 5940 0c1e E8030000 		.4byte	0x3e8
 5941 0c22 2A       		.uleb128 0x2a
 5942 0c23 F3030000 		.4byte	0x3f3
 5943 0c27 00       		.byte	0
 5944 0c28 00       		.byte	0
 5945 0c29 2B       		.uleb128 0x2b
 5946 0c2a FF030000 		.4byte	0x3ff
 5947 0c2e 1E000000 		.4byte	.LBB30
 5948 0c32 04000000 		.4byte	.LBE30-.LBB30
 5949 0c36 01       		.byte	0x1
 5950 0c37 D605     		.2byte	0x5d6
 5951 0c39 2C       		.uleb128 0x2c
 5952 0c3a 0B040000 		.4byte	0x40b
 5953 0c3e FC050000 		.4byte	.LLST40
 5954 0c42 00       		.byte	0
 5955 0c43 00       		.byte	0
 5956 0c44 27       		.uleb128 0x27
 5957 0c45 DA090000 		.4byte	.LASF122
 5958 0c49 01       		.byte	0x1
 5959 0c4a E005     		.2byte	0x5e0
 5960 0c4c 00000000 		.4byte	.LFB14
 5961 0c50 E0000000 		.4byte	.LFE14-.LFB14
 5962 0c54 01       		.uleb128 0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 209


 5963 0c55 9C       		.byte	0x9c
 5964 0c56 F50C0000 		.4byte	0xcf5
 5965 0c5a 19       		.uleb128 0x19
 5966 0c5b 230A0000 		.4byte	.LASF87
 5967 0c5f 01       		.byte	0x1
 5968 0c60 E005     		.2byte	0x5e0
 5969 0c62 11020000 		.4byte	0x211
 5970 0c66 0F060000 		.4byte	.LLST41
 5971 0c6a 19       		.uleb128 0x19
 5972 0c6b E7080000 		.4byte	.LASF123
 5973 0c6f 01       		.byte	0x1
 5974 0c70 E005     		.2byte	0x5e0
 5975 0c72 12010000 		.4byte	0x112
 5976 0c76 2D060000 		.4byte	.LLST42
 5977 0c7a 1A       		.uleb128 0x1a
 5978 0c7b FF0E0000 		.4byte	.LASF84
 5979 0c7f 01       		.byte	0x1
 5980 0c80 E205     		.2byte	0x5e2
 5981 0c82 23050000 		.4byte	0x523
 5982 0c86 58060000 		.4byte	.LLST43
 5983 0c8a 1A       		.uleb128 0x1a
 5984 0c8b 910F0000 		.4byte	.LASF124
 5985 0c8f 01       		.byte	0x1
 5986 0c90 E305     		.2byte	0x5e3
 5987 0c92 12010000 		.4byte	0x112
 5988 0c96 6B060000 		.4byte	.LLST44
 5989 0c9a 1A       		.uleb128 0x1a
 5990 0c9b D10D0000 		.4byte	.LASF125
 5991 0c9f 01       		.byte	0x1
 5992 0ca0 E305     		.2byte	0x5e3
 5993 0ca2 12010000 		.4byte	0x112
 5994 0ca6 7E060000 		.4byte	.LLST45
 5995 0caa 1A       		.uleb128 0x1a
 5996 0cab 40030000 		.4byte	.LASF126
 5997 0caf 01       		.byte	0x1
 5998 0cb0 E405     		.2byte	0x5e4
 5999 0cb2 07010000 		.4byte	0x107
 6000 0cb6 91060000 		.4byte	.LLST46
 6001 0cba 1C       		.uleb128 0x1c
 6002 0cbb 10000000 		.4byte	.LVL126
 6003 0cbf 07200000 		.4byte	0x2007
 6004 0cc3 22       		.uleb128 0x22
 6005 0cc4 80000000 		.4byte	.LVL133
 6006 0cc8 29200000 		.4byte	0x2029
 6007 0ccc D70C0000 		.4byte	0xcd7
 6008 0cd0 1E       		.uleb128 0x1e
 6009 0cd1 01       		.uleb128 0x1
 6010 0cd2 50       		.byte	0x50
 6011 0cd3 02       		.uleb128 0x2
 6012 0cd4 75       		.byte	0x75
 6013 0cd5 00       		.sleb128 0
 6014 0cd6 00       		.byte	0
 6015 0cd7 22       		.uleb128 0x22
 6016 0cd8 BA000000 		.4byte	.LVL135
 6017 0cdc 12200000 		.4byte	0x2012
 6018 0ce0 EB0C0000 		.4byte	0xceb
 6019 0ce4 1E       		.uleb128 0x1e
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 210


 6020 0ce5 01       		.uleb128 0x1
 6021 0ce6 51       		.byte	0x51
 6022 0ce7 02       		.uleb128 0x2
 6023 0ce8 75       		.byte	0x75
 6024 0ce9 00       		.sleb128 0
 6025 0cea 00       		.byte	0
 6026 0ceb 1C       		.uleb128 0x1c
 6027 0cec D0000000 		.4byte	.LVL137
 6028 0cf0 1E200000 		.4byte	0x201e
 6029 0cf4 00       		.byte	0
 6030 0cf5 27       		.uleb128 0x27
 6031 0cf6 270F0000 		.4byte	.LASF127
 6032 0cfa 01       		.byte	0x1
 6033 0cfb 1707     		.2byte	0x717
 6034 0cfd 00000000 		.4byte	.LFB17
 6035 0d01 78000000 		.4byte	.LFE17-.LFB17
 6036 0d05 01       		.uleb128 0x1
 6037 0d06 9C       		.byte	0x9c
 6038 0d07 7A0D0000 		.4byte	0xd7a
 6039 0d0b 19       		.uleb128 0x19
 6040 0d0c B3020000 		.4byte	.LASF128
 6041 0d10 01       		.byte	0x1
 6042 0d11 1707     		.2byte	0x717
 6043 0d13 11020000 		.4byte	0x211
 6044 0d17 B0060000 		.4byte	.LLST47
 6045 0d1b 1A       		.uleb128 0x1a
 6046 0d1c FF0E0000 		.4byte	.LASF84
 6047 0d20 01       		.byte	0x1
 6048 0d21 1907     		.2byte	0x719
 6049 0d23 7A0D0000 		.4byte	0xd7a
 6050 0d27 B0060000 		.4byte	.LLST47
 6051 0d2b 1C       		.uleb128 0x1c
 6052 0d2c 14000000 		.4byte	.LVL140
 6053 0d30 07200000 		.4byte	0x2007
 6054 0d34 22       		.uleb128 0x22
 6055 0d35 1A000000 		.4byte	.LVL141
 6056 0d39 56040000 		.4byte	0x456
 6057 0d3d 480D0000 		.4byte	0xd48
 6058 0d41 1E       		.uleb128 0x1e
 6059 0d42 01       		.uleb128 0x1
 6060 0d43 50       		.byte	0x50
 6061 0d44 02       		.uleb128 0x2
 6062 0d45 74       		.byte	0x74
 6063 0d46 00       		.sleb128 0
 6064 0d47 00       		.byte	0
 6065 0d48 22       		.uleb128 0x22
 6066 0d49 24000000 		.4byte	.LVL142
 6067 0d4d 29200000 		.4byte	0x2029
 6068 0d51 5C0D0000 		.4byte	0xd5c
 6069 0d55 1E       		.uleb128 0x1e
 6070 0d56 01       		.uleb128 0x1
 6071 0d57 50       		.byte	0x50
 6072 0d58 02       		.uleb128 0x2
 6073 0d59 76       		.byte	0x76
 6074 0d5a 00       		.sleb128 0
 6075 0d5b 00       		.byte	0
 6076 0d5c 22       		.uleb128 0x22
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 211


 6077 0d5d 4A000000 		.4byte	.LVL143
 6078 0d61 12200000 		.4byte	0x2012
 6079 0d65 700D0000 		.4byte	0xd70
 6080 0d69 1E       		.uleb128 0x1e
 6081 0d6a 01       		.uleb128 0x1
 6082 0d6b 51       		.byte	0x51
 6083 0d6c 02       		.uleb128 0x2
 6084 0d6d 76       		.byte	0x76
 6085 0d6e 00       		.sleb128 0
 6086 0d6f 00       		.byte	0
 6087 0d70 1C       		.uleb128 0x1c
 6088 0d71 6A000000 		.4byte	.LVL144
 6089 0d75 1E200000 		.4byte	0x201e
 6090 0d79 00       		.byte	0
 6091 0d7a 07       		.uleb128 0x7
 6092 0d7b 23050000 		.4byte	0x523
 6093 0d7f 25       		.uleb128 0x25
 6094 0d80 9B040000 		.4byte	.LASF129
 6095 0d84 01       		.byte	0x1
 6096 0d85 4D07     		.2byte	0x74d
 6097 0d87 07010000 		.4byte	0x107
 6098 0d8b 00000000 		.4byte	.LFB18
 6099 0d8f 88000000 		.4byte	.LFE18-.LFB18
 6100 0d93 01       		.uleb128 0x1
 6101 0d94 9C       		.byte	0x9c
 6102 0d95 720E0000 		.4byte	0xe72
 6103 0d99 19       		.uleb128 0x19
 6104 0d9a B3020000 		.4byte	.LASF128
 6105 0d9e 01       		.byte	0x1
 6106 0d9f 4D07     		.2byte	0x74d
 6107 0da1 11020000 		.4byte	0x211
 6108 0da5 D9060000 		.4byte	.LLST49
 6109 0da9 1A       		.uleb128 0x1a
 6110 0daa 40030000 		.4byte	.LASF126
 6111 0dae 01       		.byte	0x1
 6112 0daf 4F07     		.2byte	0x74f
 6113 0db1 07010000 		.4byte	0x107
 6114 0db5 05070000 		.4byte	.LLST50
 6115 0db9 1A       		.uleb128 0x1a
 6116 0dba FF0E0000 		.4byte	.LASF84
 6117 0dbe 01       		.byte	0x1
 6118 0dbf 5007     		.2byte	0x750
 6119 0dc1 7A0D0000 		.4byte	0xd7a
 6120 0dc5 46070000 		.4byte	.LLST51
 6121 0dc9 28       		.uleb128 0x28
 6122 0dca 05030000 		.4byte	.LASF130
 6123 0dce 01       		.byte	0x1
 6124 0dcf 5107     		.2byte	0x751
 6125 0dd1 12010000 		.4byte	0x112
 6126 0dd5 29       		.uleb128 0x29
 6127 0dd6 D8030000 		.4byte	0x3d8
 6128 0dda 04000000 		.4byte	.LBB32
 6129 0dde 14000000 		.4byte	.LBE32-.LBB32
 6130 0de2 01       		.byte	0x1
 6131 0de3 6707     		.2byte	0x767
 6132 0de5 FE0D0000 		.4byte	0xdfe
 6133 0de9 23       		.uleb128 0x23
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 212


 6134 0dea 04000000 		.4byte	.LBB33
 6135 0dee 14000000 		.4byte	.LBE33-.LBB33
 6136 0df2 2A       		.uleb128 0x2a
 6137 0df3 E8030000 		.4byte	0x3e8
 6138 0df7 2A       		.uleb128 0x2a
 6139 0df8 F3030000 		.4byte	0x3f3
 6140 0dfc 00       		.byte	0
 6141 0dfd 00       		.byte	0
 6142 0dfe 29       		.uleb128 0x29
 6143 0dff FF030000 		.4byte	0x3ff
 6144 0e03 78000000 		.4byte	.LBB34
 6145 0e07 04000000 		.4byte	.LBE34-.LBB34
 6146 0e0b 01       		.byte	0x1
 6147 0e0c 8B07     		.2byte	0x78b
 6148 0e0e 1C0E0000 		.4byte	0xe1c
 6149 0e12 2C       		.uleb128 0x2c
 6150 0e13 0B040000 		.4byte	0x40b
 6151 0e17 72070000 		.4byte	.LLST52
 6152 0e1b 00       		.byte	0
 6153 0e1c 22       		.uleb128 0x22
 6154 0e1d 1C000000 		.4byte	.LVL148
 6155 0e21 56040000 		.4byte	0x456
 6156 0e25 300E0000 		.4byte	0xe30
 6157 0e29 1E       		.uleb128 0x1e
 6158 0e2a 01       		.uleb128 0x1
 6159 0e2b 50       		.byte	0x50
 6160 0e2c 02       		.uleb128 0x2
 6161 0e2d 74       		.byte	0x74
 6162 0e2e 00       		.sleb128 0
 6163 0e2f 00       		.byte	0
 6164 0e30 22       		.uleb128 0x22
 6165 0e31 42000000 		.4byte	.LVL150
 6166 0e35 29200000 		.4byte	0x2029
 6167 0e39 440E0000 		.4byte	0xe44
 6168 0e3d 1E       		.uleb128 0x1e
 6169 0e3e 01       		.uleb128 0x1
 6170 0e3f 50       		.byte	0x50
 6171 0e40 02       		.uleb128 0x2
 6172 0e41 77       		.byte	0x77
 6173 0e42 00       		.sleb128 0
 6174 0e43 00       		.byte	0
 6175 0e44 22       		.uleb128 0x22
 6176 0e45 66000000 		.4byte	.LVL151
 6177 0e49 12200000 		.4byte	0x2012
 6178 0e4d 580E0000 		.4byte	0xe58
 6179 0e51 1E       		.uleb128 0x1e
 6180 0e52 01       		.uleb128 0x1
 6181 0e53 51       		.byte	0x51
 6182 0e54 02       		.uleb128 0x2
 6183 0e55 77       		.byte	0x77
 6184 0e56 00       		.sleb128 0
 6185 0e57 00       		.byte	0
 6186 0e58 1D       		.uleb128 0x1d
 6187 0e59 72000000 		.4byte	.LVL153
 6188 0e5d 12200000 		.4byte	0x2012
 6189 0e61 1E       		.uleb128 0x1e
 6190 0e62 01       		.uleb128 0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 213


 6191 0e63 50       		.byte	0x50
 6192 0e64 05       		.uleb128 0x5
 6193 0e65 03       		.byte	0x3
 6194 0e66 14000000 		.4byte	.LANCHOR0+20
 6195 0e6a 1E       		.uleb128 0x1e
 6196 0e6b 01       		.uleb128 0x1
 6197 0e6c 51       		.byte	0x51
 6198 0e6d 02       		.uleb128 0x2
 6199 0e6e 74       		.byte	0x74
 6200 0e6f 18       		.sleb128 24
 6201 0e70 00       		.byte	0
 6202 0e71 00       		.byte	0
 6203 0e72 27       		.uleb128 0x27
 6204 0e73 D80C0000 		.4byte	.LASF131
 6205 0e77 01       		.byte	0x1
 6206 0e78 9307     		.2byte	0x793
 6207 0e7a 00000000 		.4byte	.LFB19
 6208 0e7e 60000000 		.4byte	.LFE19-.LFB19
 6209 0e82 01       		.uleb128 0x1
 6210 0e83 9C       		.byte	0x9c
 6211 0e84 0A0F0000 		.4byte	0xf0a
 6212 0e88 1A       		.uleb128 0x1a
 6213 0e89 3B0C0000 		.4byte	.LASF83
 6214 0e8d 01       		.byte	0x1
 6215 0e8e 9507     		.2byte	0x795
 6216 0e90 07010000 		.4byte	0x107
 6217 0e94 85070000 		.4byte	.LLST53
 6218 0e98 29       		.uleb128 0x29
 6219 0e99 17040000 		.4byte	0x417
 6220 0e9d 22000000 		.4byte	.LBB36
 6221 0ea1 10000000 		.4byte	.LBE36-.LBB36
 6222 0ea5 01       		.byte	0x1
 6223 0ea6 DB07     		.2byte	0x7db
 6224 0ea8 BC0E0000 		.4byte	0xebc
 6225 0eac 23       		.uleb128 0x23
 6226 0ead 22000000 		.4byte	.LBB37
 6227 0eb1 10000000 		.4byte	.LBE37-.LBB37
 6228 0eb5 2A       		.uleb128 0x2a
 6229 0eb6 23040000 		.4byte	0x423
 6230 0eba 00       		.byte	0
 6231 0ebb 00       		.byte	0
 6232 0ebc 22       		.uleb128 0x22
 6233 0ebd 16000000 		.4byte	.LVL157
 6234 0ec1 C7080000 		.4byte	0x8c7
 6235 0ec5 F70E0000 		.4byte	0xef7
 6236 0ec9 1E       		.uleb128 0x1e
 6237 0eca 01       		.uleb128 0x1
 6238 0ecb 50       		.byte	0x50
 6239 0ecc 05       		.uleb128 0x5
 6240 0ecd 03       		.byte	0x3
 6241 0ece 00000000 		.4byte	prvIdleTask
 6242 0ed2 1E       		.uleb128 0x1e
 6243 0ed3 01       		.uleb128 0x1
 6244 0ed4 51       		.byte	0x51
 6245 0ed5 05       		.uleb128 0x5
 6246 0ed6 03       		.byte	0x3
 6247 0ed7 00000000 		.4byte	.LC0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 214


 6248 0edb 1E       		.uleb128 0x1e
 6249 0edc 01       		.uleb128 0x1
 6250 0edd 52       		.byte	0x52
 6251 0ede 02       		.uleb128 0x2
 6252 0edf 08       		.byte	0x8
 6253 0ee0 64       		.byte	0x64
 6254 0ee1 1E       		.uleb128 0x1e
 6255 0ee2 01       		.uleb128 0x1
 6256 0ee3 53       		.byte	0x53
 6257 0ee4 01       		.uleb128 0x1
 6258 0ee5 30       		.byte	0x30
 6259 0ee6 1E       		.uleb128 0x1e
 6260 0ee7 02       		.uleb128 0x2
 6261 0ee8 7D       		.byte	0x7d
 6262 0ee9 00       		.sleb128 0
 6263 0eea 01       		.uleb128 0x1
 6264 0eeb 30       		.byte	0x30
 6265 0eec 1E       		.uleb128 0x1e
 6266 0eed 02       		.uleb128 0x2
 6267 0eee 7D       		.byte	0x7d
 6268 0eef 04       		.sleb128 4
 6269 0ef0 05       		.uleb128 0x5
 6270 0ef1 03       		.byte	0x3
 6271 0ef2 10030000 		.4byte	.LANCHOR0+784
 6272 0ef6 00       		.byte	0
 6273 0ef7 1C       		.uleb128 0x1c
 6274 0ef8 1E000000 		.4byte	.LVL158
 6275 0efc 4C200000 		.4byte	0x204c
 6276 0f00 1C       		.uleb128 0x1c
 6277 0f01 4A000000 		.4byte	.LVL159
 6278 0f05 58200000 		.4byte	0x2058
 6279 0f09 00       		.byte	0
 6280 0f0a 27       		.uleb128 0x27
 6281 0f0b D1050000 		.4byte	.LASF132
 6282 0f0f 01       		.byte	0x1
 6283 0f10 0D08     		.2byte	0x80d
 6284 0f12 00000000 		.4byte	.LFB20
 6285 0f16 24000000 		.4byte	.LFE20-.LFB20
 6286 0f1a 01       		.uleb128 0x1
 6287 0f1b 9C       		.byte	0x9c
 6288 0f1c 4E0F0000 		.4byte	0xf4e
 6289 0f20 29       		.uleb128 0x29
 6290 0f21 17040000 		.4byte	0x417
 6291 0f25 02000000 		.4byte	.LBB38
 6292 0f29 10000000 		.4byte	.LBE38-.LBB38
 6293 0f2d 01       		.byte	0x1
 6294 0f2e 1208     		.2byte	0x812
 6295 0f30 440F0000 		.4byte	0xf44
 6296 0f34 23       		.uleb128 0x23
 6297 0f35 02000000 		.4byte	.LBB39
 6298 0f39 10000000 		.4byte	.LBE39-.LBB39
 6299 0f3d 2A       		.uleb128 0x2a
 6300 0f3e 23040000 		.4byte	0x423
 6301 0f42 00       		.byte	0
 6302 0f43 00       		.byte	0
 6303 0f44 1C       		.uleb128 0x1c
 6304 0f45 1E000000 		.4byte	.LVL160
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 215


 6305 0f49 63200000 		.4byte	0x2063
 6306 0f4d 00       		.byte	0
 6307 0f4e 2D       		.uleb128 0x2d
 6308 0f4f BB040000 		.4byte	.LASF170
 6309 0f53 01       		.byte	0x1
 6310 0f54 1808     		.2byte	0x818
 6311 0f56 00000000 		.4byte	.LFB21
 6312 0f5a 14000000 		.4byte	.LFE21-.LFB21
 6313 0f5e 01       		.uleb128 0x1
 6314 0f5f 9C       		.byte	0x9c
 6315 0f60 25       		.uleb128 0x25
 6316 0f61 5B0B0000 		.4byte	.LASF133
 6317 0f65 01       		.byte	0x1
 6318 0f66 CF08     		.2byte	0x8cf
 6319 0f68 1D010000 		.4byte	0x11d
 6320 0f6c 00000000 		.4byte	.LFB23
 6321 0f70 0C000000 		.4byte	.LFE23-.LFB23
 6322 0f74 01       		.uleb128 0x1
 6323 0f75 9C       		.byte	0x9c
 6324 0f76 890F0000 		.4byte	0xf89
 6325 0f7a 20       		.uleb128 0x20
 6326 0f7b D10C0000 		.4byte	.LASF134
 6327 0f7f 01       		.byte	0x1
 6328 0f80 D108     		.2byte	0x8d1
 6329 0f82 1D010000 		.4byte	0x11d
 6330 0f86 01       		.uleb128 0x1
 6331 0f87 50       		.byte	0x50
 6332 0f88 00       		.byte	0
 6333 0f89 25       		.uleb128 0x25
 6334 0f8a DD030000 		.4byte	.LASF135
 6335 0f8e 01       		.byte	0x1
 6336 0f8f DE08     		.2byte	0x8de
 6337 0f91 1D010000 		.4byte	0x11d
 6338 0f95 00000000 		.4byte	.LFB24
 6339 0f99 0C000000 		.4byte	.LFE24-.LFB24
 6340 0f9d 01       		.uleb128 0x1
 6341 0f9e 9C       		.byte	0x9c
 6342 0f9f BF0F0000 		.4byte	0xfbf
 6343 0fa3 20       		.uleb128 0x20
 6344 0fa4 3B0C0000 		.4byte	.LASF83
 6345 0fa8 01       		.byte	0x1
 6346 0fa9 E008     		.2byte	0x8e0
 6347 0fab 1D010000 		.4byte	0x11d
 6348 0faf 01       		.uleb128 0x1
 6349 0fb0 50       		.byte	0x50
 6350 0fb1 2E       		.uleb128 0x2e
 6351 0fb2 05030000 		.4byte	.LASF130
 6352 0fb6 01       		.byte	0x1
 6353 0fb7 E108     		.2byte	0x8e1
 6354 0fb9 12010000 		.4byte	0x112
 6355 0fbd 00       		.byte	0
 6356 0fbe 00       		.byte	0
 6357 0fbf 2F       		.uleb128 0x2f
 6358 0fc0 CA020000 		.4byte	.LASF185
 6359 0fc4 01       		.byte	0x1
 6360 0fc5 FD08     		.2byte	0x8fd
 6361 0fc7 12010000 		.4byte	0x112
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 216


 6362 0fcb 00000000 		.4byte	.LFB25
 6363 0fcf 0C000000 		.4byte	.LFE25-.LFB25
 6364 0fd3 01       		.uleb128 0x1
 6365 0fd4 9C       		.byte	0x9c
 6366 0fd5 25       		.uleb128 0x25
 6367 0fd6 C30C0000 		.4byte	.LASF136
 6368 0fda 01       		.byte	0x1
 6369 0fdb 0509     		.2byte	0x905
 6370 0fdd A7000000 		.4byte	0xa7
 6371 0fe1 00000000 		.4byte	.LFB26
 6372 0fe5 14000000 		.4byte	.LFE26-.LFB26
 6373 0fe9 01       		.uleb128 0x1
 6374 0fea 9C       		.byte	0x9c
 6375 0feb 0E100000 		.4byte	0x100e
 6376 0fef 19       		.uleb128 0x19
 6377 0ff0 FD090000 		.4byte	.LASF137
 6378 0ff4 01       		.byte	0x1
 6379 0ff5 0509     		.2byte	0x905
 6380 0ff7 11020000 		.4byte	0x211
 6381 0ffb A3070000 		.4byte	.LLST54
 6382 0fff 20       		.uleb128 0x20
 6383 1000 FF0E0000 		.4byte	.LASF84
 6384 1004 01       		.byte	0x1
 6385 1005 0709     		.2byte	0x907
 6386 1007 23050000 		.4byte	0x523
 6387 100b 01       		.uleb128 0x1
 6388 100c 53       		.byte	0x53
 6389 100d 00       		.byte	0
 6390 100e 25       		.uleb128 0x25
 6391 100f E7040000 		.4byte	.LASF138
 6392 1013 01       		.byte	0x1
 6393 1014 4C0A     		.2byte	0xa4c
 6394 1016 07010000 		.4byte	0x107
 6395 101a 00000000 		.4byte	.LFB27
 6396 101e 00010000 		.4byte	.LFE27-.LFB27
 6397 1022 01       		.uleb128 0x1
 6398 1023 9C       		.byte	0x9c
 6399 1024 CE100000 		.4byte	0x10ce
 6400 1028 1A       		.uleb128 0x1a
 6401 1029 FF0E0000 		.4byte	.LASF84
 6402 102d 01       		.byte	0x1
 6403 102e 4E0A     		.2byte	0xa4e
 6404 1030 23050000 		.4byte	0x523
 6405 1034 B6070000 		.4byte	.LLST55
 6406 1038 1A       		.uleb128 0x1a
 6407 1039 0F0B0000 		.4byte	.LASF24
 6408 103d 01       		.byte	0x1
 6409 103e 4F0A     		.2byte	0xa4f
 6410 1040 1D010000 		.4byte	0x11d
 6411 1044 D4070000 		.4byte	.LLST56
 6412 1048 1A       		.uleb128 0x1a
 6413 1049 840B0000 		.4byte	.LASF139
 6414 104d 01       		.byte	0x1
 6415 104e 500A     		.2byte	0xa50
 6416 1050 07010000 		.4byte	0x107
 6417 1054 E7070000 		.4byte	.LLST57
 6418 1058 30       		.uleb128 0x30
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 217


 6419 1059 00000000 		.4byte	.Ldebug_ranges0+0
 6420 105d 1A       		.uleb128 0x1a
 6421 105e F5050000 		.4byte	.LASF108
 6422 1062 01       		.byte	0x1
 6423 1063 5A0A     		.2byte	0xa5a
 6424 1065 C2080000 		.4byte	0x8c2
 6425 1069 3F080000 		.4byte	.LLST58
 6426 106d 26       		.uleb128 0x26
 6427 106e 1C000000 		.4byte	.LBB41
 6428 1072 1A000000 		.4byte	.LBE41-.LBB41
 6429 1076 94100000 		.4byte	0x1094
 6430 107a 1A       		.uleb128 0x1a
 6431 107b 190D0000 		.4byte	.LASF140
 6432 107f 01       		.byte	0x1
 6433 1080 620A     		.2byte	0xa62
 6434 1082 CE100000 		.4byte	0x10ce
 6435 1086 5D080000 		.4byte	.LLST59
 6436 108a 1C       		.uleb128 0x1c
 6437 108b 36000000 		.4byte	.LVL171
 6438 108f FC040000 		.4byte	0x4fc
 6439 1093 00       		.byte	0
 6440 1094 22       		.uleb128 0x22
 6441 1095 7C000000 		.4byte	.LVL178
 6442 1099 29200000 		.4byte	0x2029
 6443 109d A8100000 		.4byte	0x10a8
 6444 10a1 1E       		.uleb128 0x1e
 6445 10a2 01       		.uleb128 0x1
 6446 10a3 50       		.byte	0x50
 6447 10a4 02       		.uleb128 0x2
 6448 10a5 76       		.byte	0x76
 6449 10a6 00       		.sleb128 0
 6450 10a7 00       		.byte	0
 6451 10a8 22       		.uleb128 0x22
 6452 10a9 88000000 		.4byte	.LVL179
 6453 10ad 29200000 		.4byte	0x2029
 6454 10b1 BC100000 		.4byte	0x10bc
 6455 10b5 1E       		.uleb128 0x1e
 6456 10b6 01       		.uleb128 0x1
 6457 10b7 50       		.byte	0x50
 6458 10b8 02       		.uleb128 0x2
 6459 10b9 74       		.byte	0x74
 6460 10ba 18       		.sleb128 24
 6461 10bb 00       		.byte	0
 6462 10bc 1D       		.uleb128 0x1d
 6463 10bd AE000000 		.4byte	.LVL180
 6464 10c1 12200000 		.4byte	0x2012
 6465 10c5 1E       		.uleb128 0x1e
 6466 10c6 01       		.uleb128 0x1
 6467 10c7 51       		.byte	0x51
 6468 10c8 02       		.uleb128 0x2
 6469 10c9 76       		.byte	0x76
 6470 10ca 00       		.sleb128 0
 6471 10cb 00       		.byte	0
 6472 10cc 00       		.byte	0
 6473 10cd 00       		.byte	0
 6474 10ce 06       		.uleb128 0x6
 6475 10cf 04       		.byte	0x4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 218


 6476 10d0 06020000 		.4byte	0x206
 6477 10d4 25       		.uleb128 0x25
 6478 10d5 230B0000 		.4byte	.LASF141
 6479 10d9 01       		.byte	0x1
 6480 10da 6108     		.2byte	0x861
 6481 10dc 07010000 		.4byte	0x107
 6482 10e0 00000000 		.4byte	.LFB22
 6483 10e4 D8000000 		.4byte	.LFE22-.LFB22
 6484 10e8 01       		.uleb128 0x1
 6485 10e9 9C       		.byte	0x9c
 6486 10ea 8D110000 		.4byte	0x118d
 6487 10ee 1A       		.uleb128 0x1a
 6488 10ef FF0E0000 		.4byte	.LASF84
 6489 10f3 01       		.byte	0x1
 6490 10f4 6308     		.2byte	0x863
 6491 10f6 23050000 		.4byte	0x523
 6492 10fa 7F080000 		.4byte	.LLST60
 6493 10fe 1A       		.uleb128 0x1a
 6494 10ff 250E0000 		.4byte	.LASF142
 6495 1103 01       		.byte	0x1
 6496 1104 6408     		.2byte	0x864
 6497 1106 07010000 		.4byte	0x107
 6498 110a CC080000 		.4byte	.LLST61
 6499 110e 26       		.uleb128 0x26
 6500 110f 84000000 		.4byte	.LBB44
 6501 1113 22000000 		.4byte	.LBE44-.LBB44
 6502 1117 35110000 		.4byte	0x1135
 6503 111b 1A       		.uleb128 0x1a
 6504 111c A4000000 		.4byte	.LASF143
 6505 1120 01       		.byte	0x1
 6506 1121 9C08     		.2byte	0x89c
 6507 1123 12010000 		.4byte	0x112
 6508 1127 0E090000 		.4byte	.LLST62
 6509 112b 1C       		.uleb128 0x1c
 6510 112c 90000000 		.4byte	.LVL198
 6511 1130 0E100000 		.4byte	0x100e
 6512 1134 00       		.byte	0
 6513 1135 1C       		.uleb128 0x1c
 6514 1136 06000000 		.4byte	.LVL188
 6515 113a 07200000 		.4byte	0x2007
 6516 113e 22       		.uleb128 0x22
 6517 113f 34000000 		.4byte	.LVL191
 6518 1143 29200000 		.4byte	0x2029
 6519 1147 52110000 		.4byte	0x1152
 6520 114b 1E       		.uleb128 0x1e
 6521 114c 01       		.uleb128 0x1
 6522 114d 50       		.byte	0x50
 6523 114e 02       		.uleb128 0x2
 6524 114f 75       		.byte	0x75
 6525 1150 18       		.sleb128 24
 6526 1151 00       		.byte	0
 6527 1152 22       		.uleb128 0x22
 6528 1153 3C000000 		.4byte	.LVL192
 6529 1157 29200000 		.4byte	0x2029
 6530 115b 66110000 		.4byte	0x1166
 6531 115f 1E       		.uleb128 0x1e
 6532 1160 01       		.uleb128 0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 219


 6533 1161 50       		.byte	0x50
 6534 1162 02       		.uleb128 0x2
 6535 1163 76       		.byte	0x76
 6536 1164 00       		.sleb128 0
 6537 1165 00       		.byte	0
 6538 1166 22       		.uleb128 0x22
 6539 1167 60000000 		.4byte	.LVL193
 6540 116b 12200000 		.4byte	0x2012
 6541 116f 7A110000 		.4byte	0x117a
 6542 1173 1E       		.uleb128 0x1e
 6543 1174 01       		.uleb128 0x1
 6544 1175 51       		.byte	0x51
 6545 1176 02       		.uleb128 0x2
 6546 1177 76       		.byte	0x76
 6547 1178 00       		.sleb128 0
 6548 1179 00       		.byte	0
 6549 117a 1C       		.uleb128 0x1c
 6550 117b 84000000 		.4byte	.LVL196
 6551 117f FC040000 		.4byte	0x4fc
 6552 1183 1C       		.uleb128 0x1c
 6553 1184 CC000000 		.4byte	.LVL206
 6554 1188 1E200000 		.4byte	0x201e
 6555 118c 00       		.byte	0
 6556 118d 27       		.uleb128 0x27
 6557 118e B20D0000 		.4byte	.LASF144
 6558 1192 01       		.byte	0x1
 6559 1193 C504     		.2byte	0x4c5
 6560 1195 00000000 		.4byte	.LFB9
 6561 1199 6C000000 		.4byte	.LFE9-.LFB9
 6562 119d 01       		.uleb128 0x1
 6563 119e 9C       		.byte	0x9c
 6564 119f 2D120000 		.4byte	0x122d
 6565 11a3 19       		.uleb128 0x19
 6566 11a4 000C0000 		.4byte	.LASF145
 6567 11a8 01       		.byte	0x1
 6568 11a9 C504     		.2byte	0x4c5
 6569 11ab 33120000 		.4byte	0x1233
 6570 11af 44090000 		.4byte	.LLST63
 6571 11b3 19       		.uleb128 0x19
 6572 11b4 B60E0000 		.4byte	.LASF146
 6573 11b8 01       		.byte	0x1
 6574 11b9 C504     		.2byte	0x4c5
 6575 11bb C2080000 		.4byte	0x8c2
 6576 11bf 70090000 		.4byte	.LLST64
 6577 11c3 1A       		.uleb128 0x1a
 6578 11c4 E40E0000 		.4byte	.LASF107
 6579 11c8 01       		.byte	0x1
 6580 11c9 C704     		.2byte	0x4c7
 6581 11cb 1D010000 		.4byte	0x11d
 6582 11cf 9C090000 		.4byte	.LLST65
 6583 11d3 20       		.uleb128 0x20
 6584 11d4 250E0000 		.4byte	.LASF142
 6585 11d8 01       		.byte	0x1
 6586 11d9 C804     		.2byte	0x4c8
 6587 11db 07010000 		.4byte	0x107
 6588 11df 01       		.uleb128 0x1
 6589 11e0 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 220


 6590 11e1 1A       		.uleb128 0x1a
 6591 11e2 51070000 		.4byte	.LASF147
 6592 11e6 01       		.byte	0x1
 6593 11e7 C804     		.2byte	0x4c8
 6594 11e9 07010000 		.4byte	0x107
 6595 11ed AF090000 		.4byte	.LLST66
 6596 11f1 31       		.uleb128 0x31
 6597 11f2 20000000 		.4byte	.Ldebug_ranges0+0x20
 6598 11f6 1A120000 		.4byte	0x121a
 6599 11fa 1A       		.uleb128 0x1a
 6600 11fb F5050000 		.4byte	.LASF108
 6601 11ff 01       		.byte	0x1
 6602 1200 D204     		.2byte	0x4d2
 6603 1202 C2080000 		.4byte	0x8c2
 6604 1206 CE090000 		.4byte	.LLST67
 6605 120a 1D       		.uleb128 0x1d
 6606 120b 4A000000 		.4byte	.LVL215
 6607 120f 34080000 		.4byte	0x834
 6608 1213 1E       		.uleb128 0x1e
 6609 1214 01       		.uleb128 0x1
 6610 1215 51       		.byte	0x51
 6611 1216 01       		.uleb128 0x1
 6612 1217 30       		.byte	0x30
 6613 1218 00       		.byte	0
 6614 1219 00       		.byte	0
 6615 121a 1C       		.uleb128 0x1c
 6616 121b 0A000000 		.4byte	.LVL210
 6617 121f 4E0F0000 		.4byte	0xf4e
 6618 1223 1C       		.uleb128 0x1c
 6619 1224 4E000000 		.4byte	.LVL216
 6620 1228 D4100000 		.4byte	0x10d4
 6621 122c 00       		.byte	0
 6622 122d 06       		.uleb128 0x6
 6623 122e 04       		.byte	0x4
 6624 122f 1D010000 		.4byte	0x11d
 6625 1233 07       		.uleb128 0x7
 6626 1234 2D120000 		.4byte	0x122d
 6627 1238 27       		.uleb128 0x27
 6628 1239 67060000 		.4byte	.LASF148
 6629 123d 01       		.byte	0x1
 6630 123e 1905     		.2byte	0x519
 6631 1240 00000000 		.4byte	.LFB10
 6632 1244 34000000 		.4byte	.LFE10-.LFB10
 6633 1248 01       		.uleb128 0x1
 6634 1249 9C       		.byte	0x9c
 6635 124a 9A120000 		.4byte	0x129a
 6636 124e 19       		.uleb128 0x19
 6637 124f 39090000 		.4byte	.LASF149
 6638 1253 01       		.byte	0x1
 6639 1254 1905     		.2byte	0x519
 6640 1256 C2080000 		.4byte	0x8c2
 6641 125a E1090000 		.4byte	.LLST68
 6642 125e 1A       		.uleb128 0x1a
 6643 125f 250E0000 		.4byte	.LASF142
 6644 1263 01       		.byte	0x1
 6645 1264 1B05     		.2byte	0x51b
 6646 1266 07010000 		.4byte	0x107
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 221


 6647 126a 180A0000 		.4byte	.LLST69
 6648 126e 1C       		.uleb128 0x1c
 6649 126f 0A000000 		.4byte	.LVL220
 6650 1273 4E0F0000 		.4byte	0xf4e
 6651 1277 22       		.uleb128 0x22
 6652 1278 12000000 		.4byte	.LVL221
 6653 127c 34080000 		.4byte	0x834
 6654 1280 90120000 		.4byte	0x1290
 6655 1284 1E       		.uleb128 0x1e
 6656 1285 01       		.uleb128 0x1
 6657 1286 50       		.byte	0x50
 6658 1287 02       		.uleb128 0x2
 6659 1288 74       		.byte	0x74
 6660 1289 00       		.sleb128 0
 6661 128a 1E       		.uleb128 0x1e
 6662 128b 01       		.uleb128 0x1
 6663 128c 51       		.byte	0x51
 6664 128d 01       		.uleb128 0x1
 6665 128e 30       		.byte	0x30
 6666 128f 00       		.byte	0
 6667 1290 1C       		.uleb128 0x1c
 6668 1291 16000000 		.4byte	.LVL222
 6669 1295 D4100000 		.4byte	0x10d4
 6670 1299 00       		.byte	0
 6671 129a 27       		.uleb128 0x27
 6672 129b 880A0000 		.4byte	.LASF150
 6673 129f 01       		.byte	0x1
 6674 12a0 540B     		.2byte	0xb54
 6675 12a2 00000000 		.4byte	.LFB28
 6676 12a6 70000000 		.4byte	.LFE28-.LFB28
 6677 12aa 01       		.uleb128 0x1
 6678 12ab 9C       		.byte	0x9c
 6679 12ac 14130000 		.4byte	0x1314
 6680 12b0 23       		.uleb128 0x23
 6681 12b1 1C000000 		.4byte	.LBB48
 6682 12b5 4C000000 		.4byte	.LBE48-.LBB48
 6683 12b9 1A       		.uleb128 0x1a
 6684 12ba 950D0000 		.4byte	.LASF151
 6685 12be 01       		.byte	0x1
 6686 12bf 880B     		.2byte	0xb88
 6687 12c1 12010000 		.4byte	0x112
 6688 12c5 4E0A0000 		.4byte	.LLST70
 6689 12c9 29       		.uleb128 0x29
 6690 12ca 2F040000 		.4byte	0x42f
 6691 12ce 20000000 		.4byte	.LBB49
 6692 12d2 06000000 		.4byte	.LBE49-.LBB49
 6693 12d6 01       		.byte	0x1
 6694 12d7 880B     		.2byte	0xb88
 6695 12d9 F8120000 		.4byte	0x12f8
 6696 12dd 2C       		.uleb128 0x2c
 6697 12de 3F040000 		.4byte	0x43f
 6698 12e2 610A0000 		.4byte	.LLST71
 6699 12e6 23       		.uleb128 0x23
 6700 12e7 20000000 		.4byte	.LBB50
 6701 12eb 06000000 		.4byte	.LBE50-.LBB50
 6702 12ef 32       		.uleb128 0x32
 6703 12f0 4A040000 		.4byte	0x44a
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 222


 6704 12f4 01       		.uleb128 0x1
 6705 12f5 53       		.byte	0x53
 6706 12f6 00       		.byte	0
 6707 12f7 00       		.byte	0
 6708 12f8 23       		.uleb128 0x23
 6709 12f9 2A000000 		.4byte	.LBB51
 6710 12fd 3E000000 		.4byte	.LBE51-.LBB51
 6711 1301 1A       		.uleb128 0x1a
 6712 1302 6D000000 		.4byte	.LASF152
 6713 1306 01       		.byte	0x1
 6714 1307 880B     		.2byte	0xb88
 6715 1309 14130000 		.4byte	0x1314
 6716 130d 740A0000 		.4byte	.LLST72
 6717 1311 00       		.byte	0
 6718 1312 00       		.byte	0
 6719 1313 00       		.byte	0
 6720 1314 07       		.uleb128 0x7
 6721 1315 CE100000 		.4byte	0x10ce
 6722 1319 27       		.uleb128 0x27
 6723 131a 180E0000 		.4byte	.LASF153
 6724 131e 01       		.byte	0x1
 6725 131f 8406     		.2byte	0x684
 6726 1321 00000000 		.4byte	.LFB15
 6727 1325 C0000000 		.4byte	.LFE15-.LFB15
 6728 1329 01       		.uleb128 0x1
 6729 132a 9C       		.byte	0x9c
 6730 132b CB130000 		.4byte	0x13cb
 6731 132f 19       		.uleb128 0x19
 6732 1330 C00B0000 		.4byte	.LASF154
 6733 1334 01       		.byte	0x1
 6734 1335 8406     		.2byte	0x684
 6735 1337 11020000 		.4byte	0x211
 6736 133b 910A0000 		.4byte	.LLST73
 6737 133f 1A       		.uleb128 0x1a
 6738 1340 FF0E0000 		.4byte	.LASF84
 6739 1344 01       		.byte	0x1
 6740 1345 8606     		.2byte	0x686
 6741 1347 23050000 		.4byte	0x523
 6742 134b AF0A0000 		.4byte	.LLST74
 6743 134f 1C       		.uleb128 0x1c
 6744 1350 08000000 		.4byte	.LVL230
 6745 1354 07200000 		.4byte	0x2007
 6746 1358 22       		.uleb128 0x22
 6747 1359 18000000 		.4byte	.LVL232
 6748 135d 29200000 		.4byte	0x2029
 6749 1361 6C130000 		.4byte	0x136c
 6750 1365 1E       		.uleb128 0x1e
 6751 1366 01       		.uleb128 0x1
 6752 1367 50       		.byte	0x50
 6753 1368 02       		.uleb128 0x2
 6754 1369 75       		.byte	0x75
 6755 136a 00       		.sleb128 0
 6756 136b 00       		.byte	0
 6757 136c 22       		.uleb128 0x22
 6758 136d 48000000 		.4byte	.LVL233
 6759 1371 29200000 		.4byte	0x2029
 6760 1375 80130000 		.4byte	0x1380
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 223


 6761 1379 1E       		.uleb128 0x1e
 6762 137a 01       		.uleb128 0x1
 6763 137b 50       		.byte	0x50
 6764 137c 02       		.uleb128 0x2
 6765 137d 74       		.byte	0x74
 6766 137e 18       		.sleb128 24
 6767 137f 00       		.byte	0
 6768 1380 22       		.uleb128 0x22
 6769 1381 50000000 		.4byte	.LVL234
 6770 1385 12200000 		.4byte	0x2012
 6771 1389 9D130000 		.4byte	0x139d
 6772 138d 1E       		.uleb128 0x1e
 6773 138e 01       		.uleb128 0x1
 6774 138f 50       		.byte	0x50
 6775 1390 05       		.uleb128 0x5
 6776 1391 03       		.byte	0x3
 6777 1392 00000000 		.4byte	.LANCHOR0
 6778 1396 1E       		.uleb128 0x1e
 6779 1397 01       		.uleb128 0x1
 6780 1398 51       		.byte	0x51
 6781 1399 02       		.uleb128 0x2
 6782 139a 75       		.byte	0x75
 6783 139b 00       		.sleb128 0
 6784 139c 00       		.byte	0
 6785 139d 1C       		.uleb128 0x1c
 6786 139e 64000000 		.4byte	.LVL235
 6787 13a2 1E200000 		.4byte	0x201e
 6788 13a6 1C       		.uleb128 0x1c
 6789 13a7 70000000 		.4byte	.LVL236
 6790 13ab 07200000 		.4byte	0x2007
 6791 13af 1C       		.uleb128 0x1c
 6792 13b0 74000000 		.4byte	.LVL237
 6793 13b4 FC040000 		.4byte	0x4fc
 6794 13b8 1C       		.uleb128 0x1c
 6795 13b9 78000000 		.4byte	.LVL238
 6796 13bd 1E200000 		.4byte	0x201e
 6797 13c1 1C       		.uleb128 0x1c
 6798 13c2 B6000000 		.4byte	.LVL241
 6799 13c6 9A120000 		.4byte	0x129a
 6800 13ca 00       		.byte	0
 6801 13cb 27       		.uleb128 0x27
 6802 13cc 51060000 		.4byte	.LASF155
 6803 13d0 01       		.byte	0x1
 6804 13d1 9D0B     		.2byte	0xb9d
 6805 13d3 00000000 		.4byte	.LFB29
 6806 13d7 20000000 		.4byte	.LFE29-.LFB29
 6807 13db 01       		.uleb128 0x1
 6808 13dc 9C       		.byte	0x9c
 6809 13dd 2C140000 		.4byte	0x142c
 6810 13e1 19       		.uleb128 0x19
 6811 13e2 45010000 		.4byte	.LASF156
 6812 13e6 01       		.byte	0x1
 6813 13e7 9D0B     		.2byte	0xb9d
 6814 13e9 14130000 		.4byte	0x1314
 6815 13ed C20A0000 		.4byte	.LLST75
 6816 13f1 19       		.uleb128 0x19
 6817 13f2 ED0D0000 		.4byte	.LASF105
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 224


 6818 13f6 01       		.byte	0x1
 6819 13f7 9D0B     		.2byte	0xb9d
 6820 13f9 C2080000 		.4byte	0x8c2
 6821 13fd E30A0000 		.4byte	.LLST76
 6822 1401 22       		.uleb128 0x22
 6823 1402 10000000 		.4byte	.LVL245
 6824 1406 35200000 		.4byte	0x2035
 6825 140a 16140000 		.4byte	0x1416
 6826 140e 1E       		.uleb128 0x1e
 6827 140f 01       		.uleb128 0x1
 6828 1410 50       		.byte	0x50
 6829 1411 03       		.uleb128 0x3
 6830 1412 F3       		.byte	0xf3
 6831 1413 01       		.uleb128 0x1
 6832 1414 50       		.byte	0x50
 6833 1415 00       		.byte	0
 6834 1416 1D       		.uleb128 0x1d
 6835 1417 18000000 		.4byte	.LVL246
 6836 141b 34080000 		.4byte	0x834
 6837 141f 1E       		.uleb128 0x1e
 6838 1420 01       		.uleb128 0x1
 6839 1421 50       		.byte	0x50
 6840 1422 02       		.uleb128 0x2
 6841 1423 74       		.byte	0x74
 6842 1424 00       		.sleb128 0
 6843 1425 1E       		.uleb128 0x1e
 6844 1426 01       		.uleb128 0x1
 6845 1427 51       		.byte	0x51
 6846 1428 01       		.uleb128 0x1
 6847 1429 31       		.byte	0x31
 6848 142a 00       		.byte	0
 6849 142b 00       		.byte	0
 6850 142c 27       		.uleb128 0x27
 6851 142d 2E0D0000 		.4byte	.LASF157
 6852 1431 01       		.byte	0x1
 6853 1432 AE0B     		.2byte	0xbae
 6854 1434 00000000 		.4byte	.LFB30
 6855 1438 28000000 		.4byte	.LFE30-.LFB30
 6856 143c 01       		.uleb128 0x1
 6857 143d 9C       		.byte	0x9c
 6858 143e 9D140000 		.4byte	0x149d
 6859 1442 19       		.uleb128 0x19
 6860 1443 45010000 		.4byte	.LASF156
 6861 1447 01       		.byte	0x1
 6862 1448 AE0B     		.2byte	0xbae
 6863 144a CE100000 		.4byte	0x10ce
 6864 144e 0F0B0000 		.4byte	.LLST77
 6865 1452 19       		.uleb128 0x19
 6866 1453 0F0B0000 		.4byte	.LASF24
 6867 1457 01       		.byte	0x1
 6868 1458 AE0B     		.2byte	0xbae
 6869 145a C2080000 		.4byte	0x8c2
 6870 145e 300B0000 		.4byte	.LLST78
 6871 1462 19       		.uleb128 0x19
 6872 1463 ED0D0000 		.4byte	.LASF105
 6873 1467 01       		.byte	0x1
 6874 1468 AE0B     		.2byte	0xbae
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 225


 6875 146a C2080000 		.4byte	0x8c2
 6876 146e 510B0000 		.4byte	.LLST79
 6877 1472 22       		.uleb128 0x22
 6878 1473 1A000000 		.4byte	.LVL251
 6879 1477 12200000 		.4byte	0x2012
 6880 147b 87140000 		.4byte	0x1487
 6881 147f 1E       		.uleb128 0x1e
 6882 1480 01       		.uleb128 0x1
 6883 1481 50       		.byte	0x50
 6884 1482 03       		.uleb128 0x3
 6885 1483 F3       		.byte	0xf3
 6886 1484 01       		.uleb128 0x1
 6887 1485 50       		.byte	0x50
 6888 1486 00       		.byte	0
 6889 1487 1D       		.uleb128 0x1d
 6890 1488 22000000 		.4byte	.LVL252
 6891 148c 34080000 		.4byte	0x834
 6892 1490 1E       		.uleb128 0x1e
 6893 1491 01       		.uleb128 0x1
 6894 1492 50       		.byte	0x50
 6895 1493 02       		.uleb128 0x2
 6896 1494 74       		.byte	0x74
 6897 1495 00       		.sleb128 0
 6898 1496 1E       		.uleb128 0x1e
 6899 1497 01       		.uleb128 0x1
 6900 1498 51       		.byte	0x51
 6901 1499 01       		.uleb128 0x1
 6902 149a 31       		.byte	0x31
 6903 149b 00       		.byte	0
 6904 149c 00       		.byte	0
 6905 149d 27       		.uleb128 0x27
 6906 149e 84070000 		.4byte	.LASF158
 6907 14a2 01       		.byte	0x1
 6908 14a3 C80B     		.2byte	0xbc8
 6909 14a5 00000000 		.4byte	.LFB31
 6910 14a9 28000000 		.4byte	.LFE31-.LFB31
 6911 14ad 01       		.uleb128 0x1
 6912 14ae 9C       		.byte	0x9c
 6913 14af 0F150000 		.4byte	0x150f
 6914 14b3 19       		.uleb128 0x19
 6915 14b4 45010000 		.4byte	.LASF156
 6916 14b8 01       		.byte	0x1
 6917 14b9 C80B     		.2byte	0xbc8
 6918 14bb 14130000 		.4byte	0x1314
 6919 14bf 7D0B0000 		.4byte	.LLST80
 6920 14c3 19       		.uleb128 0x19
 6921 14c4 ED0D0000 		.4byte	.LASF105
 6922 14c8 01       		.byte	0x1
 6923 14c9 C80B     		.2byte	0xbc8
 6924 14cb 1D010000 		.4byte	0x11d
 6925 14cf 9E0B0000 		.4byte	.LLST81
 6926 14d3 19       		.uleb128 0x19
 6927 14d4 BB010000 		.4byte	.LASF159
 6928 14d8 01       		.byte	0x1
 6929 14d9 C80B     		.2byte	0xbc8
 6930 14db BD080000 		.4byte	0x8bd
 6931 14df BC0B0000 		.4byte	.LLST82
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 226


 6932 14e3 22       		.uleb128 0x22
 6933 14e4 12000000 		.4byte	.LVL256
 6934 14e8 12200000 		.4byte	0x2012
 6935 14ec F8140000 		.4byte	0x14f8
 6936 14f0 1E       		.uleb128 0x1e
 6937 14f1 01       		.uleb128 0x1
 6938 14f2 50       		.byte	0x50
 6939 14f3 03       		.uleb128 0x3
 6940 14f4 F3       		.byte	0xf3
 6941 14f5 01       		.uleb128 0x1
 6942 14f6 50       		.byte	0x50
 6943 14f7 00       		.byte	0
 6944 14f8 1D       		.uleb128 0x1d
 6945 14f9 20000000 		.4byte	.LVL258
 6946 14fd 34080000 		.4byte	0x834
 6947 1501 1E       		.uleb128 0x1e
 6948 1502 01       		.uleb128 0x1
 6949 1503 50       		.byte	0x50
 6950 1504 02       		.uleb128 0x2
 6951 1505 75       		.byte	0x75
 6952 1506 00       		.sleb128 0
 6953 1507 1E       		.uleb128 0x1e
 6954 1508 01       		.uleb128 0x1
 6955 1509 51       		.byte	0x51
 6956 150a 02       		.uleb128 0x2
 6957 150b 74       		.byte	0x74
 6958 150c 00       		.sleb128 0
 6959 150d 00       		.byte	0
 6960 150e 00       		.byte	0
 6961 150f 25       		.uleb128 0x25
 6962 1510 E8060000 		.4byte	.LASF160
 6963 1514 01       		.byte	0x1
 6964 1515 E70B     		.2byte	0xbe7
 6965 1517 07010000 		.4byte	0x107
 6966 151b 00000000 		.4byte	.LFB32
 6967 151f 74000000 		.4byte	.LFE32-.LFB32
 6968 1523 01       		.uleb128 0x1
 6969 1524 9C       		.byte	0x9c
 6970 1525 AF150000 		.4byte	0x15af
 6971 1529 19       		.uleb128 0x19
 6972 152a 45010000 		.4byte	.LASF156
 6973 152e 01       		.byte	0x1
 6974 152f E70B     		.2byte	0xbe7
 6975 1531 AF150000 		.4byte	0x15af
 6976 1535 E80B0000 		.4byte	.LLST83
 6977 1539 1A       		.uleb128 0x1a
 6978 153a 74030000 		.4byte	.LASF161
 6979 153e 01       		.byte	0x1
 6980 153f E90B     		.2byte	0xbe9
 6981 1541 23050000 		.4byte	0x523
 6982 1545 090C0000 		.4byte	.LLST84
 6983 1549 1A       		.uleb128 0x1a
 6984 154a 3B0C0000 		.4byte	.LASF83
 6985 154e 01       		.byte	0x1
 6986 154f EA0B     		.2byte	0xbea
 6987 1551 07010000 		.4byte	0x107
 6988 1555 1C0C0000 		.4byte	.LLST85
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 227


 6989 1559 22       		.uleb128 0x22
 6990 155a 10000000 		.4byte	.LVL263
 6991 155e 29200000 		.4byte	0x2029
 6992 1562 6D150000 		.4byte	0x156d
 6993 1566 1E       		.uleb128 0x1e
 6994 1567 01       		.uleb128 0x1
 6995 1568 50       		.byte	0x50
 6996 1569 02       		.uleb128 0x2
 6997 156a 75       		.byte	0x75
 6998 156b 00       		.sleb128 0
 6999 156c 00       		.byte	0
 7000 156d 22       		.uleb128 0x22
 7001 156e 20000000 		.4byte	.LVL264
 7002 1572 29200000 		.4byte	0x2029
 7003 1576 81150000 		.4byte	0x1581
 7004 157a 1E       		.uleb128 0x1e
 7005 157b 01       		.uleb128 0x1
 7006 157c 50       		.byte	0x50
 7007 157d 02       		.uleb128 0x2
 7008 157e 75       		.byte	0x75
 7009 157f 00       		.sleb128 0
 7010 1580 00       		.byte	0
 7011 1581 22       		.uleb128 0x22
 7012 1582 44000000 		.4byte	.LVL265
 7013 1586 12200000 		.4byte	0x2012
 7014 158a 95150000 		.4byte	0x1595
 7015 158e 1E       		.uleb128 0x1e
 7016 158f 01       		.uleb128 0x1
 7017 1590 51       		.byte	0x51
 7018 1591 02       		.uleb128 0x2
 7019 1592 75       		.byte	0x75
 7020 1593 00       		.sleb128 0
 7021 1594 00       		.byte	0
 7022 1595 1D       		.uleb128 0x1d
 7023 1596 4E000000 		.4byte	.LVL266
 7024 159a 12200000 		.4byte	0x2012
 7025 159e 1E       		.uleb128 0x1e
 7026 159f 01       		.uleb128 0x1
 7027 15a0 50       		.byte	0x50
 7028 15a1 05       		.uleb128 0x5
 7029 15a2 03       		.byte	0x3
 7030 15a3 14000000 		.4byte	.LANCHOR0+20
 7031 15a7 1E       		.uleb128 0x1e
 7032 15a8 01       		.uleb128 0x1
 7033 15a9 51       		.byte	0x51
 7034 15aa 02       		.uleb128 0x2
 7035 15ab 75       		.byte	0x75
 7036 15ac 00       		.sleb128 0
 7037 15ad 00       		.byte	0
 7038 15ae 00       		.byte	0
 7039 15af 07       		.uleb128 0x7
 7040 15b0 440B0000 		.4byte	0xb44
 7041 15b4 27       		.uleb128 0x27
 7042 15b5 A0060000 		.4byte	.LASF162
 7043 15b9 01       		.byte	0x1
 7044 15ba 2B0C     		.2byte	0xc2b
 7045 15bc 00000000 		.4byte	.LFB33
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 228


 7046 15c0 54000000 		.4byte	.LFE33-.LFB33
 7047 15c4 01       		.uleb128 0x1
 7048 15c5 9C       		.byte	0x9c
 7049 15c6 34160000 		.4byte	0x1634
 7050 15ca 19       		.uleb128 0x19
 7051 15cb 4A0F0000 		.4byte	.LASF163
 7052 15cf 01       		.byte	0x1
 7053 15d0 2B0C     		.2byte	0xc2b
 7054 15d2 00020000 		.4byte	0x200
 7055 15d6 3B0C0000 		.4byte	.LLST86
 7056 15da 19       		.uleb128 0x19
 7057 15db 0F0B0000 		.4byte	.LASF24
 7058 15df 01       		.byte	0x1
 7059 15e0 2B0C     		.2byte	0xc2b
 7060 15e2 C2080000 		.4byte	0x8c2
 7061 15e6 5C0C0000 		.4byte	.LLST87
 7062 15ea 1A       		.uleb128 0x1a
 7063 15eb 74030000 		.4byte	.LASF161
 7064 15ef 01       		.byte	0x1
 7065 15f0 2D0C     		.2byte	0xc2d
 7066 15f2 23050000 		.4byte	0x523
 7067 15f6 7D0C0000 		.4byte	.LLST88
 7068 15fa 22       		.uleb128 0x22
 7069 15fb 0E000000 		.4byte	.LVL274
 7070 15ff 29200000 		.4byte	0x2029
 7071 1603 0F160000 		.4byte	0x160f
 7072 1607 1E       		.uleb128 0x1e
 7073 1608 01       		.uleb128 0x1
 7074 1609 50       		.byte	0x50
 7075 160a 03       		.uleb128 0x3
 7076 160b F3       		.byte	0xf3
 7077 160c 01       		.uleb128 0x1
 7078 160d 50       		.byte	0x50
 7079 160e 00       		.byte	0
 7080 160f 22       		.uleb128 0x22
 7081 1610 16000000 		.4byte	.LVL275
 7082 1614 29200000 		.4byte	0x2029
 7083 1618 23160000 		.4byte	0x1623
 7084 161c 1E       		.uleb128 0x1e
 7085 161d 01       		.uleb128 0x1
 7086 161e 50       		.byte	0x50
 7087 161f 02       		.uleb128 0x2
 7088 1620 76       		.byte	0x76
 7089 1621 00       		.sleb128 0
 7090 1622 00       		.byte	0
 7091 1623 1D       		.uleb128 0x1d
 7092 1624 3C000000 		.4byte	.LVL276
 7093 1628 12200000 		.4byte	0x2012
 7094 162c 1E       		.uleb128 0x1e
 7095 162d 01       		.uleb128 0x1
 7096 162e 51       		.byte	0x51
 7097 162f 02       		.uleb128 0x2
 7098 1630 76       		.byte	0x76
 7099 1631 00       		.sleb128 0
 7100 1632 00       		.byte	0
 7101 1633 00       		.byte	0
 7102 1634 27       		.uleb128 0x27
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 229


 7103 1635 3E040000 		.4byte	.LASF164
 7104 1639 01       		.byte	0x1
 7105 163a 4D0C     		.2byte	0xc4d
 7106 163c 00000000 		.4byte	.LFB34
 7107 1640 20000000 		.4byte	.LFE34-.LFB34
 7108 1644 01       		.uleb128 0x1
 7109 1645 9C       		.byte	0x9c
 7110 1646 6D160000 		.4byte	0x166d
 7111 164a 19       		.uleb128 0x19
 7112 164b 2F090000 		.4byte	.LASF165
 7113 164f 01       		.byte	0x1
 7114 1650 4D0C     		.2byte	0xc4d
 7115 1652 73160000 		.4byte	0x1673
 7116 1656 900C0000 		.4byte	.LLST89
 7117 165a 1C       		.uleb128 0x1c
 7118 165b 08000000 		.4byte	.LVL279
 7119 165f 07200000 		.4byte	0x2007
 7120 1663 1C       		.uleb128 0x1c
 7121 1664 1A000000 		.4byte	.LVL280
 7122 1668 1E200000 		.4byte	0x201e
 7123 166c 00       		.byte	0
 7124 166d 06       		.uleb128 0x6
 7125 166e 04       		.byte	0x4
 7126 166f 49030000 		.4byte	0x349
 7127 1673 07       		.uleb128 0x7
 7128 1674 6D160000 		.4byte	0x166d
 7129 1678 27       		.uleb128 0x27
 7130 1679 72090000 		.4byte	.LASF166
 7131 167d 01       		.byte	0x1
 7132 167e 590C     		.2byte	0xc59
 7133 1680 00000000 		.4byte	.LFB35
 7134 1684 14000000 		.4byte	.LFE35-.LFB35
 7135 1688 01       		.uleb128 0x1
 7136 1689 9C       		.byte	0x9c
 7137 168a 9D160000 		.4byte	0x169d
 7138 168e 1F       		.uleb128 0x1f
 7139 168f 2F090000 		.4byte	.LASF165
 7140 1693 01       		.byte	0x1
 7141 1694 590C     		.2byte	0xc59
 7142 1696 73160000 		.4byte	0x1673
 7143 169a 01       		.uleb128 0x1
 7144 169b 50       		.byte	0x50
 7145 169c 00       		.byte	0
 7146 169d 25       		.uleb128 0x25
 7147 169e CF0B0000 		.4byte	.LASF167
 7148 16a2 01       		.byte	0x1
 7149 16a3 610C     		.2byte	0xc61
 7150 16a5 07010000 		.4byte	0x107
 7151 16a9 00000000 		.4byte	.LFB36
 7152 16ad 58000000 		.4byte	.LFE36-.LFB36
 7153 16b1 01       		.uleb128 0x1
 7154 16b2 9C       		.byte	0x9c
 7155 16b3 38170000 		.4byte	0x1738
 7156 16b7 19       		.uleb128 0x19
 7157 16b8 2F090000 		.4byte	.LASF165
 7158 16bc 01       		.byte	0x1
 7159 16bd 610C     		.2byte	0xc61
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 230


 7160 16bf 73160000 		.4byte	0x1673
 7161 16c3 BC0C0000 		.4byte	.LLST90
 7162 16c7 19       		.uleb128 0x19
 7163 16c8 7E0D0000 		.4byte	.LASF168
 7164 16cc 01       		.byte	0x1
 7165 16cd 610C     		.2byte	0xc61
 7166 16cf 33120000 		.4byte	0x1233
 7167 16d3 330D0000 		.4byte	.LLST91
 7168 16d7 1A       		.uleb128 0x1a
 7169 16d8 3B0C0000 		.4byte	.LASF83
 7170 16dc 01       		.byte	0x1
 7171 16dd 630C     		.2byte	0xc63
 7172 16df 07010000 		.4byte	0x107
 7173 16e3 5F0D0000 		.4byte	.LLST92
 7174 16e7 26       		.uleb128 0x26
 7175 16e8 0A000000 		.4byte	.LBB52
 7176 16ec 42000000 		.4byte	.LBE52-.LBB52
 7177 16f0 25170000 		.4byte	0x1725
 7178 16f4 1A       		.uleb128 0x1a
 7179 16f5 F5050000 		.4byte	.LASF108
 7180 16f9 01       		.byte	0x1
 7181 16fa 6B0C     		.2byte	0xc6b
 7182 16fc C2080000 		.4byte	0x8c2
 7183 1700 950D0000 		.4byte	.LLST93
 7184 1704 1A       		.uleb128 0x1a
 7185 1705 A2030000 		.4byte	.LASF169
 7186 1709 01       		.byte	0x1
 7187 170a 6C0C     		.2byte	0xc6c
 7188 170c C2080000 		.4byte	0x8c2
 7189 1710 B30D0000 		.4byte	.LLST94
 7190 1714 1D       		.uleb128 0x1d
 7191 1715 3A000000 		.4byte	.LVL288
 7192 1719 78160000 		.4byte	0x1678
 7193 171d 1E       		.uleb128 0x1e
 7194 171e 01       		.uleb128 0x1
 7195 171f 50       		.byte	0x50
 7196 1720 02       		.uleb128 0x2
 7197 1721 74       		.byte	0x74
 7198 1722 00       		.sleb128 0
 7199 1723 00       		.byte	0
 7200 1724 00       		.byte	0
 7201 1725 1C       		.uleb128 0x1c
 7202 1726 0A000000 		.4byte	.LVL284
 7203 172a 07200000 		.4byte	0x2007
 7204 172e 1C       		.uleb128 0x1c
 7205 172f 50000000 		.4byte	.LVL297
 7206 1733 1E200000 		.4byte	0x201e
 7207 1737 00       		.byte	0
 7208 1738 2D       		.uleb128 0x2d
 7209 1739 4C0C0000 		.4byte	.LASF171
 7210 173d 01       		.byte	0x1
 7211 173e A00C     		.2byte	0xca0
 7212 1740 00000000 		.4byte	.LFB37
 7213 1744 10000000 		.4byte	.LFE37-.LFB37
 7214 1748 01       		.uleb128 0x1
 7215 1749 9C       		.byte	0x9c
 7216 174a 25       		.uleb128 0x25
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 231


 7217 174b CB040000 		.4byte	.LASF172
 7218 174f 01       		.byte	0x1
 7219 1750 7F0E     		.2byte	0xe7f
 7220 1752 12010000 		.4byte	0x112
 7221 1756 00000000 		.4byte	.LFB42
 7222 175a 18000000 		.4byte	.LFE42-.LFB42
 7223 175e 01       		.uleb128 0x1
 7224 175f 9C       		.byte	0x9c
 7225 1760 AC170000 		.4byte	0x17ac
 7226 1764 19       		.uleb128 0x19
 7227 1765 230A0000 		.4byte	.LASF87
 7228 1769 01       		.byte	0x1
 7229 176a 7F0E     		.2byte	0xe7f
 7230 176c 11020000 		.4byte	0x211
 7231 1770 E10D0000 		.4byte	.LLST95
 7232 1774 1A       		.uleb128 0x1a
 7233 1775 FF0E0000 		.4byte	.LASF84
 7234 1779 01       		.byte	0x1
 7235 177a 810E     		.2byte	0xe81
 7236 177c 23050000 		.4byte	0x523
 7237 1780 F40D0000 		.4byte	.LLST96
 7238 1784 1A       		.uleb128 0x1a
 7239 1785 A40C0000 		.4byte	.LASF173
 7240 1789 01       		.byte	0x1
 7241 178a 820E     		.2byte	0xe82
 7242 178c 28010000 		.4byte	0x128
 7243 1790 070E0000 		.4byte	.LLST97
 7244 1794 20       		.uleb128 0x20
 7245 1795 C1020000 		.4byte	.LASF118
 7246 1799 01       		.byte	0x1
 7247 179a 830E     		.2byte	0xe83
 7248 179c 12010000 		.4byte	0x112
 7249 17a0 01       		.uleb128 0x1
 7250 17a1 50       		.byte	0x50
 7251 17a2 1C       		.uleb128 0x1c
 7252 17a3 12000000 		.4byte	.LVL301
 7253 17a7 B6040000 		.4byte	0x4b6
 7254 17ab 00       		.byte	0
 7255 17ac 25       		.uleb128 0x25
 7256 17ad 350E0000 		.4byte	.LASF174
 7257 17b1 01       		.byte	0x1
 7258 17b2 EB0E     		.2byte	0xeeb
 7259 17b4 11020000 		.4byte	0x211
 7260 17b8 00000000 		.4byte	.LFB45
 7261 17bc 0C000000 		.4byte	.LFE45-.LFB45
 7262 17c0 01       		.uleb128 0x1
 7263 17c1 9C       		.byte	0x9c
 7264 17c2 D5170000 		.4byte	0x17d5
 7265 17c6 20       		.uleb128 0x20
 7266 17c7 3B0C0000 		.4byte	.LASF83
 7267 17cb 01       		.byte	0x1
 7268 17cc ED0E     		.2byte	0xeed
 7269 17ce 11020000 		.4byte	0x211
 7270 17d2 01       		.uleb128 0x1
 7271 17d3 50       		.byte	0x50
 7272 17d4 00       		.byte	0
 7273 17d5 25       		.uleb128 0x25
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 232


 7274 17d6 DC000000 		.4byte	.LASF175
 7275 17da 01       		.byte	0x1
 7276 17db FC0E     		.2byte	0xefc
 7277 17dd 07010000 		.4byte	0x107
 7278 17e1 00000000 		.4byte	.LFB46
 7279 17e5 20000000 		.4byte	.LFE46-.LFB46
 7280 17e9 01       		.uleb128 0x1
 7281 17ea 9C       		.byte	0x9c
 7282 17eb FE170000 		.4byte	0x17fe
 7283 17ef 20       		.uleb128 0x20
 7284 17f0 3B0C0000 		.4byte	.LASF83
 7285 17f4 01       		.byte	0x1
 7286 17f5 FE0E     		.2byte	0xefe
 7287 17f7 07010000 		.4byte	0x107
 7288 17fb 01       		.uleb128 0x1
 7289 17fc 50       		.byte	0x50
 7290 17fd 00       		.byte	0
 7291 17fe 25       		.uleb128 0x25
 7292 17ff 8F0C0000 		.4byte	.LASF176
 7293 1803 01       		.byte	0x1
 7294 1804 180F     		.2byte	0xf18
 7295 1806 07010000 		.4byte	0x107
 7296 180a 00000000 		.4byte	.LFB47
 7297 180e C8000000 		.4byte	.LFE47-.LFB47
 7298 1812 01       		.uleb128 0x1
 7299 1813 9C       		.byte	0x9c
 7300 1814 6D180000 		.4byte	0x186d
 7301 1818 19       		.uleb128 0x19
 7302 1819 940B0000 		.4byte	.LASF177
 7303 181d 01       		.byte	0x1
 7304 181e 180F     		.2byte	0xf18
 7305 1820 A1040000 		.4byte	0x4a1
 7306 1824 1B0E0000 		.4byte	.LLST98
 7307 1828 1A       		.uleb128 0x1a
 7308 1829 B20C0000 		.4byte	.LASF178
 7309 182d 01       		.byte	0x1
 7310 182e 1A0F     		.2byte	0xf1a
 7311 1830 7A0D0000 		.4byte	0xd7a
 7312 1834 A70E0000 		.4byte	.LLST99
 7313 1838 1A       		.uleb128 0x1a
 7314 1839 3B0C0000 		.4byte	.LASF83
 7315 183d 01       		.byte	0x1
 7316 183e 1B0F     		.2byte	0xf1b
 7317 1840 07010000 		.4byte	0x107
 7318 1844 330F0000 		.4byte	.LLST100
 7319 1848 22       		.uleb128 0x22
 7320 1849 44000000 		.4byte	.LVL306
 7321 184d 29200000 		.4byte	0x2029
 7322 1851 5C180000 		.4byte	0x185c
 7323 1855 1E       		.uleb128 0x1e
 7324 1856 01       		.uleb128 0x1
 7325 1857 50       		.byte	0x50
 7326 1858 02       		.uleb128 0x2
 7327 1859 75       		.byte	0x75
 7328 185a 00       		.sleb128 0
 7329 185b 00       		.byte	0
 7330 185c 1D       		.uleb128 0x1d
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 233


 7331 185d 92000000 		.4byte	.LVL308
 7332 1861 12200000 		.4byte	0x2012
 7333 1865 1E       		.uleb128 0x1e
 7334 1866 01       		.uleb128 0x1
 7335 1867 51       		.byte	0x51
 7336 1868 02       		.uleb128 0x2
 7337 1869 75       		.byte	0x75
 7338 186a 00       		.sleb128 0
 7339 186b 00       		.byte	0
 7340 186c 00       		.byte	0
 7341 186d 25       		.uleb128 0x25
 7342 186e D0060000 		.4byte	.LASF179
 7343 1872 01       		.byte	0x1
 7344 1873 6F0F     		.2byte	0xf6f
 7345 1875 07010000 		.4byte	0x107
 7346 1879 00000000 		.4byte	.LFB48
 7347 187d 88000000 		.4byte	.LFE48-.LFB48
 7348 1881 01       		.uleb128 0x1
 7349 1882 9C       		.byte	0x9c
 7350 1883 DC180000 		.4byte	0x18dc
 7351 1887 19       		.uleb128 0x19
 7352 1888 940B0000 		.4byte	.LASF177
 7353 188c 01       		.byte	0x1
 7354 188d 6F0F     		.2byte	0xf6f
 7355 188f A1040000 		.4byte	0x4a1
 7356 1893 690F0000 		.4byte	.LLST101
 7357 1897 1A       		.uleb128 0x1a
 7358 1898 FF0E0000 		.4byte	.LASF84
 7359 189c 01       		.byte	0x1
 7360 189d 710F     		.2byte	0xf71
 7361 189f 7A0D0000 		.4byte	0xd7a
 7362 18a3 D10F0000 		.4byte	.LLST102
 7363 18a7 1A       		.uleb128 0x1a
 7364 18a8 3B0C0000 		.4byte	.LASF83
 7365 18ac 01       		.byte	0x1
 7366 18ad 720F     		.2byte	0xf72
 7367 18af 07010000 		.4byte	0x107
 7368 18b3 39100000 		.4byte	.LLST103
 7369 18b7 22       		.uleb128 0x22
 7370 18b8 22000000 		.4byte	.LVL318
 7371 18bc 29200000 		.4byte	0x2029
 7372 18c0 CB180000 		.4byte	0x18cb
 7373 18c4 1E       		.uleb128 0x1e
 7374 18c5 01       		.uleb128 0x1
 7375 18c6 50       		.byte	0x50
 7376 18c7 02       		.uleb128 0x2
 7377 18c8 75       		.byte	0x75
 7378 18c9 00       		.sleb128 0
 7379 18ca 00       		.byte	0
 7380 18cb 1D       		.uleb128 0x1d
 7381 18cc 72000000 		.4byte	.LVL320
 7382 18d0 12200000 		.4byte	0x2012
 7383 18d4 1E       		.uleb128 0x1e
 7384 18d5 01       		.uleb128 0x1
 7385 18d6 51       		.byte	0x51
 7386 18d7 02       		.uleb128 0x2
 7387 18d8 75       		.byte	0x75
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 234


 7388 18d9 00       		.sleb128 0
 7389 18da 00       		.byte	0
 7390 18db 00       		.byte	0
 7391 18dc 27       		.uleb128 0x27
 7392 18dd 77040000 		.4byte	.LASF180
 7393 18e1 01       		.byte	0x1
 7394 18e2 BF0F     		.2byte	0xfbf
 7395 18e4 00000000 		.4byte	.LFB49
 7396 18e8 98000000 		.4byte	.LFE49-.LFB49
 7397 18ec 01       		.uleb128 0x1
 7398 18ed 9C       		.byte	0x9c
 7399 18ee 74190000 		.4byte	0x1974
 7400 18f2 19       		.uleb128 0x19
 7401 18f3 940B0000 		.4byte	.LASF177
 7402 18f7 01       		.byte	0x1
 7403 18f8 BF0F     		.2byte	0xfbf
 7404 18fa A1040000 		.4byte	0x4a1
 7405 18fe 87100000 		.4byte	.LLST104
 7406 1902 19       		.uleb128 0x19
 7407 1903 C70A0000 		.4byte	.LASF181
 7408 1907 01       		.byte	0x1
 7409 1908 BF0F     		.2byte	0xfbf
 7410 190a 12010000 		.4byte	0x112
 7411 190e C9100000 		.4byte	.LLST105
 7412 1912 1A       		.uleb128 0x1a
 7413 1913 FF0E0000 		.4byte	.LASF84
 7414 1917 01       		.byte	0x1
 7415 1918 C10F     		.2byte	0xfc1
 7416 191a 7A0D0000 		.4byte	0xd7a
 7417 191e F5100000 		.4byte	.LLST106
 7418 1922 1A       		.uleb128 0x1a
 7419 1923 D10D0000 		.4byte	.LASF125
 7420 1927 01       		.byte	0x1
 7421 1928 C20F     		.2byte	0xfc2
 7422 192a 12010000 		.4byte	0x112
 7423 192e 37110000 		.4byte	.LLST107
 7424 1932 1A       		.uleb128 0x1a
 7425 1933 780A0000 		.4byte	.LASF182
 7426 1937 01       		.byte	0x1
 7427 1938 C20F     		.2byte	0xfc2
 7428 193a 12010000 		.4byte	0x112
 7429 193e 4A110000 		.4byte	.LLST108
 7430 1942 2E       		.uleb128 0x2e
 7431 1943 B8050000 		.4byte	.LASF183
 7432 1947 01       		.byte	0x1
 7433 1948 C30F     		.2byte	0xfc3
 7434 194a 74190000 		.4byte	0x1974
 7435 194e 01       		.byte	0x1
 7436 194f 22       		.uleb128 0x22
 7437 1950 44000000 		.4byte	.LVL334
 7438 1954 29200000 		.4byte	0x2029
 7439 1958 63190000 		.4byte	0x1963
 7440 195c 1E       		.uleb128 0x1e
 7441 195d 01       		.uleb128 0x1
 7442 195e 50       		.byte	0x50
 7443 195f 02       		.uleb128 0x2
 7444 1960 75       		.byte	0x75
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 235


 7445 1961 00       		.sleb128 0
 7446 1962 00       		.byte	0
 7447 1963 1D       		.uleb128 0x1d
 7448 1964 8C000000 		.4byte	.LVL335
 7449 1968 12200000 		.4byte	0x2012
 7450 196c 1E       		.uleb128 0x1e
 7451 196d 01       		.uleb128 0x1
 7452 196e 51       		.byte	0x51
 7453 196f 02       		.uleb128 0x2
 7454 1970 75       		.byte	0x75
 7455 1971 00       		.sleb128 0
 7456 1972 00       		.byte	0
 7457 1973 00       		.byte	0
 7458 1974 07       		.uleb128 0x7
 7459 1975 12010000 		.4byte	0x112
 7460 1979 25       		.uleb128 0x25
 7461 197a C0090000 		.4byte	.LASF184
 7462 197e 01       		.byte	0x1
 7463 197f 5E11     		.2byte	0x115e
 7464 1981 1D010000 		.4byte	0x11d
 7465 1985 00000000 		.4byte	.LFB50
 7466 1989 20000000 		.4byte	.LFE50-.LFB50
 7467 198d 01       		.uleb128 0x1
 7468 198e 9C       		.byte	0x9c
 7469 198f A2190000 		.4byte	0x19a2
 7470 1993 20       		.uleb128 0x20
 7471 1994 C1020000 		.4byte	.LASF118
 7472 1998 01       		.byte	0x1
 7473 1999 6011     		.2byte	0x1160
 7474 199b 1D010000 		.4byte	0x11d
 7475 199f 01       		.uleb128 0x1
 7476 19a0 50       		.byte	0x50
 7477 19a1 00       		.byte	0
 7478 19a2 2F       		.uleb128 0x2f
 7479 19a3 72060000 		.4byte	.LASF186
 7480 19a7 01       		.byte	0x1
 7481 19a8 6E11     		.2byte	0x116e
 7482 19aa 11020000 		.4byte	0x211
 7483 19ae 00000000 		.4byte	.LFB51
 7484 19b2 20000000 		.4byte	.LFE51-.LFB51
 7485 19b6 01       		.uleb128 0x1
 7486 19b7 9C       		.byte	0x9c
 7487 19b8 25       		.uleb128 0x25
 7488 19b9 73070000 		.4byte	.LASF187
 7489 19bd 01       		.byte	0x1
 7490 19be 7F11     		.2byte	0x117f
 7491 19c0 D5000000 		.4byte	0xd5
 7492 19c4 00000000 		.4byte	.LFB52
 7493 19c8 80000000 		.4byte	.LFE52-.LFB52
 7494 19cc 01       		.uleb128 0x1
 7495 19cd 9C       		.byte	0x9c
 7496 19ce 401A0000 		.4byte	0x1a40
 7497 19d2 19       		.uleb128 0x19
 7498 19d3 90030000 		.4byte	.LASF188
 7499 19d7 01       		.byte	0x1
 7500 19d8 7F11     		.2byte	0x117f
 7501 19da 07010000 		.4byte	0x107
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 236


 7502 19de 69110000 		.4byte	.LLST109
 7503 19e2 19       		.uleb128 0x19
 7504 19e3 ED0D0000 		.4byte	.LASF105
 7505 19e7 01       		.byte	0x1
 7506 19e8 7F11     		.2byte	0x117f
 7507 19ea 1D010000 		.4byte	0x11d
 7508 19ee 95110000 		.4byte	.LLST110
 7509 19f2 1A       		.uleb128 0x1a
 7510 19f3 880F0000 		.4byte	.LASF189
 7511 19f7 01       		.byte	0x1
 7512 19f8 8111     		.2byte	0x1181
 7513 19fa D5000000 		.4byte	0xd5
 7514 19fe C1110000 		.4byte	.LLST111
 7515 1a02 1C       		.uleb128 0x1c
 7516 1a03 0A000000 		.4byte	.LVL339
 7517 1a07 07200000 		.4byte	0x2007
 7518 1a0b 22       		.uleb128 0x22
 7519 1a0c 2A000000 		.4byte	.LVL340
 7520 1a10 34080000 		.4byte	0x834
 7521 1a14 241A0000 		.4byte	0x1a24
 7522 1a18 1E       		.uleb128 0x1e
 7523 1a19 01       		.uleb128 0x1
 7524 1a1a 50       		.byte	0x50
 7525 1a1b 02       		.uleb128 0x2
 7526 1a1c 74       		.byte	0x74
 7527 1a1d 00       		.sleb128 0
 7528 1a1e 1E       		.uleb128 0x1e
 7529 1a1f 01       		.uleb128 0x1
 7530 1a20 51       		.byte	0x51
 7531 1a21 01       		.uleb128 0x1
 7532 1a22 31       		.byte	0x31
 7533 1a23 00       		.byte	0
 7534 1a24 1C       		.uleb128 0x1c
 7535 1a25 3E000000 		.4byte	.LVL341
 7536 1a29 1E200000 		.4byte	0x201e
 7537 1a2d 1C       		.uleb128 0x1c
 7538 1a2e 42000000 		.4byte	.LVL342
 7539 1a32 07200000 		.4byte	0x2007
 7540 1a36 1C       		.uleb128 0x1c
 7541 1a37 74000000 		.4byte	.LVL344
 7542 1a3b 1E200000 		.4byte	0x201e
 7543 1a3f 00       		.byte	0
 7544 1a40 25       		.uleb128 0x25
 7545 1a41 B3070000 		.4byte	.LASF190
 7546 1a45 01       		.byte	0x1
 7547 1a46 C311     		.2byte	0x11c3
 7548 1a48 07010000 		.4byte	0x107
 7549 1a4c 00000000 		.4byte	.LFB53
 7550 1a50 A4000000 		.4byte	.LFE53-.LFB53
 7551 1a54 01       		.uleb128 0x1
 7552 1a55 9C       		.byte	0x9c
 7553 1a56 E81A0000 		.4byte	0x1ae8
 7554 1a5a 19       		.uleb128 0x19
 7555 1a5b 0C040000 		.4byte	.LASF191
 7556 1a5f 01       		.byte	0x1
 7557 1a60 C311     		.2byte	0x11c3
 7558 1a62 D5000000 		.4byte	0xd5
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 237


 7559 1a66 DF110000 		.4byte	.LLST112
 7560 1a6a 19       		.uleb128 0x19
 7561 1a6b B3000000 		.4byte	.LASF192
 7562 1a6f 01       		.byte	0x1
 7563 1a70 C311     		.2byte	0x11c3
 7564 1a72 D5000000 		.4byte	0xd5
 7565 1a76 0B120000 		.4byte	.LLST113
 7566 1a7a 19       		.uleb128 0x19
 7567 1a7b 260C0000 		.4byte	.LASF193
 7568 1a7f 01       		.byte	0x1
 7569 1a80 C311     		.2byte	0x11c3
 7570 1a82 E81A0000 		.4byte	0x1ae8
 7571 1a86 50120000 		.4byte	.LLST114
 7572 1a8a 19       		.uleb128 0x19
 7573 1a8b ED0D0000 		.4byte	.LASF105
 7574 1a8f 01       		.byte	0x1
 7575 1a90 C311     		.2byte	0x11c3
 7576 1a92 1D010000 		.4byte	0x11d
 7577 1a96 95120000 		.4byte	.LLST115
 7578 1a9a 1A       		.uleb128 0x1a
 7579 1a9b 3B0C0000 		.4byte	.LASF83
 7580 1a9f 01       		.byte	0x1
 7581 1aa0 C511     		.2byte	0x11c5
 7582 1aa2 07010000 		.4byte	0x107
 7583 1aa6 C1120000 		.4byte	.LLST116
 7584 1aaa 1C       		.uleb128 0x1c
 7585 1aab 0E000000 		.4byte	.LVL347
 7586 1aaf 07200000 		.4byte	0x2007
 7587 1ab3 22       		.uleb128 0x22
 7588 1ab4 40000000 		.4byte	.LVL348
 7589 1ab8 34080000 		.4byte	0x834
 7590 1abc CC1A0000 		.4byte	0x1acc
 7591 1ac0 1E       		.uleb128 0x1e
 7592 1ac1 01       		.uleb128 0x1
 7593 1ac2 50       		.byte	0x50
 7594 1ac3 02       		.uleb128 0x2
 7595 1ac4 76       		.byte	0x76
 7596 1ac5 00       		.sleb128 0
 7597 1ac6 1E       		.uleb128 0x1e
 7598 1ac7 01       		.uleb128 0x1
 7599 1ac8 51       		.byte	0x51
 7600 1ac9 01       		.uleb128 0x1
 7601 1aca 31       		.byte	0x31
 7602 1acb 00       		.byte	0
 7603 1acc 1C       		.uleb128 0x1c
 7604 1acd 54000000 		.4byte	.LVL349
 7605 1ad1 1E200000 		.4byte	0x201e
 7606 1ad5 1C       		.uleb128 0x1c
 7607 1ad6 58000000 		.4byte	.LVL350
 7608 1ada 07200000 		.4byte	0x2007
 7609 1ade 1C       		.uleb128 0x1c
 7610 1adf 98000000 		.4byte	.LVL356
 7611 1ae3 1E200000 		.4byte	0x201e
 7612 1ae7 00       		.byte	0
 7613 1ae8 06       		.uleb128 0x6
 7614 1ae9 04       		.byte	0x4
 7615 1aea D5000000 		.4byte	0xd5
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 238


 7616 1aee 25       		.uleb128 0x25
 7617 1aef 61030000 		.4byte	.LASF194
 7618 1af3 01       		.byte	0x1
 7619 1af4 1312     		.2byte	0x1213
 7620 1af6 07010000 		.4byte	0x107
 7621 1afa 00000000 		.4byte	.LFB54
 7622 1afe B8000000 		.4byte	.LFE54-.LFB54
 7623 1b02 01       		.uleb128 0x1
 7624 1b03 9C       		.byte	0x9c
 7625 1b04 B31B0000 		.4byte	0x1bb3
 7626 1b08 19       		.uleb128 0x19
 7627 1b09 150A0000 		.4byte	.LASF195
 7628 1b0d 01       		.byte	0x1
 7629 1b0e 1312     		.2byte	0x1213
 7630 1b10 11020000 		.4byte	0x211
 7631 1b14 EB120000 		.4byte	.LLST117
 7632 1b18 19       		.uleb128 0x19
 7633 1b19 B80B0000 		.4byte	.LASF196
 7634 1b1d 01       		.byte	0x1
 7635 1b1e 1312     		.2byte	0x1213
 7636 1b20 D5000000 		.4byte	0xd5
 7637 1b24 17130000 		.4byte	.LLST118
 7638 1b28 19       		.uleb128 0x19
 7639 1b29 A9090000 		.4byte	.LASF197
 7640 1b2d 01       		.byte	0x1
 7641 1b2e 1312     		.2byte	0x1213
 7642 1b30 19030000 		.4byte	0x319
 7643 1b34 5C130000 		.4byte	.LLST119
 7644 1b38 19       		.uleb128 0x19
 7645 1b39 0B090000 		.4byte	.LASF198
 7646 1b3d 01       		.byte	0x1
 7647 1b3e 1312     		.2byte	0x1213
 7648 1b40 E81A0000 		.4byte	0x1ae8
 7649 1b44 7D130000 		.4byte	.LLST120
 7650 1b48 1A       		.uleb128 0x1a
 7651 1b49 FF0E0000 		.4byte	.LASF84
 7652 1b4d 01       		.byte	0x1
 7653 1b4e 1512     		.2byte	0x1215
 7654 1b50 23050000 		.4byte	0x523
 7655 1b54 A9130000 		.4byte	.LLST121
 7656 1b58 1A       		.uleb128 0x1a
 7657 1b59 3B0C0000 		.4byte	.LASF83
 7658 1b5d 01       		.byte	0x1
 7659 1b5e 1612     		.2byte	0x1216
 7660 1b60 07010000 		.4byte	0x107
 7661 1b64 D5130000 		.4byte	.LLST122
 7662 1b68 1A       		.uleb128 0x1a
 7663 1b69 3E0A0000 		.4byte	.LASF199
 7664 1b6d 01       		.byte	0x1
 7665 1b6e 1712     		.2byte	0x1217
 7666 1b70 BF000000 		.4byte	0xbf
 7667 1b74 FF130000 		.4byte	.LLST123
 7668 1b78 1C       		.uleb128 0x1c
 7669 1b79 0E000000 		.4byte	.LVL360
 7670 1b7d 07200000 		.4byte	0x2007
 7671 1b81 22       		.uleb128 0x22
 7672 1b82 64000000 		.4byte	.LVL365
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 239


 7673 1b86 29200000 		.4byte	0x2029
 7674 1b8a 951B0000 		.4byte	0x1b95
 7675 1b8e 1E       		.uleb128 0x1e
 7676 1b8f 01       		.uleb128 0x1
 7677 1b90 50       		.byte	0x50
 7678 1b91 02       		.uleb128 0x2
 7679 1b92 77       		.byte	0x77
 7680 1b93 00       		.sleb128 0
 7681 1b94 00       		.byte	0
 7682 1b95 22       		.uleb128 0x22
 7683 1b96 8A000000 		.4byte	.LVL367
 7684 1b9a 12200000 		.4byte	0x2012
 7685 1b9e A91B0000 		.4byte	0x1ba9
 7686 1ba2 1E       		.uleb128 0x1e
 7687 1ba3 01       		.uleb128 0x1
 7688 1ba4 51       		.byte	0x51
 7689 1ba5 02       		.uleb128 0x2
 7690 1ba6 77       		.byte	0x77
 7691 1ba7 00       		.sleb128 0
 7692 1ba8 00       		.byte	0
 7693 1ba9 1C       		.uleb128 0x1c
 7694 1baa AA000000 		.4byte	.LVL368
 7695 1bae 1E200000 		.4byte	0x201e
 7696 1bb2 00       		.byte	0
 7697 1bb3 25       		.uleb128 0x25
 7698 1bb4 10020000 		.4byte	.LASF200
 7699 1bb8 01       		.byte	0x1
 7700 1bb9 8512     		.2byte	0x1285
 7701 1bbb 07010000 		.4byte	0x107
 7702 1bbf 00000000 		.4byte	.LFB55
 7703 1bc3 D8000000 		.4byte	.LFE55-.LFB55
 7704 1bc7 01       		.uleb128 0x1
 7705 1bc8 9C       		.byte	0x9c
 7706 1bc9 E21C0000 		.4byte	0x1ce2
 7707 1bcd 19       		.uleb128 0x19
 7708 1bce 150A0000 		.4byte	.LASF195
 7709 1bd2 01       		.byte	0x1
 7710 1bd3 8512     		.2byte	0x1285
 7711 1bd5 11020000 		.4byte	0x211
 7712 1bd9 12140000 		.4byte	.LLST124
 7713 1bdd 19       		.uleb128 0x19
 7714 1bde B80B0000 		.4byte	.LASF196
 7715 1be2 01       		.byte	0x1
 7716 1be3 8512     		.2byte	0x1285
 7717 1be5 D5000000 		.4byte	0xd5
 7718 1be9 54140000 		.4byte	.LLST125
 7719 1bed 19       		.uleb128 0x19
 7720 1bee A9090000 		.4byte	.LASF197
 7721 1bf2 01       		.byte	0x1
 7722 1bf3 8512     		.2byte	0x1285
 7723 1bf5 19030000 		.4byte	0x319
 7724 1bf9 8E140000 		.4byte	.LLST126
 7725 1bfd 19       		.uleb128 0x19
 7726 1bfe 0B090000 		.4byte	.LASF198
 7727 1c02 01       		.byte	0x1
 7728 1c03 8512     		.2byte	0x1285
 7729 1c05 E81A0000 		.4byte	0x1ae8
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 240


 7730 1c09 AF140000 		.4byte	.LLST127
 7731 1c0d 19       		.uleb128 0x19
 7732 1c0e F3000000 		.4byte	.LASF201
 7733 1c12 01       		.byte	0x1
 7734 1c13 8512     		.2byte	0x1285
 7735 1c15 E21C0000 		.4byte	0x1ce2
 7736 1c19 D0140000 		.4byte	.LLST128
 7737 1c1d 1A       		.uleb128 0x1a
 7738 1c1e FF0E0000 		.4byte	.LASF84
 7739 1c22 01       		.byte	0x1
 7740 1c23 8712     		.2byte	0x1287
 7741 1c25 23050000 		.4byte	0x523
 7742 1c29 F0140000 		.4byte	.LLST129
 7743 1c2d 1A       		.uleb128 0x1a
 7744 1c2e 3E0A0000 		.4byte	.LASF199
 7745 1c32 01       		.byte	0x1
 7746 1c33 8812     		.2byte	0x1288
 7747 1c35 BF000000 		.4byte	0xbf
 7748 1c39 32150000 		.4byte	.LLST130
 7749 1c3d 1A       		.uleb128 0x1a
 7750 1c3e 3B0C0000 		.4byte	.LASF83
 7751 1c42 01       		.byte	0x1
 7752 1c43 8912     		.2byte	0x1289
 7753 1c45 07010000 		.4byte	0x107
 7754 1c49 45150000 		.4byte	.LLST131
 7755 1c4d 28       		.uleb128 0x28
 7756 1c4e 05030000 		.4byte	.LASF130
 7757 1c52 01       		.byte	0x1
 7758 1c53 8A12     		.2byte	0x128a
 7759 1c55 12010000 		.4byte	0x112
 7760 1c59 29       		.uleb128 0x29
 7761 1c5a D8030000 		.4byte	0x3d8
 7762 1c5e 02000000 		.4byte	.LBB53
 7763 1c62 14000000 		.4byte	.LBE53-.LBB53
 7764 1c66 01       		.byte	0x1
 7765 1c67 A212     		.2byte	0x12a2
 7766 1c69 821C0000 		.4byte	0x1c82
 7767 1c6d 23       		.uleb128 0x23
 7768 1c6e 02000000 		.4byte	.LBB54
 7769 1c72 14000000 		.4byte	.LBE54-.LBB54
 7770 1c76 2A       		.uleb128 0x2a
 7771 1c77 E8030000 		.4byte	0x3e8
 7772 1c7b 2A       		.uleb128 0x2a
 7773 1c7c F3030000 		.4byte	0x3f3
 7774 1c80 00       		.byte	0
 7775 1c81 00       		.byte	0
 7776 1c82 29       		.uleb128 0x29
 7777 1c83 FF030000 		.4byte	0x3ff
 7778 1c87 C6000000 		.4byte	.LBB55
 7779 1c8b 04000000 		.4byte	.LBE55-.LBB55
 7780 1c8f 01       		.byte	0x1
 7781 1c90 FC12     		.2byte	0x12fc
 7782 1c92 A01C0000 		.4byte	0x1ca0
 7783 1c96 2C       		.uleb128 0x2c
 7784 1c97 0B040000 		.4byte	0x40b
 7785 1c9b 6F150000 		.4byte	.LLST132
 7786 1c9f 00       		.byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 241


 7787 1ca0 22       		.uleb128 0x22
 7788 1ca1 76000000 		.4byte	.LVL380
 7789 1ca5 29200000 		.4byte	0x2029
 7790 1ca9 B41C0000 		.4byte	0x1cb4
 7791 1cad 1E       		.uleb128 0x1e
 7792 1cae 01       		.uleb128 0x1
 7793 1caf 50       		.byte	0x50
 7794 1cb0 02       		.uleb128 0x2
 7795 1cb1 77       		.byte	0x77
 7796 1cb2 00       		.sleb128 0
 7797 1cb3 00       		.byte	0
 7798 1cb4 22       		.uleb128 0x22
 7799 1cb5 9A000000 		.4byte	.LVL381
 7800 1cb9 12200000 		.4byte	0x2012
 7801 1cbd C81C0000 		.4byte	0x1cc8
 7802 1cc1 1E       		.uleb128 0x1e
 7803 1cc2 01       		.uleb128 0x1
 7804 1cc3 51       		.byte	0x51
 7805 1cc4 02       		.uleb128 0x2
 7806 1cc5 77       		.byte	0x77
 7807 1cc6 00       		.sleb128 0
 7808 1cc7 00       		.byte	0
 7809 1cc8 1D       		.uleb128 0x1d
 7810 1cc9 A6000000 		.4byte	.LVL384
 7811 1ccd 12200000 		.4byte	0x2012
 7812 1cd1 1E       		.uleb128 0x1e
 7813 1cd2 01       		.uleb128 0x1
 7814 1cd3 50       		.byte	0x50
 7815 1cd4 05       		.uleb128 0x5
 7816 1cd5 03       		.byte	0x3
 7817 1cd6 14000000 		.4byte	.LANCHOR0+20
 7818 1cda 1E       		.uleb128 0x1e
 7819 1cdb 01       		.uleb128 0x1
 7820 1cdc 51       		.byte	0x51
 7821 1cdd 02       		.uleb128 0x2
 7822 1cde 76       		.byte	0x76
 7823 1cdf 18       		.sleb128 24
 7824 1ce0 00       		.byte	0
 7825 1ce1 00       		.byte	0
 7826 1ce2 06       		.uleb128 0x6
 7827 1ce3 04       		.byte	0x4
 7828 1ce4 07010000 		.4byte	0x107
 7829 1ce8 27       		.uleb128 0x27
 7830 1ce9 320B0000 		.4byte	.LASF202
 7831 1ced 01       		.byte	0x1
 7832 1cee 0613     		.2byte	0x1306
 7833 1cf0 00000000 		.4byte	.LFB56
 7834 1cf4 9C000000 		.4byte	.LFE56-.LFB56
 7835 1cf8 01       		.uleb128 0x1
 7836 1cf9 9C       		.byte	0x9c
 7837 1cfa D31D0000 		.4byte	0x1dd3
 7838 1cfe 19       		.uleb128 0x19
 7839 1cff 150A0000 		.4byte	.LASF195
 7840 1d03 01       		.byte	0x1
 7841 1d04 0613     		.2byte	0x1306
 7842 1d06 11020000 		.4byte	0x211
 7843 1d0a 82150000 		.4byte	.LLST133
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 242


 7844 1d0e 19       		.uleb128 0x19
 7845 1d0f F3000000 		.4byte	.LASF201
 7846 1d13 01       		.byte	0x1
 7847 1d14 0613     		.2byte	0x1306
 7848 1d16 E21C0000 		.4byte	0x1ce2
 7849 1d1a C4150000 		.4byte	.LLST134
 7850 1d1e 1A       		.uleb128 0x1a
 7851 1d1f FF0E0000 		.4byte	.LASF84
 7852 1d23 01       		.byte	0x1
 7853 1d24 0813     		.2byte	0x1308
 7854 1d26 23050000 		.4byte	0x523
 7855 1d2a 06160000 		.4byte	.LLST135
 7856 1d2e 1A       		.uleb128 0x1a
 7857 1d2f 3E0A0000 		.4byte	.LASF199
 7858 1d33 01       		.byte	0x1
 7859 1d34 0913     		.2byte	0x1309
 7860 1d36 BF000000 		.4byte	0xbf
 7861 1d3a 48160000 		.4byte	.LLST136
 7862 1d3e 28       		.uleb128 0x28
 7863 1d3f 05030000 		.4byte	.LASF130
 7864 1d43 01       		.byte	0x1
 7865 1d44 0A13     		.2byte	0x130a
 7866 1d46 12010000 		.4byte	0x112
 7867 1d4a 29       		.uleb128 0x29
 7868 1d4b D8030000 		.4byte	0x3d8
 7869 1d4f 02000000 		.4byte	.LBB57
 7870 1d53 14000000 		.4byte	.LBE57-.LBB57
 7871 1d57 01       		.byte	0x1
 7872 1d58 2213     		.2byte	0x1322
 7873 1d5a 731D0000 		.4byte	0x1d73
 7874 1d5e 23       		.uleb128 0x23
 7875 1d5f 02000000 		.4byte	.LBB58
 7876 1d63 14000000 		.4byte	.LBE58-.LBB58
 7877 1d67 2A       		.uleb128 0x2a
 7878 1d68 E8030000 		.4byte	0x3e8
 7879 1d6c 2A       		.uleb128 0x2a
 7880 1d6d F3030000 		.4byte	0x3f3
 7881 1d71 00       		.byte	0
 7882 1d72 00       		.byte	0
 7883 1d73 29       		.uleb128 0x29
 7884 1d74 FF030000 		.4byte	0x3ff
 7885 1d78 8C000000 		.4byte	.LBB59
 7886 1d7c 10000000 		.4byte	.LBE59-.LBB59
 7887 1d80 01       		.byte	0x1
 7888 1d81 5413     		.2byte	0x1354
 7889 1d83 911D0000 		.4byte	0x1d91
 7890 1d87 2C       		.uleb128 0x2c
 7891 1d88 0B040000 		.4byte	0x40b
 7892 1d8c 5B160000 		.4byte	.LLST137
 7893 1d90 00       		.byte	0
 7894 1d91 22       		.uleb128 0x22
 7895 1d92 40000000 		.4byte	.LVL393
 7896 1d96 29200000 		.4byte	0x2029
 7897 1d9a A51D0000 		.4byte	0x1da5
 7898 1d9e 1E       		.uleb128 0x1e
 7899 1d9f 01       		.uleb128 0x1
 7900 1da0 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 243


 7901 1da1 02       		.uleb128 0x2
 7902 1da2 77       		.byte	0x77
 7903 1da3 00       		.sleb128 0
 7904 1da4 00       		.byte	0
 7905 1da5 22       		.uleb128 0x22
 7906 1da6 64000000 		.4byte	.LVL394
 7907 1daa 12200000 		.4byte	0x2012
 7908 1dae B91D0000 		.4byte	0x1db9
 7909 1db2 1E       		.uleb128 0x1e
 7910 1db3 01       		.uleb128 0x1
 7911 1db4 51       		.byte	0x51
 7912 1db5 02       		.uleb128 0x2
 7913 1db6 77       		.byte	0x77
 7914 1db7 00       		.sleb128 0
 7915 1db8 00       		.byte	0
 7916 1db9 1D       		.uleb128 0x1d
 7917 1dba 70000000 		.4byte	.LVL398
 7918 1dbe 12200000 		.4byte	0x2012
 7919 1dc2 1E       		.uleb128 0x1e
 7920 1dc3 01       		.uleb128 0x1
 7921 1dc4 50       		.byte	0x50
 7922 1dc5 05       		.uleb128 0x5
 7923 1dc6 03       		.byte	0x3
 7924 1dc7 14000000 		.4byte	.LANCHOR0+20
 7925 1dcb 1E       		.uleb128 0x1e
 7926 1dcc 01       		.uleb128 0x1
 7927 1dcd 51       		.byte	0x51
 7928 1dce 02       		.uleb128 0x2
 7929 1dcf 74       		.byte	0x74
 7930 1dd0 18       		.sleb128 24
 7931 1dd1 00       		.byte	0
 7932 1dd2 00       		.byte	0
 7933 1dd3 25       		.uleb128 0x25
 7934 1dd4 580D0000 		.4byte	.LASF203
 7935 1dd8 01       		.byte	0x1
 7936 1dd9 5D13     		.2byte	0x135d
 7937 1ddb 07010000 		.4byte	0x107
 7938 1ddf 00000000 		.4byte	.LFB57
 7939 1de3 34000000 		.4byte	.LFE57-.LFB57
 7940 1de7 01       		.uleb128 0x1
 7941 1de8 9C       		.byte	0x9c
 7942 1de9 301E0000 		.4byte	0x1e30
 7943 1ded 19       		.uleb128 0x19
 7944 1dee 230A0000 		.4byte	.LASF87
 7945 1df2 01       		.byte	0x1
 7946 1df3 5D13     		.2byte	0x135d
 7947 1df5 11020000 		.4byte	0x211
 7948 1df9 6E160000 		.4byte	.LLST138
 7949 1dfd 1A       		.uleb128 0x1a
 7950 1dfe FF0E0000 		.4byte	.LASF84
 7951 1e02 01       		.byte	0x1
 7952 1e03 5F13     		.2byte	0x135f
 7953 1e05 23050000 		.4byte	0x523
 7954 1e09 81160000 		.4byte	.LLST139
 7955 1e0d 1A       		.uleb128 0x1a
 7956 1e0e 3B0C0000 		.4byte	.LASF83
 7957 1e12 01       		.byte	0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 244


 7958 1e13 6013     		.2byte	0x1360
 7959 1e15 07010000 		.4byte	0x107
 7960 1e19 9F160000 		.4byte	.LLST140
 7961 1e1d 1C       		.uleb128 0x1c
 7962 1e1e 10000000 		.4byte	.LVL403
 7963 1e22 07200000 		.4byte	0x2007
 7964 1e26 1C       		.uleb128 0x1c
 7965 1e27 2A000000 		.4byte	.LVL408
 7966 1e2b 1E200000 		.4byte	0x201e
 7967 1e2f 00       		.byte	0
 7968 1e30 11       		.uleb128 0x11
 7969 1e31 06020000 		.4byte	0x206
 7970 1e35 401E0000 		.4byte	0x1e40
 7971 1e39 12       		.uleb128 0x12
 7972 1e3a 9E000000 		.4byte	0x9e
 7973 1e3e 1F       		.byte	0x1f
 7974 1e3f 00       		.byte	0
 7975 1e40 20       		.uleb128 0x20
 7976 1e41 A9010000 		.4byte	.LASF204
 7977 1e45 01       		.byte	0x1
 7978 1e46 6501     		.2byte	0x165
 7979 1e48 301E0000 		.4byte	0x1e30
 7980 1e4c 05       		.uleb128 0x5
 7981 1e4d 03       		.byte	0x3
 7982 1e4e 30000000 		.4byte	pxReadyTasksLists
 7983 1e52 20       		.uleb128 0x20
 7984 1e53 40020000 		.4byte	.LASF205
 7985 1e57 01       		.byte	0x1
 7986 1e58 6601     		.2byte	0x166
 7987 1e5a 06020000 		.4byte	0x206
 7988 1e5e 05       		.uleb128 0x5
 7989 1e5f 03       		.byte	0x3
 7990 1e60 B0020000 		.4byte	xDelayedTaskList1
 7991 1e64 20       		.uleb128 0x20
 7992 1e65 52020000 		.4byte	.LASF206
 7993 1e69 01       		.byte	0x1
 7994 1e6a 6701     		.2byte	0x167
 7995 1e6c 06020000 		.4byte	0x206
 7996 1e70 05       		.uleb128 0x5
 7997 1e71 03       		.byte	0x3
 7998 1e72 C4020000 		.4byte	xDelayedTaskList2
 7999 1e76 20       		.uleb128 0x20
 8000 1e77 490B0000 		.4byte	.LASF207
 8001 1e7b 01       		.byte	0x1
 8002 1e7c 6801     		.2byte	0x168
 8003 1e7e 881E0000 		.4byte	0x1e88
 8004 1e82 05       		.uleb128 0x5
 8005 1e83 03       		.byte	0x3
 8006 1e84 28000000 		.4byte	pxDelayedTaskList
 8007 1e88 0C       		.uleb128 0xc
 8008 1e89 CE100000 		.4byte	0x10ce
 8009 1e8d 20       		.uleb128 0x20
 8010 1e8e 37060000 		.4byte	.LASF208
 8011 1e92 01       		.byte	0x1
 8012 1e93 6901     		.2byte	0x169
 8013 1e95 881E0000 		.4byte	0x1e88
 8014 1e99 05       		.uleb128 0x5
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 245


 8015 1e9a 03       		.byte	0x3
 8016 1e9b EC020000 		.4byte	pxOverflowDelayedTaskList
 8017 1e9f 20       		.uleb128 0x20
 8018 1ea0 21040000 		.4byte	.LASF209
 8019 1ea4 01       		.byte	0x1
 8020 1ea5 6A01     		.2byte	0x16a
 8021 1ea7 06020000 		.4byte	0x206
 8022 1eab 05       		.uleb128 0x5
 8023 1eac 03       		.byte	0x3
 8024 1ead 14000000 		.4byte	xPendingReadyList
 8025 1eb1 20       		.uleb128 0x20
 8026 1eb2 53040000 		.4byte	.LASF210
 8027 1eb6 01       		.byte	0x1
 8028 1eb7 6E01     		.2byte	0x16e
 8029 1eb9 06020000 		.4byte	0x206
 8030 1ebd 05       		.uleb128 0x5
 8031 1ebe 03       		.byte	0x3
 8032 1ebf D8020000 		.4byte	xTasksWaitingTermination
 8033 1ec3 20       		.uleb128 0x20
 8034 1ec4 81010000 		.4byte	.LASF211
 8035 1ec8 01       		.byte	0x1
 8036 1ec9 6F01     		.2byte	0x16f
 8037 1ecb FB010000 		.4byte	0x1fb
 8038 1ecf 05       		.uleb128 0x5
 8039 1ed0 03       		.byte	0x3
 8040 1ed1 04030000 		.4byte	uxDeletedTasksWaitingCleanUp
 8041 1ed5 20       		.uleb128 0x20
 8042 1ed6 14060000 		.4byte	.LASF212
 8043 1eda 01       		.byte	0x1
 8044 1edb 7501     		.2byte	0x175
 8045 1edd 06020000 		.4byte	0x206
 8046 1ee1 05       		.uleb128 0x5
 8047 1ee2 03       		.byte	0x3
 8048 1ee3 00000000 		.4byte	xSuspendedTaskList
 8049 1ee7 20       		.uleb128 0x20
 8050 1ee8 9F0E0000 		.4byte	.LASF213
 8051 1eec 01       		.byte	0x1
 8052 1eed 8001     		.2byte	0x180
 8053 1eef FB010000 		.4byte	0x1fb
 8054 1ef3 05       		.uleb128 0x5
 8055 1ef4 03       		.byte	0x3
 8056 1ef5 F0020000 		.4byte	uxCurrentNumberOfTasks
 8057 1ef9 20       		.uleb128 0x20
 8058 1efa 66080000 		.4byte	.LASF214
 8059 1efe 01       		.byte	0x1
 8060 1eff 8101     		.2byte	0x181
 8061 1f01 0B1F0000 		.4byte	0x1f0b
 8062 1f05 05       		.uleb128 0x5
 8063 1f06 03       		.byte	0x3
 8064 1f07 08030000 		.4byte	xTickCount
 8065 1f0b 0C       		.uleb128 0xc
 8066 1f0c 1D010000 		.4byte	0x11d
 8067 1f10 20       		.uleb128 0x20
 8068 1f11 17010000 		.4byte	.LASF215
 8069 1f15 01       		.byte	0x1
 8070 1f16 8201     		.2byte	0x182
 8071 1f18 FB010000 		.4byte	0x1fb
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 246


 8072 1f1c 05       		.uleb128 0x5
 8073 1f1d 03       		.byte	0x3
 8074 1f1e 00030000 		.4byte	uxTopReadyPriority
 8075 1f22 20       		.uleb128 0x20
 8076 1f23 51010000 		.4byte	.LASF216
 8077 1f27 01       		.byte	0x1
 8078 1f28 8301     		.2byte	0x183
 8079 1f2a 341F0000 		.4byte	0x1f34
 8080 1f2e 05       		.uleb128 0x5
 8081 1f2f 03       		.byte	0x3
 8082 1f30 F8020000 		.4byte	xSchedulerRunning
 8083 1f34 0C       		.uleb128 0xc
 8084 1f35 07010000 		.4byte	0x107
 8085 1f39 20       		.uleb128 0x20
 8086 1f3a 5D0C0000 		.4byte	.LASF217
 8087 1f3e 01       		.byte	0x1
 8088 1f3f 8401     		.2byte	0x184
 8089 1f41 FB010000 		.4byte	0x1fb
 8090 1f45 05       		.uleb128 0x5
 8091 1f46 03       		.byte	0x3
 8092 1f47 18030000 		.4byte	uxPendedTicks
 8093 1f4b 20       		.uleb128 0x20
 8094 1f4c A70F0000 		.4byte	.LASF218
 8095 1f50 01       		.byte	0x1
 8096 1f51 8501     		.2byte	0x185
 8097 1f53 341F0000 		.4byte	0x1f34
 8098 1f57 05       		.uleb128 0x5
 8099 1f58 03       		.byte	0x3
 8100 1f59 1C030000 		.4byte	xYieldPending
 8101 1f5d 20       		.uleb128 0x20
 8102 1f5e 9B0A0000 		.4byte	.LASF219
 8103 1f62 01       		.byte	0x1
 8104 1f63 8601     		.2byte	0x186
 8105 1f65 341F0000 		.4byte	0x1f34
 8106 1f69 05       		.uleb128 0x5
 8107 1f6a 03       		.byte	0x3
 8108 1f6b 14030000 		.4byte	xNumOfOverflows
 8109 1f6f 20       		.uleb128 0x20
 8110 1f70 8F090000 		.4byte	.LASF220
 8111 1f74 01       		.byte	0x1
 8112 1f75 8701     		.2byte	0x187
 8113 1f77 12010000 		.4byte	0x112
 8114 1f7b 05       		.uleb128 0x5
 8115 1f7c 03       		.byte	0x3
 8116 1f7d FC020000 		.4byte	uxTaskNumber
 8117 1f81 20       		.uleb128 0x20
 8118 1f82 28080000 		.4byte	.LASF221
 8119 1f86 01       		.byte	0x1
 8120 1f87 8801     		.2byte	0x188
 8121 1f89 0B1F0000 		.4byte	0x1f0b
 8122 1f8d 05       		.uleb128 0x5
 8123 1f8e 03       		.byte	0x3
 8124 1f8f 2C000000 		.4byte	xNextTaskUnblockTime
 8125 1f93 20       		.uleb128 0x20
 8126 1f94 B70A0000 		.4byte	.LASF222
 8127 1f98 01       		.byte	0x1
 8128 1f99 8901     		.2byte	0x189
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 247


 8129 1f9b 11020000 		.4byte	0x211
 8130 1f9f 05       		.uleb128 0x5
 8131 1fa0 03       		.byte	0x3
 8132 1fa1 10030000 		.4byte	xIdleTaskHandle
 8133 1fa5 20       		.uleb128 0x20
 8134 1fa6 050F0000 		.4byte	.LASF223
 8135 1faa 01       		.byte	0x1
 8136 1fab 9301     		.2byte	0x193
 8137 1fad FB010000 		.4byte	0x1fb
 8138 1fb1 05       		.uleb128 0x5
 8139 1fb2 03       		.byte	0x3
 8140 1fb3 0C030000 		.4byte	uxSchedulerSuspended
 8141 1fb7 33       		.uleb128 0x33
 8142 1fb8 920E0000 		.4byte	.LASF241
 8143 1fbc 01       		.byte	0x1
 8144 1fbd 5F01     		.2byte	0x15f
 8145 1fbf C91F0000 		.4byte	0x1fc9
 8146 1fc3 05       		.uleb128 0x5
 8147 1fc4 03       		.byte	0x3
 8148 1fc5 00000000 		.4byte	pxCurrentTCB
 8149 1fc9 0C       		.uleb128 0xc
 8150 1fca 23050000 		.4byte	0x523
 8151 1fce 34       		.uleb128 0x34
 8152 1fcf F60B0000 		.4byte	.LASF224
 8153 1fd3 F60B0000 		.4byte	.LASF224
 8154 1fd7 09       		.byte	0x9
 8155 1fd8 82       		.byte	0x82
 8156 1fd9 34       		.uleb128 0x34
 8157 1fda 28090000 		.4byte	.LASF225
 8158 1fde 28090000 		.4byte	.LASF225
 8159 1fe2 0A       		.byte	0xa
 8160 1fe3 19       		.byte	0x19
 8161 1fe4 35       		.uleb128 0x35
 8162 1fe5 EE0A0000 		.4byte	.LASF226
 8163 1fe9 EE0A0000 		.4byte	.LASF226
 8164 1fed 07       		.byte	0x7
 8165 1fee 6401     		.2byte	0x164
 8166 1ff0 34       		.uleb128 0x34
 8167 1ff1 50080000 		.4byte	.LASF227
 8168 1ff5 50080000 		.4byte	.LASF227
 8169 1ff9 09       		.byte	0x9
 8170 1ffa 66       		.byte	0x66
 8171 1ffb 35       		.uleb128 0x35
 8172 1ffc 6E0D0000 		.4byte	.LASF228
 8173 2000 6E0D0000 		.4byte	.LASF228
 8174 2004 07       		.byte	0x7
 8175 2005 5901     		.2byte	0x159
 8176 2007 34       		.uleb128 0x34
 8177 2008 73020000 		.4byte	.LASF229
 8178 200c 73020000 		.4byte	.LASF229
 8179 2010 02       		.byte	0x2
 8180 2011 61       		.byte	0x61
 8181 2012 35       		.uleb128 0x35
 8182 2013 05060000 		.4byte	.LASF230
 8183 2017 05060000 		.4byte	.LASF230
 8184 201b 07       		.byte	0x7
 8185 201c 8601     		.2byte	0x186
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 248


 8186 201e 34       		.uleb128 0x34
 8187 201f 3C000000 		.4byte	.LASF231
 8188 2023 3C000000 		.4byte	.LASF231
 8189 2027 02       		.byte	0x2
 8190 2028 62       		.byte	0x62
 8191 2029 35       		.uleb128 0x35
 8192 202a 33030000 		.4byte	.LASF232
 8193 202e 33030000 		.4byte	.LASF232
 8194 2032 07       		.byte	0x7
 8195 2033 9501     		.2byte	0x195
 8196 2035 35       		.uleb128 0x35
 8197 2036 00000000 		.4byte	.LASF233
 8198 203a 00000000 		.4byte	.LASF233
 8199 203e 07       		.byte	0x7
 8200 203f 7101     		.2byte	0x171
 8201 2041 34       		.uleb128 0x34
 8202 2042 AE040000 		.4byte	.LASF234
 8203 2046 AE040000 		.4byte	.LASF234
 8204 204a 09       		.byte	0x9
 8205 204b 81       		.byte	0x81
 8206 204c 35       		.uleb128 0x35
 8207 204d E1020000 		.4byte	.LASF235
 8208 2051 E1020000 		.4byte	.LASF235
 8209 2055 0B       		.byte	0xb
 8210 2056 F004     		.2byte	0x4f0
 8211 2058 34       		.uleb128 0x34
 8212 2059 4E000000 		.4byte	.LASF236
 8213 205d 4E000000 		.4byte	.LASF236
 8214 2061 09       		.byte	0x9
 8215 2062 8B       		.byte	0x8b
 8216 2063 34       		.uleb128 0x34
 8217 2064 E40B0000 		.4byte	.LASF237
 8218 2068 E40B0000 		.4byte	.LASF237
 8219 206c 09       		.byte	0x9
 8220 206d 92       		.byte	0x92
 8221 206e 00       		.byte	0
 8222              		.section	.debug_abbrev,"",%progbits
 8223              	.Ldebug_abbrev0:
 8224 0000 01       		.uleb128 0x1
 8225 0001 11       		.uleb128 0x11
 8226 0002 01       		.byte	0x1
 8227 0003 25       		.uleb128 0x25
 8228 0004 0E       		.uleb128 0xe
 8229 0005 13       		.uleb128 0x13
 8230 0006 0B       		.uleb128 0xb
 8231 0007 03       		.uleb128 0x3
 8232 0008 0E       		.uleb128 0xe
 8233 0009 1B       		.uleb128 0x1b
 8234 000a 0E       		.uleb128 0xe
 8235 000b 55       		.uleb128 0x55
 8236 000c 17       		.uleb128 0x17
 8237 000d 11       		.uleb128 0x11
 8238 000e 01       		.uleb128 0x1
 8239 000f 10       		.uleb128 0x10
 8240 0010 17       		.uleb128 0x17
 8241 0011 00       		.byte	0
 8242 0012 00       		.byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 249


 8243 0013 02       		.uleb128 0x2
 8244 0014 16       		.uleb128 0x16
 8245 0015 00       		.byte	0
 8246 0016 03       		.uleb128 0x3
 8247 0017 0E       		.uleb128 0xe
 8248 0018 3A       		.uleb128 0x3a
 8249 0019 0B       		.uleb128 0xb
 8250 001a 3B       		.uleb128 0x3b
 8251 001b 0B       		.uleb128 0xb
 8252 001c 49       		.uleb128 0x49
 8253 001d 13       		.uleb128 0x13
 8254 001e 00       		.byte	0
 8255 001f 00       		.byte	0
 8256 0020 03       		.uleb128 0x3
 8257 0021 24       		.uleb128 0x24
 8258 0022 00       		.byte	0
 8259 0023 0B       		.uleb128 0xb
 8260 0024 0B       		.uleb128 0xb
 8261 0025 3E       		.uleb128 0x3e
 8262 0026 0B       		.uleb128 0xb
 8263 0027 03       		.uleb128 0x3
 8264 0028 0E       		.uleb128 0xe
 8265 0029 00       		.byte	0
 8266 002a 00       		.byte	0
 8267 002b 04       		.uleb128 0x4
 8268 002c 24       		.uleb128 0x24
 8269 002d 00       		.byte	0
 8270 002e 0B       		.uleb128 0xb
 8271 002f 0B       		.uleb128 0xb
 8272 0030 3E       		.uleb128 0x3e
 8273 0031 0B       		.uleb128 0xb
 8274 0032 03       		.uleb128 0x3
 8275 0033 08       		.uleb128 0x8
 8276 0034 00       		.byte	0
 8277 0035 00       		.byte	0
 8278 0036 05       		.uleb128 0x5
 8279 0037 0F       		.uleb128 0xf
 8280 0038 00       		.byte	0
 8281 0039 0B       		.uleb128 0xb
 8282 003a 0B       		.uleb128 0xb
 8283 003b 00       		.byte	0
 8284 003c 00       		.byte	0
 8285 003d 06       		.uleb128 0x6
 8286 003e 0F       		.uleb128 0xf
 8287 003f 00       		.byte	0
 8288 0040 0B       		.uleb128 0xb
 8289 0041 0B       		.uleb128 0xb
 8290 0042 49       		.uleb128 0x49
 8291 0043 13       		.uleb128 0x13
 8292 0044 00       		.byte	0
 8293 0045 00       		.byte	0
 8294 0046 07       		.uleb128 0x7
 8295 0047 26       		.uleb128 0x26
 8296 0048 00       		.byte	0
 8297 0049 49       		.uleb128 0x49
 8298 004a 13       		.uleb128 0x13
 8299 004b 00       		.byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 250


 8300 004c 00       		.byte	0
 8301 004d 08       		.uleb128 0x8
 8302 004e 15       		.uleb128 0x15
 8303 004f 01       		.byte	0x1
 8304 0050 27       		.uleb128 0x27
 8305 0051 19       		.uleb128 0x19
 8306 0052 01       		.uleb128 0x1
 8307 0053 13       		.uleb128 0x13
 8308 0054 00       		.byte	0
 8309 0055 00       		.byte	0
 8310 0056 09       		.uleb128 0x9
 8311 0057 05       		.uleb128 0x5
 8312 0058 00       		.byte	0
 8313 0059 49       		.uleb128 0x49
 8314 005a 13       		.uleb128 0x13
 8315 005b 00       		.byte	0
 8316 005c 00       		.byte	0
 8317 005d 0A       		.uleb128 0xa
 8318 005e 13       		.uleb128 0x13
 8319 005f 01       		.byte	0x1
 8320 0060 03       		.uleb128 0x3
 8321 0061 0E       		.uleb128 0xe
 8322 0062 0B       		.uleb128 0xb
 8323 0063 0B       		.uleb128 0xb
 8324 0064 3A       		.uleb128 0x3a
 8325 0065 0B       		.uleb128 0xb
 8326 0066 3B       		.uleb128 0x3b
 8327 0067 0B       		.uleb128 0xb
 8328 0068 01       		.uleb128 0x1
 8329 0069 13       		.uleb128 0x13
 8330 006a 00       		.byte	0
 8331 006b 00       		.byte	0
 8332 006c 0B       		.uleb128 0xb
 8333 006d 0D       		.uleb128 0xd
 8334 006e 00       		.byte	0
 8335 006f 03       		.uleb128 0x3
 8336 0070 0E       		.uleb128 0xe
 8337 0071 3A       		.uleb128 0x3a
 8338 0072 0B       		.uleb128 0xb
 8339 0073 3B       		.uleb128 0x3b
 8340 0074 0B       		.uleb128 0xb
 8341 0075 49       		.uleb128 0x49
 8342 0076 13       		.uleb128 0x13
 8343 0077 38       		.uleb128 0x38
 8344 0078 0B       		.uleb128 0xb
 8345 0079 00       		.byte	0
 8346 007a 00       		.byte	0
 8347 007b 0C       		.uleb128 0xc
 8348 007c 35       		.uleb128 0x35
 8349 007d 00       		.byte	0
 8350 007e 49       		.uleb128 0x49
 8351 007f 13       		.uleb128 0x13
 8352 0080 00       		.byte	0
 8353 0081 00       		.byte	0
 8354 0082 0D       		.uleb128 0xd
 8355 0083 13       		.uleb128 0x13
 8356 0084 01       		.byte	0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 251


 8357 0085 03       		.uleb128 0x3
 8358 0086 0E       		.uleb128 0xe
 8359 0087 0B       		.uleb128 0xb
 8360 0088 0B       		.uleb128 0xb
 8361 0089 3A       		.uleb128 0x3a
 8362 008a 0B       		.uleb128 0xb
 8363 008b 3B       		.uleb128 0x3b
 8364 008c 05       		.uleb128 0x5
 8365 008d 01       		.uleb128 0x1
 8366 008e 13       		.uleb128 0x13
 8367 008f 00       		.byte	0
 8368 0090 00       		.byte	0
 8369 0091 0E       		.uleb128 0xe
 8370 0092 0D       		.uleb128 0xd
 8371 0093 00       		.byte	0
 8372 0094 03       		.uleb128 0x3
 8373 0095 0E       		.uleb128 0xe
 8374 0096 3A       		.uleb128 0x3a
 8375 0097 0B       		.uleb128 0xb
 8376 0098 3B       		.uleb128 0x3b
 8377 0099 05       		.uleb128 0x5
 8378 009a 49       		.uleb128 0x49
 8379 009b 13       		.uleb128 0x13
 8380 009c 38       		.uleb128 0x38
 8381 009d 0B       		.uleb128 0xb
 8382 009e 00       		.byte	0
 8383 009f 00       		.byte	0
 8384 00a0 0F       		.uleb128 0xf
 8385 00a1 04       		.uleb128 0x4
 8386 00a2 01       		.byte	0x1
 8387 00a3 0B       		.uleb128 0xb
 8388 00a4 0B       		.uleb128 0xb
 8389 00a5 49       		.uleb128 0x49
 8390 00a6 13       		.uleb128 0x13
 8391 00a7 3A       		.uleb128 0x3a
 8392 00a8 0B       		.uleb128 0xb
 8393 00a9 3B       		.uleb128 0x3b
 8394 00aa 0B       		.uleb128 0xb
 8395 00ab 01       		.uleb128 0x1
 8396 00ac 13       		.uleb128 0x13
 8397 00ad 00       		.byte	0
 8398 00ae 00       		.byte	0
 8399 00af 10       		.uleb128 0x10
 8400 00b0 28       		.uleb128 0x28
 8401 00b1 00       		.byte	0
 8402 00b2 03       		.uleb128 0x3
 8403 00b3 0E       		.uleb128 0xe
 8404 00b4 1C       		.uleb128 0x1c
 8405 00b5 0B       		.uleb128 0xb
 8406 00b6 00       		.byte	0
 8407 00b7 00       		.byte	0
 8408 00b8 11       		.uleb128 0x11
 8409 00b9 01       		.uleb128 0x1
 8410 00ba 01       		.byte	0x1
 8411 00bb 49       		.uleb128 0x49
 8412 00bc 13       		.uleb128 0x13
 8413 00bd 01       		.uleb128 0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 252


 8414 00be 13       		.uleb128 0x13
 8415 00bf 00       		.byte	0
 8416 00c0 00       		.byte	0
 8417 00c1 12       		.uleb128 0x12
 8418 00c2 21       		.uleb128 0x21
 8419 00c3 00       		.byte	0
 8420 00c4 49       		.uleb128 0x49
 8421 00c5 13       		.uleb128 0x13
 8422 00c6 2F       		.uleb128 0x2f
 8423 00c7 0B       		.uleb128 0xb
 8424 00c8 00       		.byte	0
 8425 00c9 00       		.byte	0
 8426 00ca 13       		.uleb128 0x13
 8427 00cb 16       		.uleb128 0x16
 8428 00cc 00       		.byte	0
 8429 00cd 03       		.uleb128 0x3
 8430 00ce 0E       		.uleb128 0xe
 8431 00cf 3A       		.uleb128 0x3a
 8432 00d0 0B       		.uleb128 0xb
 8433 00d1 3B       		.uleb128 0x3b
 8434 00d2 05       		.uleb128 0x5
 8435 00d3 49       		.uleb128 0x49
 8436 00d4 13       		.uleb128 0x13
 8437 00d5 00       		.byte	0
 8438 00d6 00       		.byte	0
 8439 00d7 14       		.uleb128 0x14
 8440 00d8 2E       		.uleb128 0x2e
 8441 00d9 01       		.byte	0x1
 8442 00da 03       		.uleb128 0x3
 8443 00db 0E       		.uleb128 0xe
 8444 00dc 3A       		.uleb128 0x3a
 8445 00dd 0B       		.uleb128 0xb
 8446 00de 3B       		.uleb128 0x3b
 8447 00df 0B       		.uleb128 0xb
 8448 00e0 27       		.uleb128 0x27
 8449 00e1 19       		.uleb128 0x19
 8450 00e2 49       		.uleb128 0x49
 8451 00e3 13       		.uleb128 0x13
 8452 00e4 20       		.uleb128 0x20
 8453 00e5 0B       		.uleb128 0xb
 8454 00e6 01       		.uleb128 0x1
 8455 00e7 13       		.uleb128 0x13
 8456 00e8 00       		.byte	0
 8457 00e9 00       		.byte	0
 8458 00ea 15       		.uleb128 0x15
 8459 00eb 34       		.uleb128 0x34
 8460 00ec 00       		.byte	0
 8461 00ed 03       		.uleb128 0x3
 8462 00ee 0E       		.uleb128 0xe
 8463 00ef 3A       		.uleb128 0x3a
 8464 00f0 0B       		.uleb128 0xb
 8465 00f1 3B       		.uleb128 0x3b
 8466 00f2 0B       		.uleb128 0xb
 8467 00f3 49       		.uleb128 0x49
 8468 00f4 13       		.uleb128 0x13
 8469 00f5 00       		.byte	0
 8470 00f6 00       		.byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 253


 8471 00f7 16       		.uleb128 0x16
 8472 00f8 2E       		.uleb128 0x2e
 8473 00f9 01       		.byte	0x1
 8474 00fa 03       		.uleb128 0x3
 8475 00fb 0E       		.uleb128 0xe
 8476 00fc 3A       		.uleb128 0x3a
 8477 00fd 0B       		.uleb128 0xb
 8478 00fe 3B       		.uleb128 0x3b
 8479 00ff 0B       		.uleb128 0xb
 8480 0100 27       		.uleb128 0x27
 8481 0101 19       		.uleb128 0x19
 8482 0102 20       		.uleb128 0x20
 8483 0103 0B       		.uleb128 0xb
 8484 0104 01       		.uleb128 0x1
 8485 0105 13       		.uleb128 0x13
 8486 0106 00       		.byte	0
 8487 0107 00       		.byte	0
 8488 0108 17       		.uleb128 0x17
 8489 0109 05       		.uleb128 0x5
 8490 010a 00       		.byte	0
 8491 010b 03       		.uleb128 0x3
 8492 010c 0E       		.uleb128 0xe
 8493 010d 3A       		.uleb128 0x3a
 8494 010e 0B       		.uleb128 0xb
 8495 010f 3B       		.uleb128 0x3b
 8496 0110 0B       		.uleb128 0xb
 8497 0111 49       		.uleb128 0x49
 8498 0112 13       		.uleb128 0x13
 8499 0113 00       		.byte	0
 8500 0114 00       		.byte	0
 8501 0115 18       		.uleb128 0x18
 8502 0116 2E       		.uleb128 0x2e
 8503 0117 01       		.byte	0x1
 8504 0118 03       		.uleb128 0x3
 8505 0119 0E       		.uleb128 0xe
 8506 011a 3A       		.uleb128 0x3a
 8507 011b 0B       		.uleb128 0xb
 8508 011c 3B       		.uleb128 0x3b
 8509 011d 05       		.uleb128 0x5
 8510 011e 27       		.uleb128 0x27
 8511 011f 19       		.uleb128 0x19
 8512 0120 49       		.uleb128 0x49
 8513 0121 13       		.uleb128 0x13
 8514 0122 11       		.uleb128 0x11
 8515 0123 01       		.uleb128 0x1
 8516 0124 12       		.uleb128 0x12
 8517 0125 06       		.uleb128 0x6
 8518 0126 40       		.uleb128 0x40
 8519 0127 18       		.uleb128 0x18
 8520 0128 9742     		.uleb128 0x2117
 8521 012a 19       		.uleb128 0x19
 8522 012b 01       		.uleb128 0x1
 8523 012c 13       		.uleb128 0x13
 8524 012d 00       		.byte	0
 8525 012e 00       		.byte	0
 8526 012f 19       		.uleb128 0x19
 8527 0130 05       		.uleb128 0x5
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 254


 8528 0131 00       		.byte	0
 8529 0132 03       		.uleb128 0x3
 8530 0133 0E       		.uleb128 0xe
 8531 0134 3A       		.uleb128 0x3a
 8532 0135 0B       		.uleb128 0xb
 8533 0136 3B       		.uleb128 0x3b
 8534 0137 05       		.uleb128 0x5
 8535 0138 49       		.uleb128 0x49
 8536 0139 13       		.uleb128 0x13
 8537 013a 02       		.uleb128 0x2
 8538 013b 17       		.uleb128 0x17
 8539 013c 00       		.byte	0
 8540 013d 00       		.byte	0
 8541 013e 1A       		.uleb128 0x1a
 8542 013f 34       		.uleb128 0x34
 8543 0140 00       		.byte	0
 8544 0141 03       		.uleb128 0x3
 8545 0142 0E       		.uleb128 0xe
 8546 0143 3A       		.uleb128 0x3a
 8547 0144 0B       		.uleb128 0xb
 8548 0145 3B       		.uleb128 0x3b
 8549 0146 05       		.uleb128 0x5
 8550 0147 49       		.uleb128 0x49
 8551 0148 13       		.uleb128 0x13
 8552 0149 02       		.uleb128 0x2
 8553 014a 17       		.uleb128 0x17
 8554 014b 00       		.byte	0
 8555 014c 00       		.byte	0
 8556 014d 1B       		.uleb128 0x1b
 8557 014e 2E       		.uleb128 0x2e
 8558 014f 01       		.byte	0x1
 8559 0150 03       		.uleb128 0x3
 8560 0151 0E       		.uleb128 0xe
 8561 0152 3A       		.uleb128 0x3a
 8562 0153 0B       		.uleb128 0xb
 8563 0154 3B       		.uleb128 0x3b
 8564 0155 05       		.uleb128 0x5
 8565 0156 27       		.uleb128 0x27
 8566 0157 19       		.uleb128 0x19
 8567 0158 11       		.uleb128 0x11
 8568 0159 01       		.uleb128 0x1
 8569 015a 12       		.uleb128 0x12
 8570 015b 06       		.uleb128 0x6
 8571 015c 40       		.uleb128 0x40
 8572 015d 18       		.uleb128 0x18
 8573 015e 9742     		.uleb128 0x2117
 8574 0160 19       		.uleb128 0x19
 8575 0161 01       		.uleb128 0x1
 8576 0162 13       		.uleb128 0x13
 8577 0163 00       		.byte	0
 8578 0164 00       		.byte	0
 8579 0165 1C       		.uleb128 0x1c
 8580 0166 898201   		.uleb128 0x4109
 8581 0169 00       		.byte	0
 8582 016a 11       		.uleb128 0x11
 8583 016b 01       		.uleb128 0x1
 8584 016c 31       		.uleb128 0x31
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 255


 8585 016d 13       		.uleb128 0x13
 8586 016e 00       		.byte	0
 8587 016f 00       		.byte	0
 8588 0170 1D       		.uleb128 0x1d
 8589 0171 898201   		.uleb128 0x4109
 8590 0174 01       		.byte	0x1
 8591 0175 11       		.uleb128 0x11
 8592 0176 01       		.uleb128 0x1
 8593 0177 31       		.uleb128 0x31
 8594 0178 13       		.uleb128 0x13
 8595 0179 00       		.byte	0
 8596 017a 00       		.byte	0
 8597 017b 1E       		.uleb128 0x1e
 8598 017c 8A8201   		.uleb128 0x410a
 8599 017f 00       		.byte	0
 8600 0180 02       		.uleb128 0x2
 8601 0181 18       		.uleb128 0x18
 8602 0182 9142     		.uleb128 0x2111
 8603 0184 18       		.uleb128 0x18
 8604 0185 00       		.byte	0
 8605 0186 00       		.byte	0
 8606 0187 1F       		.uleb128 0x1f
 8607 0188 05       		.uleb128 0x5
 8608 0189 00       		.byte	0
 8609 018a 03       		.uleb128 0x3
 8610 018b 0E       		.uleb128 0xe
 8611 018c 3A       		.uleb128 0x3a
 8612 018d 0B       		.uleb128 0xb
 8613 018e 3B       		.uleb128 0x3b
 8614 018f 05       		.uleb128 0x5
 8615 0190 49       		.uleb128 0x49
 8616 0191 13       		.uleb128 0x13
 8617 0192 02       		.uleb128 0x2
 8618 0193 18       		.uleb128 0x18
 8619 0194 00       		.byte	0
 8620 0195 00       		.byte	0
 8621 0196 20       		.uleb128 0x20
 8622 0197 34       		.uleb128 0x34
 8623 0198 00       		.byte	0
 8624 0199 03       		.uleb128 0x3
 8625 019a 0E       		.uleb128 0xe
 8626 019b 3A       		.uleb128 0x3a
 8627 019c 0B       		.uleb128 0xb
 8628 019d 3B       		.uleb128 0x3b
 8629 019e 05       		.uleb128 0x5
 8630 019f 49       		.uleb128 0x49
 8631 01a0 13       		.uleb128 0x13
 8632 01a1 02       		.uleb128 0x2
 8633 01a2 18       		.uleb128 0x18
 8634 01a3 00       		.byte	0
 8635 01a4 00       		.byte	0
 8636 01a5 21       		.uleb128 0x21
 8637 01a6 34       		.uleb128 0x34
 8638 01a7 00       		.byte	0
 8639 01a8 03       		.uleb128 0x3
 8640 01a9 08       		.uleb128 0x8
 8641 01aa 3A       		.uleb128 0x3a
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 256


 8642 01ab 0B       		.uleb128 0xb
 8643 01ac 3B       		.uleb128 0x3b
 8644 01ad 05       		.uleb128 0x5
 8645 01ae 49       		.uleb128 0x49
 8646 01af 13       		.uleb128 0x13
 8647 01b0 02       		.uleb128 0x2
 8648 01b1 17       		.uleb128 0x17
 8649 01b2 00       		.byte	0
 8650 01b3 00       		.byte	0
 8651 01b4 22       		.uleb128 0x22
 8652 01b5 898201   		.uleb128 0x4109
 8653 01b8 01       		.byte	0x1
 8654 01b9 11       		.uleb128 0x11
 8655 01ba 01       		.uleb128 0x1
 8656 01bb 31       		.uleb128 0x31
 8657 01bc 13       		.uleb128 0x13
 8658 01bd 01       		.uleb128 0x1
 8659 01be 13       		.uleb128 0x13
 8660 01bf 00       		.byte	0
 8661 01c0 00       		.byte	0
 8662 01c1 23       		.uleb128 0x23
 8663 01c2 0B       		.uleb128 0xb
 8664 01c3 01       		.byte	0x1
 8665 01c4 11       		.uleb128 0x11
 8666 01c5 01       		.uleb128 0x1
 8667 01c6 12       		.uleb128 0x12
 8668 01c7 06       		.uleb128 0x6
 8669 01c8 00       		.byte	0
 8670 01c9 00       		.byte	0
 8671 01ca 24       		.uleb128 0x24
 8672 01cb 2E       		.uleb128 0x2e
 8673 01cc 01       		.byte	0x1
 8674 01cd 03       		.uleb128 0x3
 8675 01ce 0E       		.uleb128 0xe
 8676 01cf 3A       		.uleb128 0x3a
 8677 01d0 0B       		.uleb128 0xb
 8678 01d1 3B       		.uleb128 0x3b
 8679 01d2 05       		.uleb128 0x5
 8680 01d3 27       		.uleb128 0x27
 8681 01d4 19       		.uleb128 0x19
 8682 01d5 8701     		.uleb128 0x87
 8683 01d7 19       		.uleb128 0x19
 8684 01d8 11       		.uleb128 0x11
 8685 01d9 01       		.uleb128 0x1
 8686 01da 12       		.uleb128 0x12
 8687 01db 06       		.uleb128 0x6
 8688 01dc 40       		.uleb128 0x40
 8689 01dd 18       		.uleb128 0x18
 8690 01de 9742     		.uleb128 0x2117
 8691 01e0 19       		.uleb128 0x19
 8692 01e1 01       		.uleb128 0x1
 8693 01e2 13       		.uleb128 0x13
 8694 01e3 00       		.byte	0
 8695 01e4 00       		.byte	0
 8696 01e5 25       		.uleb128 0x25
 8697 01e6 2E       		.uleb128 0x2e
 8698 01e7 01       		.byte	0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 257


 8699 01e8 3F       		.uleb128 0x3f
 8700 01e9 19       		.uleb128 0x19
 8701 01ea 03       		.uleb128 0x3
 8702 01eb 0E       		.uleb128 0xe
 8703 01ec 3A       		.uleb128 0x3a
 8704 01ed 0B       		.uleb128 0xb
 8705 01ee 3B       		.uleb128 0x3b
 8706 01ef 05       		.uleb128 0x5
 8707 01f0 27       		.uleb128 0x27
 8708 01f1 19       		.uleb128 0x19
 8709 01f2 49       		.uleb128 0x49
 8710 01f3 13       		.uleb128 0x13
 8711 01f4 11       		.uleb128 0x11
 8712 01f5 01       		.uleb128 0x1
 8713 01f6 12       		.uleb128 0x12
 8714 01f7 06       		.uleb128 0x6
 8715 01f8 40       		.uleb128 0x40
 8716 01f9 18       		.uleb128 0x18
 8717 01fa 9742     		.uleb128 0x2117
 8718 01fc 19       		.uleb128 0x19
 8719 01fd 01       		.uleb128 0x1
 8720 01fe 13       		.uleb128 0x13
 8721 01ff 00       		.byte	0
 8722 0200 00       		.byte	0
 8723 0201 26       		.uleb128 0x26
 8724 0202 0B       		.uleb128 0xb
 8725 0203 01       		.byte	0x1
 8726 0204 11       		.uleb128 0x11
 8727 0205 01       		.uleb128 0x1
 8728 0206 12       		.uleb128 0x12
 8729 0207 06       		.uleb128 0x6
 8730 0208 01       		.uleb128 0x1
 8731 0209 13       		.uleb128 0x13
 8732 020a 00       		.byte	0
 8733 020b 00       		.byte	0
 8734 020c 27       		.uleb128 0x27
 8735 020d 2E       		.uleb128 0x2e
 8736 020e 01       		.byte	0x1
 8737 020f 3F       		.uleb128 0x3f
 8738 0210 19       		.uleb128 0x19
 8739 0211 03       		.uleb128 0x3
 8740 0212 0E       		.uleb128 0xe
 8741 0213 3A       		.uleb128 0x3a
 8742 0214 0B       		.uleb128 0xb
 8743 0215 3B       		.uleb128 0x3b
 8744 0216 05       		.uleb128 0x5
 8745 0217 27       		.uleb128 0x27
 8746 0218 19       		.uleb128 0x19
 8747 0219 11       		.uleb128 0x11
 8748 021a 01       		.uleb128 0x1
 8749 021b 12       		.uleb128 0x12
 8750 021c 06       		.uleb128 0x6
 8751 021d 40       		.uleb128 0x40
 8752 021e 18       		.uleb128 0x18
 8753 021f 9742     		.uleb128 0x2117
 8754 0221 19       		.uleb128 0x19
 8755 0222 01       		.uleb128 0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 258


 8756 0223 13       		.uleb128 0x13
 8757 0224 00       		.byte	0
 8758 0225 00       		.byte	0
 8759 0226 28       		.uleb128 0x28
 8760 0227 34       		.uleb128 0x34
 8761 0228 00       		.byte	0
 8762 0229 03       		.uleb128 0x3
 8763 022a 0E       		.uleb128 0xe
 8764 022b 3A       		.uleb128 0x3a
 8765 022c 0B       		.uleb128 0xb
 8766 022d 3B       		.uleb128 0x3b
 8767 022e 05       		.uleb128 0x5
 8768 022f 49       		.uleb128 0x49
 8769 0230 13       		.uleb128 0x13
 8770 0231 00       		.byte	0
 8771 0232 00       		.byte	0
 8772 0233 29       		.uleb128 0x29
 8773 0234 1D       		.uleb128 0x1d
 8774 0235 01       		.byte	0x1
 8775 0236 31       		.uleb128 0x31
 8776 0237 13       		.uleb128 0x13
 8777 0238 11       		.uleb128 0x11
 8778 0239 01       		.uleb128 0x1
 8779 023a 12       		.uleb128 0x12
 8780 023b 06       		.uleb128 0x6
 8781 023c 58       		.uleb128 0x58
 8782 023d 0B       		.uleb128 0xb
 8783 023e 59       		.uleb128 0x59
 8784 023f 05       		.uleb128 0x5
 8785 0240 01       		.uleb128 0x1
 8786 0241 13       		.uleb128 0x13
 8787 0242 00       		.byte	0
 8788 0243 00       		.byte	0
 8789 0244 2A       		.uleb128 0x2a
 8790 0245 34       		.uleb128 0x34
 8791 0246 00       		.byte	0
 8792 0247 31       		.uleb128 0x31
 8793 0248 13       		.uleb128 0x13
 8794 0249 00       		.byte	0
 8795 024a 00       		.byte	0
 8796 024b 2B       		.uleb128 0x2b
 8797 024c 1D       		.uleb128 0x1d
 8798 024d 01       		.byte	0x1
 8799 024e 31       		.uleb128 0x31
 8800 024f 13       		.uleb128 0x13
 8801 0250 11       		.uleb128 0x11
 8802 0251 01       		.uleb128 0x1
 8803 0252 12       		.uleb128 0x12
 8804 0253 06       		.uleb128 0x6
 8805 0254 58       		.uleb128 0x58
 8806 0255 0B       		.uleb128 0xb
 8807 0256 59       		.uleb128 0x59
 8808 0257 05       		.uleb128 0x5
 8809 0258 00       		.byte	0
 8810 0259 00       		.byte	0
 8811 025a 2C       		.uleb128 0x2c
 8812 025b 05       		.uleb128 0x5
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 259


 8813 025c 00       		.byte	0
 8814 025d 31       		.uleb128 0x31
 8815 025e 13       		.uleb128 0x13
 8816 025f 02       		.uleb128 0x2
 8817 0260 17       		.uleb128 0x17
 8818 0261 00       		.byte	0
 8819 0262 00       		.byte	0
 8820 0263 2D       		.uleb128 0x2d
 8821 0264 2E       		.uleb128 0x2e
 8822 0265 00       		.byte	0
 8823 0266 3F       		.uleb128 0x3f
 8824 0267 19       		.uleb128 0x19
 8825 0268 03       		.uleb128 0x3
 8826 0269 0E       		.uleb128 0xe
 8827 026a 3A       		.uleb128 0x3a
 8828 026b 0B       		.uleb128 0xb
 8829 026c 3B       		.uleb128 0x3b
 8830 026d 05       		.uleb128 0x5
 8831 026e 27       		.uleb128 0x27
 8832 026f 19       		.uleb128 0x19
 8833 0270 11       		.uleb128 0x11
 8834 0271 01       		.uleb128 0x1
 8835 0272 12       		.uleb128 0x12
 8836 0273 06       		.uleb128 0x6
 8837 0274 40       		.uleb128 0x40
 8838 0275 18       		.uleb128 0x18
 8839 0276 9742     		.uleb128 0x2117
 8840 0278 19       		.uleb128 0x19
 8841 0279 00       		.byte	0
 8842 027a 00       		.byte	0
 8843 027b 2E       		.uleb128 0x2e
 8844 027c 34       		.uleb128 0x34
 8845 027d 00       		.byte	0
 8846 027e 03       		.uleb128 0x3
 8847 027f 0E       		.uleb128 0xe
 8848 0280 3A       		.uleb128 0x3a
 8849 0281 0B       		.uleb128 0xb
 8850 0282 3B       		.uleb128 0x3b
 8851 0283 05       		.uleb128 0x5
 8852 0284 49       		.uleb128 0x49
 8853 0285 13       		.uleb128 0x13
 8854 0286 1C       		.uleb128 0x1c
 8855 0287 0B       		.uleb128 0xb
 8856 0288 00       		.byte	0
 8857 0289 00       		.byte	0
 8858 028a 2F       		.uleb128 0x2f
 8859 028b 2E       		.uleb128 0x2e
 8860 028c 00       		.byte	0
 8861 028d 3F       		.uleb128 0x3f
 8862 028e 19       		.uleb128 0x19
 8863 028f 03       		.uleb128 0x3
 8864 0290 0E       		.uleb128 0xe
 8865 0291 3A       		.uleb128 0x3a
 8866 0292 0B       		.uleb128 0xb
 8867 0293 3B       		.uleb128 0x3b
 8868 0294 05       		.uleb128 0x5
 8869 0295 27       		.uleb128 0x27
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 260


 8870 0296 19       		.uleb128 0x19
 8871 0297 49       		.uleb128 0x49
 8872 0298 13       		.uleb128 0x13
 8873 0299 11       		.uleb128 0x11
 8874 029a 01       		.uleb128 0x1
 8875 029b 12       		.uleb128 0x12
 8876 029c 06       		.uleb128 0x6
 8877 029d 40       		.uleb128 0x40
 8878 029e 18       		.uleb128 0x18
 8879 029f 9742     		.uleb128 0x2117
 8880 02a1 19       		.uleb128 0x19
 8881 02a2 00       		.byte	0
 8882 02a3 00       		.byte	0
 8883 02a4 30       		.uleb128 0x30
 8884 02a5 0B       		.uleb128 0xb
 8885 02a6 01       		.byte	0x1
 8886 02a7 55       		.uleb128 0x55
 8887 02a8 17       		.uleb128 0x17
 8888 02a9 00       		.byte	0
 8889 02aa 00       		.byte	0
 8890 02ab 31       		.uleb128 0x31
 8891 02ac 0B       		.uleb128 0xb
 8892 02ad 01       		.byte	0x1
 8893 02ae 55       		.uleb128 0x55
 8894 02af 17       		.uleb128 0x17
 8895 02b0 01       		.uleb128 0x1
 8896 02b1 13       		.uleb128 0x13
 8897 02b2 00       		.byte	0
 8898 02b3 00       		.byte	0
 8899 02b4 32       		.uleb128 0x32
 8900 02b5 34       		.uleb128 0x34
 8901 02b6 00       		.byte	0
 8902 02b7 31       		.uleb128 0x31
 8903 02b8 13       		.uleb128 0x13
 8904 02b9 02       		.uleb128 0x2
 8905 02ba 18       		.uleb128 0x18
 8906 02bb 00       		.byte	0
 8907 02bc 00       		.byte	0
 8908 02bd 33       		.uleb128 0x33
 8909 02be 34       		.uleb128 0x34
 8910 02bf 00       		.byte	0
 8911 02c0 03       		.uleb128 0x3
 8912 02c1 0E       		.uleb128 0xe
 8913 02c2 3A       		.uleb128 0x3a
 8914 02c3 0B       		.uleb128 0xb
 8915 02c4 3B       		.uleb128 0x3b
 8916 02c5 05       		.uleb128 0x5
 8917 02c6 49       		.uleb128 0x49
 8918 02c7 13       		.uleb128 0x13
 8919 02c8 3F       		.uleb128 0x3f
 8920 02c9 19       		.uleb128 0x19
 8921 02ca 02       		.uleb128 0x2
 8922 02cb 18       		.uleb128 0x18
 8923 02cc 00       		.byte	0
 8924 02cd 00       		.byte	0
 8925 02ce 34       		.uleb128 0x34
 8926 02cf 2E       		.uleb128 0x2e
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 261


 8927 02d0 00       		.byte	0
 8928 02d1 3F       		.uleb128 0x3f
 8929 02d2 19       		.uleb128 0x19
 8930 02d3 3C       		.uleb128 0x3c
 8931 02d4 19       		.uleb128 0x19
 8932 02d5 6E       		.uleb128 0x6e
 8933 02d6 0E       		.uleb128 0xe
 8934 02d7 03       		.uleb128 0x3
 8935 02d8 0E       		.uleb128 0xe
 8936 02d9 3A       		.uleb128 0x3a
 8937 02da 0B       		.uleb128 0xb
 8938 02db 3B       		.uleb128 0x3b
 8939 02dc 0B       		.uleb128 0xb
 8940 02dd 00       		.byte	0
 8941 02de 00       		.byte	0
 8942 02df 35       		.uleb128 0x35
 8943 02e0 2E       		.uleb128 0x2e
 8944 02e1 00       		.byte	0
 8945 02e2 3F       		.uleb128 0x3f
 8946 02e3 19       		.uleb128 0x19
 8947 02e4 3C       		.uleb128 0x3c
 8948 02e5 19       		.uleb128 0x19
 8949 02e6 6E       		.uleb128 0x6e
 8950 02e7 0E       		.uleb128 0xe
 8951 02e8 03       		.uleb128 0x3
 8952 02e9 0E       		.uleb128 0xe
 8953 02ea 3A       		.uleb128 0x3a
 8954 02eb 0B       		.uleb128 0xb
 8955 02ec 3B       		.uleb128 0x3b
 8956 02ed 05       		.uleb128 0x5
 8957 02ee 00       		.byte	0
 8958 02ef 00       		.byte	0
 8959 02f0 00       		.byte	0
 8960              		.section	.debug_loc,"",%progbits
 8961              	.Ldebug_loc0:
 8962              	.LLST0:
 8963 0000 00000000 		.4byte	.LVL0
 8964 0004 14000000 		.4byte	.LVL1
 8965 0008 0100     		.2byte	0x1
 8966 000a 50       		.byte	0x50
 8967 000b 14000000 		.4byte	.LVL1
 8968 000f 16000000 		.4byte	.LVL2
 8969 0013 0400     		.2byte	0x4
 8970 0015 F3       		.byte	0xf3
 8971 0016 01       		.uleb128 0x1
 8972 0017 50       		.byte	0x50
 8973 0018 9F       		.byte	0x9f
 8974 0019 16000000 		.4byte	.LVL2
 8975 001d 18000000 		.4byte	.LVL3
 8976 0021 0100     		.2byte	0x1
 8977 0023 50       		.byte	0x50
 8978 0024 18000000 		.4byte	.LVL3
 8979 0028 1A000000 		.4byte	.LVL4
 8980 002c 0400     		.2byte	0x4
 8981 002e F3       		.byte	0xf3
 8982 002f 01       		.uleb128 0x1
 8983 0030 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 262


 8984 0031 9F       		.byte	0x9f
 8985 0032 1A000000 		.4byte	.LVL4
 8986 0036 1C000000 		.4byte	.LVL5
 8987 003a 0100     		.2byte	0x1
 8988 003c 50       		.byte	0x50
 8989 003d 1C000000 		.4byte	.LVL5
 8990 0041 1E000000 		.4byte	.LVL6
 8991 0045 0400     		.2byte	0x4
 8992 0047 F3       		.byte	0xf3
 8993 0048 01       		.uleb128 0x1
 8994 0049 50       		.byte	0x50
 8995 004a 9F       		.byte	0x9f
 8996 004b 1E000000 		.4byte	.LVL6
 8997 004f 20000000 		.4byte	.LVL7
 8998 0053 0100     		.2byte	0x1
 8999 0055 50       		.byte	0x50
 9000 0056 20000000 		.4byte	.LVL7
 9001 005a 2C000000 		.4byte	.LFE16
 9002 005e 0400     		.2byte	0x4
 9003 0060 F3       		.byte	0xf3
 9004 0061 01       		.uleb128 0x1
 9005 0062 50       		.byte	0x50
 9006 0063 9F       		.byte	0x9f
 9007 0064 00000000 		.4byte	0
 9008 0068 00000000 		.4byte	0
 9009              	.LLST1:
 9010 006c 00000000 		.4byte	.LVL0
 9011 0070 20000000 		.4byte	.LVL7
 9012 0074 0200     		.2byte	0x2
 9013 0076 30       		.byte	0x30
 9014 0077 9F       		.byte	0x9f
 9015 0078 20000000 		.4byte	.LVL7
 9016 007c 2C000000 		.4byte	.LFE16
 9017 0080 0100     		.2byte	0x1
 9018 0082 50       		.byte	0x50
 9019 0083 00000000 		.4byte	0
 9020 0087 00000000 		.4byte	0
 9021              	.LLST2:
 9022 008b 00000000 		.4byte	.LVL0
 9023 008f 14000000 		.4byte	.LVL1
 9024 0093 0100     		.2byte	0x1
 9025 0095 50       		.byte	0x50
 9026 0096 14000000 		.4byte	.LVL1
 9027 009a 16000000 		.4byte	.LVL2
 9028 009e 0400     		.2byte	0x4
 9029 00a0 F3       		.byte	0xf3
 9030 00a1 01       		.uleb128 0x1
 9031 00a2 50       		.byte	0x50
 9032 00a3 9F       		.byte	0x9f
 9033 00a4 16000000 		.4byte	.LVL2
 9034 00a8 18000000 		.4byte	.LVL3
 9035 00ac 0100     		.2byte	0x1
 9036 00ae 50       		.byte	0x50
 9037 00af 18000000 		.4byte	.LVL3
 9038 00b3 1A000000 		.4byte	.LVL4
 9039 00b7 0400     		.2byte	0x4
 9040 00b9 F3       		.byte	0xf3
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 263


 9041 00ba 01       		.uleb128 0x1
 9042 00bb 50       		.byte	0x50
 9043 00bc 9F       		.byte	0x9f
 9044 00bd 1A000000 		.4byte	.LVL4
 9045 00c1 1C000000 		.4byte	.LVL5
 9046 00c5 0100     		.2byte	0x1
 9047 00c7 50       		.byte	0x50
 9048 00c8 1C000000 		.4byte	.LVL5
 9049 00cc 1E000000 		.4byte	.LVL6
 9050 00d0 0400     		.2byte	0x4
 9051 00d2 F3       		.byte	0xf3
 9052 00d3 01       		.uleb128 0x1
 9053 00d4 50       		.byte	0x50
 9054 00d5 9F       		.byte	0x9f
 9055 00d6 1E000000 		.4byte	.LVL6
 9056 00da 20000000 		.4byte	.LVL7
 9057 00de 0100     		.2byte	0x1
 9058 00e0 50       		.byte	0x50
 9059 00e1 20000000 		.4byte	.LVL7
 9060 00e5 2C000000 		.4byte	.LFE16
 9061 00e9 0400     		.2byte	0x4
 9062 00eb F3       		.byte	0xf3
 9063 00ec 01       		.uleb128 0x1
 9064 00ed 50       		.byte	0x50
 9065 00ee 9F       		.byte	0x9f
 9066 00ef 00000000 		.4byte	0
 9067 00f3 00000000 		.4byte	0
 9068              	.LLST3:
 9069 00f7 00000000 		.4byte	.LVL8
 9070 00fb 06000000 		.4byte	.LVL10
 9071 00ff 0100     		.2byte	0x1
 9072 0101 50       		.byte	0x50
 9073 0102 06000000 		.4byte	.LVL10
 9074 0106 12000000 		.4byte	.LVL13
 9075 010a 0100     		.2byte	0x1
 9076 010c 50       		.byte	0x50
 9077 010d 00000000 		.4byte	0
 9078 0111 00000000 		.4byte	0
 9079              	.LLST4:
 9080 0115 00000000 		.4byte	.LVL8
 9081 0119 04000000 		.4byte	.LVL9
 9082 011d 0200     		.2byte	0x2
 9083 011f 30       		.byte	0x30
 9084 0120 9F       		.byte	0x9f
 9085 0121 04000000 		.4byte	.LVL9
 9086 0125 0E000000 		.4byte	.LVL12
 9087 0129 0100     		.2byte	0x1
 9088 012b 53       		.byte	0x53
 9089 012c 0E000000 		.4byte	.LVL12
 9090 0130 14000000 		.4byte	.LFE41
 9091 0134 0500     		.2byte	0x5
 9092 0136 73       		.byte	0x73
 9093 0137 00       		.sleb128 0
 9094 0138 32       		.byte	0x32
 9095 0139 25       		.byte	0x25
 9096 013a 9F       		.byte	0x9f
 9097 013b 00000000 		.4byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 264


 9098 013f 00000000 		.4byte	0
 9099              	.LLST5:
 9100 0143 1A000000 		.4byte	.LVL14
 9101 0147 1C000000 		.4byte	.LVL15
 9102 014b 0100     		.2byte	0x1
 9103 014d 52       		.byte	0x52
 9104 014e 00000000 		.4byte	0
 9105 0152 00000000 		.4byte	0
 9106              	.LLST6:
 9107 0156 00000000 		.4byte	.LVL16
 9108 015a 06000000 		.4byte	.LVL17
 9109 015e 0100     		.2byte	0x1
 9110 0160 50       		.byte	0x50
 9111 0161 06000000 		.4byte	.LVL17
 9112 0165 12000000 		.4byte	.LFE43
 9113 0169 0100     		.2byte	0x1
 9114 016b 54       		.byte	0x54
 9115 016c 00000000 		.4byte	0
 9116 0170 00000000 		.4byte	0
 9117              	.LLST7:
 9118 0174 00000000 		.4byte	.LVL20
 9119 0178 1A000000 		.4byte	.LVL23
 9120 017c 0100     		.2byte	0x1
 9121 017e 50       		.byte	0x50
 9122 017f 1A000000 		.4byte	.LVL23
 9123 0183 90000000 		.4byte	.LFE6
 9124 0187 0100     		.2byte	0x1
 9125 0189 59       		.byte	0x59
 9126 018a 00000000 		.4byte	0
 9127 018e 00000000 		.4byte	0
 9128              	.LLST8:
 9129 0192 00000000 		.4byte	.LVL20
 9130 0196 18000000 		.4byte	.LVL22
 9131 019a 0100     		.2byte	0x1
 9132 019c 51       		.byte	0x51
 9133 019d 18000000 		.4byte	.LVL22
 9134 01a1 56000000 		.4byte	.LVL31
 9135 01a5 0100     		.2byte	0x1
 9136 01a7 55       		.byte	0x55
 9137 01a8 56000000 		.4byte	.LVL31
 9138 01ac 90000000 		.4byte	.LFE6
 9139 01b0 0400     		.2byte	0x4
 9140 01b2 F3       		.byte	0xf3
 9141 01b3 01       		.uleb128 0x1
 9142 01b4 51       		.byte	0x51
 9143 01b5 9F       		.byte	0x9f
 9144 01b6 00000000 		.4byte	0
 9145 01ba 00000000 		.4byte	0
 9146              	.LLST9:
 9147 01be 00000000 		.4byte	.LVL20
 9148 01c2 16000000 		.4byte	.LVL21
 9149 01c6 0100     		.2byte	0x1
 9150 01c8 52       		.byte	0x52
 9151 01c9 16000000 		.4byte	.LVL21
 9152 01cd 2A000000 		.4byte	.LVL25
 9153 01d1 0100     		.2byte	0x1
 9154 01d3 57       		.byte	0x57
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 265


 9155 01d4 2A000000 		.4byte	.LVL25
 9156 01d8 32000000 		.4byte	.LVL27
 9157 01dc 0700     		.2byte	0x7
 9158 01de 72       		.byte	0x72
 9159 01df 81808080 		.sleb128 -1073741823
 9159      7C
 9160 01e4 9F       		.byte	0x9f
 9161 01e5 32000000 		.4byte	.LVL27
 9162 01e9 90000000 		.4byte	.LFE6
 9163 01ed 0400     		.2byte	0x4
 9164 01ef F3       		.byte	0xf3
 9165 01f0 01       		.uleb128 0x1
 9166 01f1 52       		.byte	0x52
 9167 01f2 9F       		.byte	0x9f
 9168 01f3 00000000 		.4byte	0
 9169 01f7 00000000 		.4byte	0
 9170              	.LLST10:
 9171 01fb 00000000 		.4byte	.LVL20
 9172 01ff 1D000000 		.4byte	.LVL24-1
 9173 0203 0100     		.2byte	0x1
 9174 0205 53       		.byte	0x53
 9175 0206 1D000000 		.4byte	.LVL24-1
 9176 020a 90000000 		.4byte	.LFE6
 9177 020e 0100     		.2byte	0x1
 9178 0210 5A       		.byte	0x5a
 9179 0211 00000000 		.4byte	0
 9180 0215 00000000 		.4byte	0
 9181              	.LLST11:
 9182 0219 00000000 		.4byte	.LVL20
 9183 021d 50000000 		.4byte	.LVL30
 9184 0221 0200     		.2byte	0x2
 9185 0223 91       		.byte	0x91
 9186 0224 00       		.sleb128 0
 9187 0225 50000000 		.4byte	.LVL30
 9188 0229 6C000000 		.4byte	.LVL34
 9189 022d 0100     		.2byte	0x1
 9190 022f 56       		.byte	0x56
 9191 0230 00000000 		.4byte	0
 9192 0234 00000000 		.4byte	0
 9193              	.LLST12:
 9194 0238 2E000000 		.4byte	.LVL26
 9195 023c 32000000 		.4byte	.LVL27
 9196 0240 0200     		.2byte	0x2
 9197 0242 30       		.byte	0x30
 9198 0243 9F       		.byte	0x9f
 9199 0244 32000000 		.4byte	.LVL27
 9200 0248 46000000 		.4byte	.LVL29
 9201 024c 0100     		.2byte	0x1
 9202 024e 53       		.byte	0x53
 9203 024f 00000000 		.4byte	0
 9204 0253 00000000 		.4byte	0
 9205              	.LLST13:
 9206 0257 02000000 		.4byte	.LVL36
 9207 025b 06000000 		.4byte	.LVL37
 9208 025f 0200     		.2byte	0x2
 9209 0261 30       		.byte	0x30
 9210 0262 9F       		.byte	0x9f
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 266


 9211 0263 06000000 		.4byte	.LVL37
 9212 0267 1C000000 		.4byte	.LVL40
 9213 026b 0100     		.2byte	0x1
 9214 026d 54       		.byte	0x54
 9215 026e 00000000 		.4byte	0
 9216 0272 00000000 		.4byte	0
 9217              	.LLST14:
 9218 0276 00000000 		.4byte	.LVL46
 9219 027a 07000000 		.4byte	.LVL47-1
 9220 027e 0100     		.2byte	0x1
 9221 0280 50       		.byte	0x50
 9222 0281 07000000 		.4byte	.LVL47-1
 9223 0285 A2000000 		.4byte	.LVL51
 9224 0289 0100     		.2byte	0x1
 9225 028b 55       		.byte	0x55
 9226 028c A2000000 		.4byte	.LVL51
 9227 0290 AC000000 		.4byte	.LFE7
 9228 0294 0400     		.2byte	0x4
 9229 0296 F3       		.byte	0xf3
 9230 0297 01       		.uleb128 0x1
 9231 0298 50       		.byte	0x50
 9232 0299 9F       		.byte	0x9f
 9233 029a 00000000 		.4byte	0
 9234 029e 00000000 		.4byte	0
 9235              	.LLST15:
 9236 02a2 10000000 		.4byte	.LVL53
 9237 02a6 34000000 		.4byte	.LVL56
 9238 02aa 0100     		.2byte	0x1
 9239 02ac 55       		.byte	0x55
 9240 02ad 00000000 		.4byte	0
 9241 02b1 00000000 		.4byte	0
 9242              	.LLST16:
 9243 02b5 00000000 		.4byte	.LVL57
 9244 02b9 02000000 		.4byte	.LVL58
 9245 02bd 0100     		.2byte	0x1
 9246 02bf 50       		.byte	0x50
 9247 02c0 02000000 		.4byte	.LVL58
 9248 02c4 08000000 		.4byte	.LFE38
 9249 02c8 0400     		.2byte	0x4
 9250 02ca F3       		.byte	0xf3
 9251 02cb 01       		.uleb128 0x1
 9252 02cc 50       		.byte	0x50
 9253 02cd 9F       		.byte	0x9f
 9254 02ce 00000000 		.4byte	0
 9255 02d2 00000000 		.4byte	0
 9256              	.LLST17:
 9257 02d6 00000000 		.4byte	.LVL60
 9258 02da 10000000 		.4byte	.LVL62
 9259 02de 0100     		.2byte	0x1
 9260 02e0 50       		.byte	0x50
 9261 02e1 10000000 		.4byte	.LVL62
 9262 02e5 4A000000 		.4byte	.LVL66
 9263 02e9 0100     		.2byte	0x1
 9264 02eb 54       		.byte	0x54
 9265 02ec 4A000000 		.4byte	.LVL66
 9266 02f0 84000000 		.4byte	.LFE58
 9267 02f4 0400     		.2byte	0x4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 267


 9268 02f6 F3       		.byte	0xf3
 9269 02f7 01       		.uleb128 0x1
 9270 02f8 50       		.byte	0x50
 9271 02f9 9F       		.byte	0x9f
 9272 02fa 00000000 		.4byte	0
 9273 02fe 00000000 		.4byte	0
 9274              	.LLST18:
 9275 0302 00000000 		.4byte	.LVL60
 9276 0306 15000000 		.4byte	.LVL63-1
 9277 030a 0100     		.2byte	0x1
 9278 030c 51       		.byte	0x51
 9279 030d 15000000 		.4byte	.LVL63-1
 9280 0311 80000000 		.4byte	.LVL71
 9281 0315 0100     		.2byte	0x1
 9282 0317 56       		.byte	0x56
 9283 0318 80000000 		.4byte	.LVL71
 9284 031c 84000000 		.4byte	.LFE58
 9285 0320 0400     		.2byte	0x4
 9286 0322 F3       		.byte	0xf3
 9287 0323 01       		.uleb128 0x1
 9288 0324 51       		.byte	0x51
 9289 0325 9F       		.byte	0x9f
 9290 0326 00000000 		.4byte	0
 9291 032a 00000000 		.4byte	0
 9292              	.LLST19:
 9293 032e 4A000000 		.4byte	.LVL66
 9294 0332 80000000 		.4byte	.LVL71
 9295 0336 0100     		.2byte	0x1
 9296 0338 54       		.byte	0x54
 9297 0339 00000000 		.4byte	0
 9298 033d 00000000 		.4byte	0
 9299              	.LLST20:
 9300 0341 0C000000 		.4byte	.LVL61
 9301 0345 6A000000 		.4byte	.LVL69
 9302 0349 0100     		.2byte	0x1
 9303 034b 55       		.byte	0x55
 9304 034c 00000000 		.4byte	0
 9305 0350 00000000 		.4byte	0
 9306              	.LLST21:
 9307 0354 00000000 		.4byte	.LVL72
 9308 0358 10000000 		.4byte	.LVL73
 9309 035c 0100     		.2byte	0x1
 9310 035e 50       		.byte	0x50
 9311 035f 10000000 		.4byte	.LVL73
 9312 0363 62000000 		.4byte	.LFE5
 9313 0367 0100     		.2byte	0x1
 9314 0369 56       		.byte	0x56
 9315 036a 00000000 		.4byte	0
 9316 036e 00000000 		.4byte	0
 9317              	.LLST22:
 9318 0372 00000000 		.4byte	.LVL72
 9319 0376 13000000 		.4byte	.LVL74-1
 9320 037a 0100     		.2byte	0x1
 9321 037c 51       		.byte	0x51
 9322 037d 13000000 		.4byte	.LVL74-1
 9323 0381 62000000 		.4byte	.LFE5
 9324 0385 0100     		.2byte	0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 268


 9325 0387 57       		.byte	0x57
 9326 0388 00000000 		.4byte	0
 9327 038c 00000000 		.4byte	0
 9328              	.LLST23:
 9329 0390 00000000 		.4byte	.LVL72
 9330 0394 13000000 		.4byte	.LVL74-1
 9331 0398 0100     		.2byte	0x1
 9332 039a 52       		.byte	0x52
 9333 039b 13000000 		.4byte	.LVL74-1
 9334 039f 62000000 		.4byte	.LFE5
 9335 03a3 0400     		.2byte	0x4
 9336 03a5 F3       		.byte	0xf3
 9337 03a6 01       		.uleb128 0x1
 9338 03a7 52       		.byte	0x52
 9339 03a8 9F       		.byte	0x9f
 9340 03a9 00000000 		.4byte	0
 9341 03ad 00000000 		.4byte	0
 9342              	.LLST24:
 9343 03b1 00000000 		.4byte	.LVL72
 9344 03b5 13000000 		.4byte	.LVL74-1
 9345 03b9 0100     		.2byte	0x1
 9346 03bb 53       		.byte	0x53
 9347 03bc 13000000 		.4byte	.LVL74-1
 9348 03c0 62000000 		.4byte	.LFE5
 9349 03c4 0100     		.2byte	0x1
 9350 03c6 58       		.byte	0x58
 9351 03c7 00000000 		.4byte	0
 9352 03cb 00000000 		.4byte	0
 9353              	.LLST25:
 9354 03cf 1E000000 		.4byte	.LVL76
 9355 03d3 2A000000 		.4byte	.LVL77
 9356 03d7 0100     		.2byte	0x1
 9357 03d9 50       		.byte	0x50
 9358 03da 2A000000 		.4byte	.LVL77
 9359 03de 30000000 		.4byte	.LVL79
 9360 03e2 0100     		.2byte	0x1
 9361 03e4 54       		.byte	0x54
 9362 03e5 32000000 		.4byte	.LVL80
 9363 03e9 62000000 		.4byte	.LFE5
 9364 03ed 0100     		.2byte	0x1
 9365 03ef 54       		.byte	0x54
 9366 03f0 00000000 		.4byte	0
 9367 03f4 00000000 		.4byte	0
 9368              	.LLST26:
 9369 03f8 54000000 		.4byte	.LVL82
 9370 03fc 58000000 		.4byte	.LVL83
 9371 0400 0200     		.2byte	0x2
 9372 0402 31       		.byte	0x31
 9373 0403 9F       		.byte	0x9f
 9374 0404 5C000000 		.4byte	.LVL84
 9375 0408 62000000 		.4byte	.LFE5
 9376 040c 0100     		.2byte	0x1
 9377 040e 50       		.byte	0x50
 9378 040f 00000000 		.4byte	0
 9379 0413 00000000 		.4byte	0
 9380              	.LLST27:
 9381 0417 14000000 		.4byte	.LVL74
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 269


 9382 041b 1A000000 		.4byte	.LVL75
 9383 041f 0100     		.2byte	0x1
 9384 0421 50       		.byte	0x50
 9385 0422 1A000000 		.4byte	.LVL75
 9386 0426 30000000 		.4byte	.LVL79
 9387 042a 0100     		.2byte	0x1
 9388 042c 59       		.byte	0x59
 9389 042d 30000000 		.4byte	.LVL79
 9390 0431 32000000 		.4byte	.LVL80
 9391 0435 0100     		.2byte	0x1
 9392 0437 50       		.byte	0x50
 9393 0438 00000000 		.4byte	0
 9394 043c 00000000 		.4byte	0
 9395              	.LLST28:
 9396 0440 00000000 		.4byte	.LVL85
 9397 0444 07000000 		.4byte	.LVL86-1
 9398 0448 0100     		.2byte	0x1
 9399 044a 50       		.byte	0x50
 9400 044b 07000000 		.4byte	.LVL86-1
 9401 044f 10000000 		.4byte	.LVL87
 9402 0453 0100     		.2byte	0x1
 9403 0455 54       		.byte	0x54
 9404 0456 00000000 		.4byte	0
 9405 045a 00000000 		.4byte	0
 9406              	.LLST29:
 9407 045e 10000000 		.4byte	.LVL87
 9408 0462 B2000000 		.4byte	.LVL94
 9409 0466 0100     		.2byte	0x1
 9410 0468 54       		.byte	0x54
 9411 0469 00000000 		.4byte	0
 9412 046d 00000000 		.4byte	0
 9413              	.LLST30:
 9414 0471 00000000 		.4byte	.LVL95
 9415 0475 11000000 		.4byte	.LVL97-1
 9416 0479 0100     		.2byte	0x1
 9417 047b 50       		.byte	0x50
 9418 047c 11000000 		.4byte	.LVL97-1
 9419 0480 4C000000 		.4byte	.LVL103
 9420 0484 0100     		.2byte	0x1
 9421 0486 54       		.byte	0x54
 9422 0487 4C000000 		.4byte	.LVL103
 9423 048b 4E000000 		.4byte	.LVL104
 9424 048f 0100     		.2byte	0x1
 9425 0491 50       		.byte	0x50
 9426 0492 4E000000 		.4byte	.LVL104
 9427 0496 50000000 		.4byte	.LVL105
 9428 049a 0400     		.2byte	0x4
 9429 049c F3       		.byte	0xf3
 9430 049d 01       		.uleb128 0x1
 9431 049e 50       		.byte	0x50
 9432 049f 9F       		.byte	0x9f
 9433 04a0 50000000 		.4byte	.LVL105
 9434 04a4 68000000 		.4byte	.LVL112
 9435 04a8 0100     		.2byte	0x1
 9436 04aa 54       		.byte	0x54
 9437 04ab 68000000 		.4byte	.LVL112
 9438 04af 70000000 		.4byte	.LFE11
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 270


 9439 04b3 0400     		.2byte	0x4
 9440 04b5 F3       		.byte	0xf3
 9441 04b6 01       		.uleb128 0x1
 9442 04b7 50       		.byte	0x50
 9443 04b8 9F       		.byte	0x9f
 9444 04b9 00000000 		.4byte	0
 9445 04bd 00000000 		.4byte	0
 9446              	.LLST31:
 9447 04c1 14000000 		.4byte	.LVL98
 9448 04c5 4C000000 		.4byte	.LVL103
 9449 04c9 0100     		.2byte	0x1
 9450 04cb 55       		.byte	0x55
 9451 04cc 50000000 		.4byte	.LVL105
 9452 04d0 68000000 		.4byte	.LVL112
 9453 04d4 0100     		.2byte	0x1
 9454 04d6 55       		.byte	0x55
 9455 04d7 00000000 		.4byte	0
 9456 04db 00000000 		.4byte	0
 9457              	.LLST32:
 9458 04df 18000000 		.4byte	.LVL99
 9459 04e3 4C000000 		.4byte	.LVL103
 9460 04e7 0100     		.2byte	0x1
 9461 04e9 56       		.byte	0x56
 9462 04ea 50000000 		.4byte	.LVL105
 9463 04ee 68000000 		.4byte	.LVL112
 9464 04f2 0100     		.2byte	0x1
 9465 04f4 56       		.byte	0x56
 9466 04f5 00000000 		.4byte	0
 9467 04f9 00000000 		.4byte	0
 9468              	.LLST33:
 9469 04fd 1C000000 		.4byte	.LVL100
 9470 0501 4C000000 		.4byte	.LVL103
 9471 0505 0100     		.2byte	0x1
 9472 0507 57       		.byte	0x57
 9473 0508 50000000 		.4byte	.LVL105
 9474 050c 68000000 		.4byte	.LVL112
 9475 0510 0100     		.2byte	0x1
 9476 0512 57       		.byte	0x57
 9477 0513 00000000 		.4byte	0
 9478 0517 00000000 		.4byte	0
 9479              	.LLST34:
 9480 051b 02000000 		.4byte	.LVL96
 9481 051f 11000000 		.4byte	.LVL97-1
 9482 0523 0100     		.2byte	0x1
 9483 0525 50       		.byte	0x50
 9484 0526 11000000 		.4byte	.LVL97-1
 9485 052a 4C000000 		.4byte	.LVL103
 9486 052e 0100     		.2byte	0x1
 9487 0530 54       		.byte	0x54
 9488 0531 4C000000 		.4byte	.LVL103
 9489 0535 4E000000 		.4byte	.LVL104
 9490 0539 0100     		.2byte	0x1
 9491 053b 50       		.byte	0x50
 9492 053c 4E000000 		.4byte	.LVL104
 9493 0540 50000000 		.4byte	.LVL105
 9494 0544 0400     		.2byte	0x4
 9495 0546 F3       		.byte	0xf3
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 271


 9496 0547 01       		.uleb128 0x1
 9497 0548 50       		.byte	0x50
 9498 0549 9F       		.byte	0x9f
 9499 054a 50000000 		.4byte	.LVL105
 9500 054e 68000000 		.4byte	.LVL112
 9501 0552 0100     		.2byte	0x1
 9502 0554 54       		.byte	0x54
 9503 0555 68000000 		.4byte	.LVL112
 9504 0559 70000000 		.4byte	.LFE11
 9505 055d 0400     		.2byte	0x4
 9506 055f F3       		.byte	0xf3
 9507 0560 01       		.uleb128 0x1
 9508 0561 50       		.byte	0x50
 9509 0562 9F       		.byte	0x9f
 9510 0563 00000000 		.4byte	0
 9511 0567 00000000 		.4byte	0
 9512              	.LLST35:
 9513 056b 00000000 		.4byte	.LVL113
 9514 056f 07000000 		.4byte	.LVL114-1
 9515 0573 0100     		.2byte	0x1
 9516 0575 50       		.byte	0x50
 9517 0576 07000000 		.4byte	.LVL114-1
 9518 057a 10000000 		.4byte	.LVL115
 9519 057e 0100     		.2byte	0x1
 9520 0580 54       		.byte	0x54
 9521 0581 10000000 		.4byte	.LVL115
 9522 0585 20000000 		.4byte	.LFE12
 9523 0589 0400     		.2byte	0x4
 9524 058b F3       		.byte	0xf3
 9525 058c 01       		.uleb128 0x1
 9526 058d 50       		.byte	0x50
 9527 058e 9F       		.byte	0x9f
 9528 058f 00000000 		.4byte	0
 9529 0593 00000000 		.4byte	0
 9530              	.LLST36:
 9531 0597 10000000 		.4byte	.LVL115
 9532 059b 12000000 		.4byte	.LVL116
 9533 059f 0100     		.2byte	0x1
 9534 05a1 54       		.byte	0x54
 9535 05a2 00000000 		.4byte	0
 9536 05a6 00000000 		.4byte	0
 9537              	.LLST37:
 9538 05aa 12000000 		.4byte	.LVL116
 9539 05ae 1A000000 		.4byte	.LVL118
 9540 05b2 0100     		.2byte	0x1
 9541 05b4 54       		.byte	0x54
 9542 05b5 1A000000 		.4byte	.LVL118
 9543 05b9 20000000 		.4byte	.LFE12
 9544 05bd 0100     		.2byte	0x1
 9545 05bf 50       		.byte	0x50
 9546 05c0 00000000 		.4byte	0
 9547 05c4 00000000 		.4byte	0
 9548              	.LLST38:
 9549 05c8 00000000 		.4byte	.LVL119
 9550 05cc 1C000000 		.4byte	.LVL120
 9551 05d0 0100     		.2byte	0x1
 9552 05d2 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 272


 9553 05d3 1C000000 		.4byte	.LVL120
 9554 05d7 28000000 		.4byte	.LFE13
 9555 05db 0400     		.2byte	0x4
 9556 05dd F3       		.byte	0xf3
 9557 05de 01       		.uleb128 0x1
 9558 05df 50       		.byte	0x50
 9559 05e0 9F       		.byte	0x9f
 9560 05e1 00000000 		.4byte	0
 9561 05e5 00000000 		.4byte	0
 9562              	.LLST39:
 9563 05e9 1C000000 		.4byte	.LVL120
 9564 05ed 1E000000 		.4byte	.LVL121
 9565 05f1 0100     		.2byte	0x1
 9566 05f3 50       		.byte	0x50
 9567 05f4 00000000 		.4byte	0
 9568 05f8 00000000 		.4byte	0
 9569              	.LLST40:
 9570 05fc 1E000000 		.4byte	.LVL121
 9571 0600 22000000 		.4byte	.LVL122
 9572 0604 0100     		.2byte	0x1
 9573 0606 53       		.byte	0x53
 9574 0607 00000000 		.4byte	0
 9575 060b 00000000 		.4byte	0
 9576              	.LLST41:
 9577 060f 00000000 		.4byte	.LVL123
 9578 0613 0F000000 		.4byte	.LVL126-1
 9579 0617 0100     		.2byte	0x1
 9580 0619 50       		.byte	0x50
 9581 061a 0F000000 		.4byte	.LVL126-1
 9582 061e 18000000 		.4byte	.LVL127
 9583 0622 0100     		.2byte	0x1
 9584 0624 54       		.byte	0x54
 9585 0625 00000000 		.4byte	0
 9586 0629 00000000 		.4byte	0
 9587              	.LLST42:
 9588 062d 00000000 		.4byte	.LVL123
 9589 0631 0C000000 		.4byte	.LVL125
 9590 0635 0100     		.2byte	0x1
 9591 0637 51       		.byte	0x51
 9592 0638 0C000000 		.4byte	.LVL125
 9593 063c 66000000 		.4byte	.LVL132
 9594 0640 0100     		.2byte	0x1
 9595 0642 55       		.byte	0x55
 9596 0643 66000000 		.4byte	.LVL132
 9597 0647 7F000000 		.4byte	.LVL133-1
 9598 064b 0300     		.2byte	0x3
 9599 064d 74       		.byte	0x74
 9600 064e C000     		.sleb128 64
 9601 0650 00000000 		.4byte	0
 9602 0654 00000000 		.4byte	0
 9603              	.LLST43:
 9604 0658 18000000 		.4byte	.LVL127
 9605 065c D2000000 		.4byte	.LVL138
 9606 0660 0100     		.2byte	0x1
 9607 0662 54       		.byte	0x54
 9608 0663 00000000 		.4byte	0
 9609 0667 00000000 		.4byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 273


 9610              	.LLST44:
 9611 066b 1A000000 		.4byte	.LVL128
 9612 066f 5E000000 		.4byte	.LVL131
 9613 0673 0100     		.2byte	0x1
 9614 0675 53       		.byte	0x53
 9615 0676 00000000 		.4byte	0
 9616 067a 00000000 		.4byte	0
 9617              	.LLST45:
 9618 067e 54000000 		.4byte	.LVL130
 9619 0682 88000000 		.4byte	.LVL134
 9620 0686 0100     		.2byte	0x1
 9621 0688 56       		.byte	0x56
 9622 0689 00000000 		.4byte	0
 9623 068d 00000000 		.4byte	0
 9624              	.LLST46:
 9625 0691 06000000 		.4byte	.LVL124
 9626 0695 52000000 		.4byte	.LVL129
 9627 0699 0200     		.2byte	0x2
 9628 069b 30       		.byte	0x30
 9629 069c 9F       		.byte	0x9f
 9630 069d 52000000 		.4byte	.LVL129
 9631 06a1 CC000000 		.4byte	.LVL136
 9632 06a5 0100     		.2byte	0x1
 9633 06a7 57       		.byte	0x57
 9634 06a8 00000000 		.4byte	0
 9635 06ac 00000000 		.4byte	0
 9636              	.LLST47:
 9637 06b0 00000000 		.4byte	.LVL139
 9638 06b4 13000000 		.4byte	.LVL140-1
 9639 06b8 0100     		.2byte	0x1
 9640 06ba 50       		.byte	0x50
 9641 06bb 13000000 		.4byte	.LVL140-1
 9642 06bf 6C000000 		.4byte	.LVL145
 9643 06c3 0100     		.2byte	0x1
 9644 06c5 54       		.byte	0x54
 9645 06c6 6C000000 		.4byte	.LVL145
 9646 06ca 78000000 		.4byte	.LFE17
 9647 06ce 0100     		.2byte	0x1
 9648 06d0 50       		.byte	0x50
 9649 06d1 00000000 		.4byte	0
 9650 06d5 00000000 		.4byte	0
 9651              	.LLST49:
 9652 06d9 00000000 		.4byte	.LVL146
 9653 06dd 1B000000 		.4byte	.LVL148-1
 9654 06e1 0100     		.2byte	0x1
 9655 06e3 50       		.byte	0x50
 9656 06e4 1B000000 		.4byte	.LVL148-1
 9657 06e8 80000000 		.4byte	.LVL156
 9658 06ec 0100     		.2byte	0x1
 9659 06ee 54       		.byte	0x54
 9660 06ef 80000000 		.4byte	.LVL156
 9661 06f3 88000000 		.4byte	.LFE18
 9662 06f7 0400     		.2byte	0x4
 9663 06f9 F3       		.byte	0xf3
 9664 06fa 01       		.uleb128 0x1
 9665 06fb 50       		.byte	0x50
 9666 06fc 9F       		.byte	0x9f
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 274


 9667 06fd 00000000 		.4byte	0
 9668 0701 00000000 		.4byte	0
 9669              	.LLST50:
 9670 0705 04000000 		.4byte	.LVL147
 9671 0709 3A000000 		.4byte	.LVL149
 9672 070d 0200     		.2byte	0x2
 9673 070f 30       		.byte	0x30
 9674 0710 9F       		.byte	0x9f
 9675 0711 3A000000 		.4byte	.LVL149
 9676 0715 68000000 		.4byte	.LVL152
 9677 0719 0100     		.2byte	0x1
 9678 071b 56       		.byte	0x56
 9679 071c 68000000 		.4byte	.LVL152
 9680 0720 78000000 		.4byte	.LVL154
 9681 0724 0200     		.2byte	0x2
 9682 0726 30       		.byte	0x30
 9683 0727 9F       		.byte	0x9f
 9684 0728 78000000 		.4byte	.LVL154
 9685 072c 80000000 		.4byte	.LVL156
 9686 0730 0100     		.2byte	0x1
 9687 0732 56       		.byte	0x56
 9688 0733 80000000 		.4byte	.LVL156
 9689 0737 88000000 		.4byte	.LFE18
 9690 073b 0100     		.2byte	0x1
 9691 073d 50       		.byte	0x50
 9692 073e 00000000 		.4byte	0
 9693 0742 00000000 		.4byte	0
 9694              	.LLST51:
 9695 0746 04000000 		.4byte	.LVL147
 9696 074a 1B000000 		.4byte	.LVL148-1
 9697 074e 0100     		.2byte	0x1
 9698 0750 50       		.byte	0x50
 9699 0751 1B000000 		.4byte	.LVL148-1
 9700 0755 80000000 		.4byte	.LVL156
 9701 0759 0100     		.2byte	0x1
 9702 075b 54       		.byte	0x54
 9703 075c 80000000 		.4byte	.LVL156
 9704 0760 88000000 		.4byte	.LFE18
 9705 0764 0400     		.2byte	0x4
 9706 0766 F3       		.byte	0xf3
 9707 0767 01       		.uleb128 0x1
 9708 0768 50       		.byte	0x50
 9709 0769 9F       		.byte	0x9f
 9710 076a 00000000 		.4byte	0
 9711 076e 00000000 		.4byte	0
 9712              	.LLST52:
 9713 0772 78000000 		.4byte	.LVL154
 9714 0776 7C000000 		.4byte	.LVL155
 9715 077a 0100     		.2byte	0x1
 9716 077c 55       		.byte	0x55
 9717 077d 00000000 		.4byte	0
 9718 0781 00000000 		.4byte	0
 9719              	.LLST53:
 9720 0785 16000000 		.4byte	.LVL157
 9721 0789 1D000000 		.4byte	.LVL158-1
 9722 078d 0100     		.2byte	0x1
 9723 078f 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 275


 9724 0790 1E000000 		.4byte	.LVL158
 9725 0794 49000000 		.4byte	.LVL159-1
 9726 0798 0100     		.2byte	0x1
 9727 079a 50       		.byte	0x50
 9728 079b 00000000 		.4byte	0
 9729 079f 00000000 		.4byte	0
 9730              	.LLST54:
 9731 07a3 00000000 		.4byte	.LVL164
 9732 07a7 0A000000 		.4byte	.LVL165
 9733 07ab 0100     		.2byte	0x1
 9734 07ad 50       		.byte	0x50
 9735 07ae 00000000 		.4byte	0
 9736 07b2 00000000 		.4byte	0
 9737              	.LLST55:
 9738 07b6 44000000 		.4byte	.LVL172
 9739 07ba 4A000000 		.4byte	.LVL174
 9740 07be 0100     		.2byte	0x1
 9741 07c0 54       		.byte	0x54
 9742 07c1 68000000 		.4byte	.LVL176
 9743 07c5 BC000000 		.4byte	.LVL181
 9744 07c9 0100     		.2byte	0x1
 9745 07cb 54       		.byte	0x54
 9746 07cc 00000000 		.4byte	0
 9747 07d0 00000000 		.4byte	0
 9748              	.LLST56:
 9749 07d4 6A000000 		.4byte	.LVL177
 9750 07d8 7B000000 		.4byte	.LVL178-1
 9751 07dc 0100     		.2byte	0x1
 9752 07de 53       		.byte	0x53
 9753 07df 00000000 		.4byte	0
 9754 07e3 00000000 		.4byte	0
 9755              	.LLST57:
 9756 07e7 04000000 		.4byte	.LVL166
 9757 07eb 44000000 		.4byte	.LVL172
 9758 07ef 0200     		.2byte	0x2
 9759 07f1 30       		.byte	0x30
 9760 07f2 9F       		.byte	0x9f
 9761 07f3 44000000 		.4byte	.LVL172
 9762 07f7 48000000 		.4byte	.LVL173
 9763 07fb 0100     		.2byte	0x1
 9764 07fd 58       		.byte	0x58
 9765 07fe 4A000000 		.4byte	.LVL174
 9766 0802 4E000000 		.4byte	.LVL175
 9767 0806 0200     		.2byte	0x2
 9768 0808 30       		.byte	0x30
 9769 0809 9F       		.byte	0x9f
 9770 080a 4E000000 		.4byte	.LVL175
 9771 080e D4000000 		.4byte	.LVL182
 9772 0812 0100     		.2byte	0x1
 9773 0814 58       		.byte	0x58
 9774 0815 D4000000 		.4byte	.LVL182
 9775 0819 E6000000 		.4byte	.LVL183
 9776 081d 0200     		.2byte	0x2
 9777 081f 30       		.byte	0x30
 9778 0820 9F       		.byte	0x9f
 9779 0821 E6000000 		.4byte	.LVL183
 9780 0825 FC000000 		.4byte	.LVL186
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 276


 9781 0829 0100     		.2byte	0x1
 9782 082b 58       		.byte	0x58
 9783 082c FC000000 		.4byte	.LVL186
 9784 0830 00010000 		.4byte	.LFE27
 9785 0834 0100     		.2byte	0x1
 9786 0836 50       		.byte	0x50
 9787 0837 00000000 		.4byte	0
 9788 083b 00000000 		.4byte	0
 9789              	.LLST58:
 9790 083f 16000000 		.4byte	.LVL167
 9791 0843 D4000000 		.4byte	.LVL182
 9792 0847 0100     		.2byte	0x1
 9793 0849 57       		.byte	0x57
 9794 084a E6000000 		.4byte	.LVL183
 9795 084e EA000000 		.4byte	.LVL184
 9796 0852 0100     		.2byte	0x1
 9797 0854 57       		.byte	0x57
 9798 0855 00000000 		.4byte	0
 9799 0859 00000000 		.4byte	0
 9800              	.LLST59:
 9801 085d 1E000000 		.4byte	.LVL168
 9802 0861 2C000000 		.4byte	.LVL169
 9803 0865 0100     		.2byte	0x1
 9804 0867 52       		.byte	0x52
 9805 0868 2C000000 		.4byte	.LVL169
 9806 086c 32000000 		.4byte	.LVL170
 9807 0870 0500     		.2byte	0x5
 9808 0872 03       		.byte	0x3
 9809 0873 EC020000 		.4byte	pxOverflowDelayedTaskList
 9810 0877 00000000 		.4byte	0
 9811 087b 00000000 		.4byte	0
 9812              	.LLST60:
 9813 087f 02000000 		.4byte	.LVL187
 9814 0883 26000000 		.4byte	.LVL189
 9815 0887 0200     		.2byte	0x2
 9816 0889 30       		.byte	0x30
 9817 088a 9F       		.byte	0x9f
 9818 088b 26000000 		.4byte	.LVL189
 9819 088f 74000000 		.4byte	.LVL194
 9820 0893 0100     		.2byte	0x1
 9821 0895 55       		.byte	0x55
 9822 0896 74000000 		.4byte	.LVL194
 9823 089a 76000000 		.4byte	.LVL195
 9824 089e 0200     		.2byte	0x2
 9825 08a0 30       		.byte	0x30
 9826 08a1 9F       		.byte	0x9f
 9827 08a2 76000000 		.4byte	.LVL195
 9828 08a6 C2000000 		.4byte	.LVL203
 9829 08aa 0100     		.2byte	0x1
 9830 08ac 55       		.byte	0x55
 9831 08ad C2000000 		.4byte	.LVL203
 9832 08b1 C6000000 		.4byte	.LVL204
 9833 08b5 0200     		.2byte	0x2
 9834 08b7 30       		.byte	0x30
 9835 08b8 9F       		.byte	0x9f
 9836 08b9 C6000000 		.4byte	.LVL204
 9837 08bd C8000000 		.4byte	.LVL205
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 277


 9838 08c1 0100     		.2byte	0x1
 9839 08c3 55       		.byte	0x55
 9840 08c4 00000000 		.4byte	0
 9841 08c8 00000000 		.4byte	0
 9842              	.LLST61:
 9843 08cc 02000000 		.4byte	.LVL187
 9844 08d0 AE000000 		.4byte	.LVL201
 9845 08d4 0200     		.2byte	0x2
 9846 08d6 30       		.byte	0x30
 9847 08d7 9F       		.byte	0x9f
 9848 08d8 AE000000 		.4byte	.LVL201
 9849 08dc C2000000 		.4byte	.LVL203
 9850 08e0 0200     		.2byte	0x2
 9851 08e2 31       		.byte	0x31
 9852 08e3 9F       		.byte	0x9f
 9853 08e4 C2000000 		.4byte	.LVL203
 9854 08e8 C8000000 		.4byte	.LVL205
 9855 08ec 0200     		.2byte	0x2
 9856 08ee 30       		.byte	0x30
 9857 08ef 9F       		.byte	0x9f
 9858 08f0 C8000000 		.4byte	.LVL205
 9859 08f4 D0000000 		.4byte	.LVL207
 9860 08f8 0100     		.2byte	0x1
 9861 08fa 54       		.byte	0x54
 9862 08fb D0000000 		.4byte	.LVL207
 9863 08ff D8000000 		.4byte	.LFE22
 9864 0903 0100     		.2byte	0x1
 9865 0905 50       		.byte	0x50
 9866 0906 00000000 		.4byte	0
 9867 090a 00000000 		.4byte	0
 9868              	.LLST62:
 9869 090e 8A000000 		.4byte	.LVL197
 9870 0912 9A000000 		.4byte	.LVL199
 9871 0916 0100     		.2byte	0x1
 9872 0918 54       		.byte	0x54
 9873 0919 9A000000 		.4byte	.LVL199
 9874 091d 9C000000 		.4byte	.LVL200
 9875 0921 0300     		.2byte	0x3
 9876 0923 74       		.byte	0x74
 9877 0924 7F       		.sleb128 -1
 9878 0925 9F       		.byte	0x9f
 9879 0926 9C000000 		.4byte	.LVL200
 9880 092a C0000000 		.4byte	.LVL202
 9881 092e 0100     		.2byte	0x1
 9882 0930 54       		.byte	0x54
 9883 0931 C6000000 		.4byte	.LVL204
 9884 0935 C8000000 		.4byte	.LVL205
 9885 0939 0100     		.2byte	0x1
 9886 093b 54       		.byte	0x54
 9887 093c 00000000 		.4byte	0
 9888 0940 00000000 		.4byte	0
 9889              	.LLST63:
 9890 0944 00000000 		.4byte	.LVL208
 9891 0948 09000000 		.4byte	.LVL210-1
 9892 094c 0100     		.2byte	0x1
 9893 094e 50       		.byte	0x50
 9894 094f 09000000 		.4byte	.LVL210-1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 278


 9895 0953 62000000 		.4byte	.LVL217
 9896 0957 0100     		.2byte	0x1
 9897 0959 55       		.byte	0x55
 9898 095a 62000000 		.4byte	.LVL217
 9899 095e 6C000000 		.4byte	.LFE9
 9900 0962 0400     		.2byte	0x4
 9901 0964 F3       		.byte	0xf3
 9902 0965 01       		.uleb128 0x1
 9903 0966 50       		.byte	0x50
 9904 0967 9F       		.byte	0x9f
 9905 0968 00000000 		.4byte	0
 9906 096c 00000000 		.4byte	0
 9907              	.LLST64:
 9908 0970 00000000 		.4byte	.LVL208
 9909 0974 09000000 		.4byte	.LVL210-1
 9910 0978 0100     		.2byte	0x1
 9911 097a 51       		.byte	0x51
 9912 097b 09000000 		.4byte	.LVL210-1
 9913 097f 62000000 		.4byte	.LVL217
 9914 0983 0100     		.2byte	0x1
 9915 0985 54       		.byte	0x54
 9916 0986 62000000 		.4byte	.LVL217
 9917 098a 6C000000 		.4byte	.LFE9
 9918 098e 0400     		.2byte	0x4
 9919 0990 F3       		.byte	0xf3
 9920 0991 01       		.uleb128 0x1
 9921 0992 51       		.byte	0x51
 9922 0993 9F       		.byte	0x9f
 9923 0994 00000000 		.4byte	0
 9924 0998 00000000 		.4byte	0
 9925              	.LLST65:
 9926 099c 14000000 		.4byte	.LVL212
 9927 09a0 49000000 		.4byte	.LVL215-1
 9928 09a4 0100     		.2byte	0x1
 9929 09a6 53       		.byte	0x53
 9930 09a7 00000000 		.4byte	0
 9931 09ab 00000000 		.4byte	0
 9932              	.LLST66:
 9933 09af 06000000 		.4byte	.LVL209
 9934 09b3 3E000000 		.4byte	.LVL213
 9935 09b7 0200     		.2byte	0x2
 9936 09b9 30       		.byte	0x30
 9937 09ba 9F       		.byte	0x9f
 9938 09bb 3E000000 		.4byte	.LVL213
 9939 09bf 49000000 		.4byte	.LVL215-1
 9940 09c3 0100     		.2byte	0x1
 9941 09c5 52       		.byte	0x52
 9942 09c6 00000000 		.4byte	0
 9943 09ca 00000000 		.4byte	0
 9944              	.LLST67:
 9945 09ce 10000000 		.4byte	.LVL211
 9946 09d2 46000000 		.4byte	.LVL214
 9947 09d6 0100     		.2byte	0x1
 9948 09d8 50       		.byte	0x50
 9949 09d9 00000000 		.4byte	0
 9950 09dd 00000000 		.4byte	0
 9951              	.LLST68:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 279


 9952 09e1 00000000 		.4byte	.LVL218
 9953 09e5 09000000 		.4byte	.LVL220-1
 9954 09e9 0100     		.2byte	0x1
 9955 09eb 50       		.byte	0x50
 9956 09ec 09000000 		.4byte	.LVL220-1
 9957 09f0 18000000 		.4byte	.LVL223
 9958 09f4 0100     		.2byte	0x1
 9959 09f6 54       		.byte	0x54
 9960 09f7 18000000 		.4byte	.LVL223
 9961 09fb 1A000000 		.4byte	.LVL224
 9962 09ff 0100     		.2byte	0x1
 9963 0a01 50       		.byte	0x50
 9964 0a02 1A000000 		.4byte	.LVL224
 9965 0a06 34000000 		.4byte	.LFE10
 9966 0a0a 0400     		.2byte	0x4
 9967 0a0c F3       		.byte	0xf3
 9968 0a0d 01       		.uleb128 0x1
 9969 0a0e 50       		.byte	0x50
 9970 0a0f 9F       		.byte	0x9f
 9971 0a10 00000000 		.4byte	0
 9972 0a14 00000000 		.4byte	0
 9973              	.LLST69:
 9974 0a18 02000000 		.4byte	.LVL219
 9975 0a1c 16000000 		.4byte	.LVL222
 9976 0a20 0200     		.2byte	0x2
 9977 0a22 30       		.byte	0x30
 9978 0a23 9F       		.byte	0x9f
 9979 0a24 16000000 		.4byte	.LVL222
 9980 0a28 18000000 		.4byte	.LVL223
 9981 0a2c 0100     		.2byte	0x1
 9982 0a2e 50       		.byte	0x50
 9983 0a2f 18000000 		.4byte	.LVL223
 9984 0a33 1A000000 		.4byte	.LVL224
 9985 0a37 0200     		.2byte	0x2
 9986 0a39 30       		.byte	0x30
 9987 0a3a 9F       		.byte	0x9f
 9988 0a3b 1A000000 		.4byte	.LVL224
 9989 0a3f 34000000 		.4byte	.LFE10
 9990 0a43 0100     		.2byte	0x1
 9991 0a45 50       		.byte	0x50
 9992 0a46 00000000 		.4byte	0
 9993 0a4a 00000000 		.4byte	0
 9994              	.LLST70:
 9995 0a4e 2A000000 		.4byte	.LVL227
 9996 0a52 5C000000 		.4byte	.LVL228
 9997 0a56 0100     		.2byte	0x1
 9998 0a58 53       		.byte	0x53
 9999 0a59 00000000 		.4byte	0
 10000 0a5d 00000000 		.4byte	0
 10001              	.LLST71:
 10002 0a61 20000000 		.4byte	.LVL225
 10003 0a65 24000000 		.4byte	.LVL226
 10004 0a69 0100     		.2byte	0x1
 10005 0a6b 53       		.byte	0x53
 10006 0a6c 00000000 		.4byte	0
 10007 0a70 00000000 		.4byte	0
 10008              	.LLST72:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 280


 10009 0a74 2A000000 		.4byte	.LVL227
 10010 0a78 5C000000 		.4byte	.LVL228
 10011 0a7c 0B00     		.2byte	0xb
 10012 0a7e 73       		.byte	0x73
 10013 0a7f 00       		.sleb128 0
 10014 0a80 44       		.byte	0x44
 10015 0a81 1E       		.byte	0x1e
 10016 0a82 03       		.byte	0x3
 10017 0a83 30000000 		.4byte	pxReadyTasksLists
 10018 0a87 22       		.byte	0x22
 10019 0a88 9F       		.byte	0x9f
 10020 0a89 00000000 		.4byte	0
 10021 0a8d 00000000 		.4byte	0
 10022              	.LLST73:
 10023 0a91 00000000 		.4byte	.LVL229
 10024 0a95 07000000 		.4byte	.LVL230-1
 10025 0a99 0100     		.2byte	0x1
 10026 0a9b 50       		.byte	0x50
 10027 0a9c 07000000 		.4byte	.LVL230-1
 10028 0aa0 10000000 		.4byte	.LVL231
 10029 0aa4 0100     		.2byte	0x1
 10030 0aa6 54       		.byte	0x54
 10031 0aa7 00000000 		.4byte	0
 10032 0aab 00000000 		.4byte	0
 10033              	.LLST74:
 10034 0aaf 10000000 		.4byte	.LVL231
 10035 0ab3 B8000000 		.4byte	.LVL242
 10036 0ab7 0100     		.2byte	0x1
 10037 0ab9 54       		.byte	0x54
 10038 0aba 00000000 		.4byte	0
 10039 0abe 00000000 		.4byte	0
 10040              	.LLST75:
 10041 0ac2 00000000 		.4byte	.LVL243
 10042 0ac6 0F000000 		.4byte	.LVL245-1
 10043 0aca 0100     		.2byte	0x1
 10044 0acc 50       		.byte	0x50
 10045 0acd 0F000000 		.4byte	.LVL245-1
 10046 0ad1 20000000 		.4byte	.LFE29
 10047 0ad5 0400     		.2byte	0x4
 10048 0ad7 F3       		.byte	0xf3
 10049 0ad8 01       		.uleb128 0x1
 10050 0ad9 50       		.byte	0x50
 10051 0ada 9F       		.byte	0x9f
 10052 0adb 00000000 		.4byte	0
 10053 0adf 00000000 		.4byte	0
 10054              	.LLST76:
 10055 0ae3 00000000 		.4byte	.LVL243
 10056 0ae7 0A000000 		.4byte	.LVL244
 10057 0aeb 0100     		.2byte	0x1
 10058 0aed 51       		.byte	0x51
 10059 0aee 0A000000 		.4byte	.LVL244
 10060 0af2 1A000000 		.4byte	.LVL247
 10061 0af6 0100     		.2byte	0x1
 10062 0af8 54       		.byte	0x54
 10063 0af9 1A000000 		.4byte	.LVL247
 10064 0afd 20000000 		.4byte	.LFE29
 10065 0b01 0400     		.2byte	0x4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 281


 10066 0b03 F3       		.byte	0xf3
 10067 0b04 01       		.uleb128 0x1
 10068 0b05 51       		.byte	0x51
 10069 0b06 9F       		.byte	0x9f
 10070 0b07 00000000 		.4byte	0
 10071 0b0b 00000000 		.4byte	0
 10072              	.LLST77:
 10073 0b0f 00000000 		.4byte	.LVL248
 10074 0b13 19000000 		.4byte	.LVL251-1
 10075 0b17 0100     		.2byte	0x1
 10076 0b19 50       		.byte	0x50
 10077 0b1a 19000000 		.4byte	.LVL251-1
 10078 0b1e 28000000 		.4byte	.LFE30
 10079 0b22 0400     		.2byte	0x4
 10080 0b24 F3       		.byte	0xf3
 10081 0b25 01       		.uleb128 0x1
 10082 0b26 50       		.byte	0x50
 10083 0b27 9F       		.byte	0x9f
 10084 0b28 00000000 		.4byte	0
 10085 0b2c 00000000 		.4byte	0
 10086              	.LLST78:
 10087 0b30 00000000 		.4byte	.LVL248
 10088 0b34 0E000000 		.4byte	.LVL250
 10089 0b38 0100     		.2byte	0x1
 10090 0b3a 51       		.byte	0x51
 10091 0b3b 0E000000 		.4byte	.LVL250
 10092 0b3f 28000000 		.4byte	.LFE30
 10093 0b43 0400     		.2byte	0x4
 10094 0b45 F3       		.byte	0xf3
 10095 0b46 01       		.uleb128 0x1
 10096 0b47 51       		.byte	0x51
 10097 0b48 9F       		.byte	0x9f
 10098 0b49 00000000 		.4byte	0
 10099 0b4d 00000000 		.4byte	0
 10100              	.LLST79:
 10101 0b51 00000000 		.4byte	.LVL248
 10102 0b55 0A000000 		.4byte	.LVL249
 10103 0b59 0100     		.2byte	0x1
 10104 0b5b 52       		.byte	0x52
 10105 0b5c 0A000000 		.4byte	.LVL249
 10106 0b60 24000000 		.4byte	.LVL253
 10107 0b64 0100     		.2byte	0x1
 10108 0b66 54       		.byte	0x54
 10109 0b67 24000000 		.4byte	.LVL253
 10110 0b6b 28000000 		.4byte	.LFE30
 10111 0b6f 0400     		.2byte	0x4
 10112 0b71 F3       		.byte	0xf3
 10113 0b72 01       		.uleb128 0x1
 10114 0b73 52       		.byte	0x52
 10115 0b74 9F       		.byte	0x9f
 10116 0b75 00000000 		.4byte	0
 10117 0b79 00000000 		.4byte	0
 10118              	.LLST80:
 10119 0b7d 00000000 		.4byte	.LVL254
 10120 0b81 11000000 		.4byte	.LVL256-1
 10121 0b85 0100     		.2byte	0x1
 10122 0b87 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 282


 10123 0b88 11000000 		.4byte	.LVL256-1
 10124 0b8c 28000000 		.4byte	.LFE31
 10125 0b90 0400     		.2byte	0x4
 10126 0b92 F3       		.byte	0xf3
 10127 0b93 01       		.uleb128 0x1
 10128 0b94 50       		.byte	0x50
 10129 0b95 9F       		.byte	0x9f
 10130 0b96 00000000 		.4byte	0
 10131 0b9a 00000000 		.4byte	0
 10132              	.LLST81:
 10133 0b9e 00000000 		.4byte	.LVL254
 10134 0ba2 0C000000 		.4byte	.LVL255
 10135 0ba6 0100     		.2byte	0x1
 10136 0ba8 51       		.byte	0x51
 10137 0ba9 0C000000 		.4byte	.LVL255
 10138 0bad 22000000 		.4byte	.LVL259
 10139 0bb1 0100     		.2byte	0x1
 10140 0bb3 55       		.byte	0x55
 10141 0bb4 00000000 		.4byte	0
 10142 0bb8 00000000 		.4byte	0
 10143              	.LLST82:
 10144 0bbc 00000000 		.4byte	.LVL254
 10145 0bc0 11000000 		.4byte	.LVL256-1
 10146 0bc4 0100     		.2byte	0x1
 10147 0bc6 52       		.byte	0x52
 10148 0bc7 11000000 		.4byte	.LVL256-1
 10149 0bcb 22000000 		.4byte	.LVL259
 10150 0bcf 0100     		.2byte	0x1
 10151 0bd1 54       		.byte	0x54
 10152 0bd2 22000000 		.4byte	.LVL259
 10153 0bd6 28000000 		.4byte	.LFE31
 10154 0bda 0400     		.2byte	0x4
 10155 0bdc F3       		.byte	0xf3
 10156 0bdd 01       		.uleb128 0x1
 10157 0bde 52       		.byte	0x52
 10158 0bdf 9F       		.byte	0x9f
 10159 0be0 00000000 		.4byte	0
 10160 0be4 00000000 		.4byte	0
 10161              	.LLST83:
 10162 0be8 00000000 		.4byte	.LVL260
 10163 0bec 0C000000 		.4byte	.LVL262
 10164 0bf0 0100     		.2byte	0x1
 10165 0bf2 50       		.byte	0x50
 10166 0bf3 0C000000 		.4byte	.LVL262
 10167 0bf7 74000000 		.4byte	.LFE32
 10168 0bfb 0400     		.2byte	0x4
 10169 0bfd F3       		.byte	0xf3
 10170 0bfe 01       		.uleb128 0x1
 10171 0bff 50       		.byte	0x50
 10172 0c00 9F       		.byte	0x9f
 10173 0c01 00000000 		.4byte	0
 10174 0c05 00000000 		.4byte	0
 10175              	.LLST84:
 10176 0c09 06000000 		.4byte	.LVL261
 10177 0c0d 6A000000 		.4byte	.LVL270
 10178 0c11 0100     		.2byte	0x1
 10179 0c13 54       		.byte	0x54
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 283


 10180 0c14 00000000 		.4byte	0
 10181 0c18 00000000 		.4byte	0
 10182              	.LLST85:
 10183 0c1c 5C000000 		.4byte	.LVL267
 10184 0c20 66000000 		.4byte	.LVL268
 10185 0c24 0200     		.2byte	0x2
 10186 0c26 31       		.byte	0x31
 10187 0c27 9F       		.byte	0x9f
 10188 0c28 68000000 		.4byte	.LVL269
 10189 0c2c 74000000 		.4byte	.LFE32
 10190 0c30 0100     		.2byte	0x1
 10191 0c32 50       		.byte	0x50
 10192 0c33 00000000 		.4byte	0
 10193 0c37 00000000 		.4byte	0
 10194              	.LLST86:
 10195 0c3b 00000000 		.4byte	.LVL271
 10196 0c3f 0D000000 		.4byte	.LVL274-1
 10197 0c43 0100     		.2byte	0x1
 10198 0c45 50       		.byte	0x50
 10199 0c46 0D000000 		.4byte	.LVL274-1
 10200 0c4a 54000000 		.4byte	.LFE33
 10201 0c4e 0400     		.2byte	0x4
 10202 0c50 F3       		.byte	0xf3
 10203 0c51 01       		.uleb128 0x1
 10204 0c52 50       		.byte	0x50
 10205 0c53 9F       		.byte	0x9f
 10206 0c54 00000000 		.4byte	0
 10207 0c58 00000000 		.4byte	0
 10208              	.LLST87:
 10209 0c5c 00000000 		.4byte	.LVL271
 10210 0c60 06000000 		.4byte	.LVL272
 10211 0c64 0100     		.2byte	0x1
 10212 0c66 51       		.byte	0x51
 10213 0c67 06000000 		.4byte	.LVL272
 10214 0c6b 54000000 		.4byte	.LFE33
 10215 0c6f 0400     		.2byte	0x4
 10216 0c71 F3       		.byte	0xf3
 10217 0c72 01       		.uleb128 0x1
 10218 0c73 51       		.byte	0x51
 10219 0c74 9F       		.byte	0x9f
 10220 0c75 00000000 		.4byte	0
 10221 0c79 00000000 		.4byte	0
 10222              	.LLST88:
 10223 0c7d 0A000000 		.4byte	.LVL273
 10224 0c81 50000000 		.4byte	.LVL277
 10225 0c85 0100     		.2byte	0x1
 10226 0c87 55       		.byte	0x55
 10227 0c88 00000000 		.4byte	0
 10228 0c8c 00000000 		.4byte	0
 10229              	.LLST89:
 10230 0c90 00000000 		.4byte	.LVL278
 10231 0c94 07000000 		.4byte	.LVL279-1
 10232 0c98 0100     		.2byte	0x1
 10233 0c9a 50       		.byte	0x50
 10234 0c9b 07000000 		.4byte	.LVL279-1
 10235 0c9f 1C000000 		.4byte	.LVL281
 10236 0ca3 0100     		.2byte	0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 284


 10237 0ca5 54       		.byte	0x54
 10238 0ca6 1C000000 		.4byte	.LVL281
 10239 0caa 20000000 		.4byte	.LFE34
 10240 0cae 0400     		.2byte	0x4
 10241 0cb0 F3       		.byte	0xf3
 10242 0cb1 01       		.uleb128 0x1
 10243 0cb2 50       		.byte	0x50
 10244 0cb3 9F       		.byte	0x9f
 10245 0cb4 00000000 		.4byte	0
 10246 0cb8 00000000 		.4byte	0
 10247              	.LLST90:
 10248 0cbc 00000000 		.4byte	.LVL283
 10249 0cc0 09000000 		.4byte	.LVL284-1
 10250 0cc4 0100     		.2byte	0x1
 10251 0cc6 50       		.byte	0x50
 10252 0cc7 09000000 		.4byte	.LVL284-1
 10253 0ccb 3C000000 		.4byte	.LVL289
 10254 0ccf 0100     		.2byte	0x1
 10255 0cd1 54       		.byte	0x54
 10256 0cd2 3C000000 		.4byte	.LVL289
 10257 0cd6 3E000000 		.4byte	.LVL290
 10258 0cda 0400     		.2byte	0x4
 10259 0cdc F3       		.byte	0xf3
 10260 0cdd 01       		.uleb128 0x1
 10261 0cde 50       		.byte	0x50
 10262 0cdf 9F       		.byte	0x9f
 10263 0ce0 3E000000 		.4byte	.LVL290
 10264 0ce4 44000000 		.4byte	.LVL292
 10265 0ce8 0100     		.2byte	0x1
 10266 0cea 54       		.byte	0x54
 10267 0ceb 44000000 		.4byte	.LVL292
 10268 0cef 46000000 		.4byte	.LVL293
 10269 0cf3 0400     		.2byte	0x4
 10270 0cf5 F3       		.byte	0xf3
 10271 0cf6 01       		.uleb128 0x1
 10272 0cf7 50       		.byte	0x50
 10273 0cf8 9F       		.byte	0x9f
 10274 0cf9 46000000 		.4byte	.LVL293
 10275 0cfd 48000000 		.4byte	.LVL294
 10276 0d01 0100     		.2byte	0x1
 10277 0d03 54       		.byte	0x54
 10278 0d04 48000000 		.4byte	.LVL294
 10279 0d08 4A000000 		.4byte	.LVL295
 10280 0d0c 0400     		.2byte	0x4
 10281 0d0e F3       		.byte	0xf3
 10282 0d0f 01       		.uleb128 0x1
 10283 0d10 50       		.byte	0x50
 10284 0d11 9F       		.byte	0x9f
 10285 0d12 4A000000 		.4byte	.LVL295
 10286 0d16 4C000000 		.4byte	.LVL296
 10287 0d1a 0100     		.2byte	0x1
 10288 0d1c 54       		.byte	0x54
 10289 0d1d 4C000000 		.4byte	.LVL296
 10290 0d21 58000000 		.4byte	.LFE36
 10291 0d25 0400     		.2byte	0x4
 10292 0d27 F3       		.byte	0xf3
 10293 0d28 01       		.uleb128 0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 285


 10294 0d29 50       		.byte	0x50
 10295 0d2a 9F       		.byte	0x9f
 10296 0d2b 00000000 		.4byte	0
 10297 0d2f 00000000 		.4byte	0
 10298              	.LLST91:
 10299 0d33 00000000 		.4byte	.LVL283
 10300 0d37 09000000 		.4byte	.LVL284-1
 10301 0d3b 0100     		.2byte	0x1
 10302 0d3d 51       		.byte	0x51
 10303 0d3e 09000000 		.4byte	.LVL284-1
 10304 0d42 54000000 		.4byte	.LVL298
 10305 0d46 0100     		.2byte	0x1
 10306 0d48 55       		.byte	0x55
 10307 0d49 54000000 		.4byte	.LVL298
 10308 0d4d 58000000 		.4byte	.LFE36
 10309 0d51 0400     		.2byte	0x4
 10310 0d53 F3       		.byte	0xf3
 10311 0d54 01       		.uleb128 0x1
 10312 0d55 51       		.byte	0x51
 10313 0d56 9F       		.byte	0x9f
 10314 0d57 00000000 		.4byte	0
 10315 0d5b 00000000 		.4byte	0
 10316              	.LLST92:
 10317 0d5f 3A000000 		.4byte	.LVL288
 10318 0d63 3E000000 		.4byte	.LVL290
 10319 0d67 0200     		.2byte	0x2
 10320 0d69 30       		.byte	0x30
 10321 0d6a 9F       		.byte	0x9f
 10322 0d6b 42000000 		.4byte	.LVL291
 10323 0d6f 46000000 		.4byte	.LVL293
 10324 0d73 0200     		.2byte	0x2
 10325 0d75 31       		.byte	0x31
 10326 0d76 9F       		.byte	0x9f
 10327 0d77 4C000000 		.4byte	.LVL296
 10328 0d7b 54000000 		.4byte	.LVL298
 10329 0d7f 0100     		.2byte	0x1
 10330 0d81 54       		.byte	0x54
 10331 0d82 54000000 		.4byte	.LVL298
 10332 0d86 58000000 		.4byte	.LFE36
 10333 0d8a 0100     		.2byte	0x1
 10334 0d8c 50       		.byte	0x50
 10335 0d8d 00000000 		.4byte	0
 10336 0d91 00000000 		.4byte	0
 10337              	.LLST93:
 10338 0d95 10000000 		.4byte	.LVL285
 10339 0d99 39000000 		.4byte	.LVL288-1
 10340 0d9d 0100     		.2byte	0x1
 10341 0d9f 51       		.byte	0x51
 10342 0da0 3E000000 		.4byte	.LVL290
 10343 0da4 4C000000 		.4byte	.LVL296
 10344 0da8 0100     		.2byte	0x1
 10345 0daa 51       		.byte	0x51
 10346 0dab 00000000 		.4byte	0
 10347 0daf 00000000 		.4byte	0
 10348              	.LLST94:
 10349 0db3 14000000 		.4byte	.LVL286
 10350 0db7 36000000 		.4byte	.LVL287
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 286


 10351 0dbb 0100     		.2byte	0x1
 10352 0dbd 50       		.byte	0x50
 10353 0dbe 36000000 		.4byte	.LVL287
 10354 0dc2 39000000 		.4byte	.LVL288-1
 10355 0dc6 0600     		.2byte	0x6
 10356 0dc8 71       		.byte	0x71
 10357 0dc9 00       		.sleb128 0
 10358 0dca 72       		.byte	0x72
 10359 0dcb 00       		.sleb128 0
 10360 0dcc 1C       		.byte	0x1c
 10361 0dcd 9F       		.byte	0x9f
 10362 0dce 3E000000 		.4byte	.LVL290
 10363 0dd2 4C000000 		.4byte	.LVL296
 10364 0dd6 0100     		.2byte	0x1
 10365 0dd8 50       		.byte	0x50
 10366 0dd9 00000000 		.4byte	0
 10367 0ddd 00000000 		.4byte	0
 10368              	.LLST95:
 10369 0de1 00000000 		.4byte	.LVL299
 10370 0de5 0C000000 		.4byte	.LVL300
 10371 0de9 0100     		.2byte	0x1
 10372 0deb 50       		.byte	0x50
 10373 0dec 00000000 		.4byte	0
 10374 0df0 00000000 		.4byte	0
 10375              	.LLST96:
 10376 0df4 0C000000 		.4byte	.LVL300
 10377 0df8 11000000 		.4byte	.LVL301-1
 10378 0dfc 0100     		.2byte	0x1
 10379 0dfe 53       		.byte	0x53
 10380 0dff 00000000 		.4byte	0
 10381 0e03 00000000 		.4byte	0
 10382              	.LLST97:
 10383 0e07 0C000000 		.4byte	.LVL300
 10384 0e0b 11000000 		.4byte	.LVL301-1
 10385 0e0f 0200     		.2byte	0x2
 10386 0e11 73       		.byte	0x73
 10387 0e12 30       		.sleb128 48
 10388 0e13 00000000 		.4byte	0
 10389 0e17 00000000 		.4byte	0
 10390              	.LLST98:
 10391 0e1b 00000000 		.4byte	.LVL304
 10392 0e1f 2C000000 		.4byte	.LVL305
 10393 0e23 0100     		.2byte	0x1
 10394 0e25 50       		.byte	0x50
 10395 0e26 2C000000 		.4byte	.LVL305
 10396 0e2a 43000000 		.4byte	.LVL306-1
 10397 0e2e 0100     		.2byte	0x1
 10398 0e30 53       		.byte	0x53
 10399 0e31 43000000 		.4byte	.LVL306-1
 10400 0e35 74000000 		.4byte	.LVL307
 10401 0e39 0100     		.2byte	0x1
 10402 0e3b 54       		.byte	0x54
 10403 0e3c 74000000 		.4byte	.LVL307
 10404 0e40 96000000 		.4byte	.LVL309
 10405 0e44 0300     		.2byte	0x3
 10406 0e46 75       		.byte	0x75
 10407 0e47 7C       		.sleb128 -4
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 287


 10408 0e48 9F       		.byte	0x9f
 10409 0e49 96000000 		.4byte	.LVL309
 10410 0e4d A4000000 		.4byte	.LVL310
 10411 0e51 0100     		.2byte	0x1
 10412 0e53 53       		.byte	0x53
 10413 0e54 A4000000 		.4byte	.LVL310
 10414 0e58 B4000000 		.4byte	.LVL311
 10415 0e5c 0100     		.2byte	0x1
 10416 0e5e 50       		.byte	0x50
 10417 0e5f B4000000 		.4byte	.LVL311
 10418 0e63 B6000000 		.4byte	.LVL312
 10419 0e67 0400     		.2byte	0x4
 10420 0e69 F3       		.byte	0xf3
 10421 0e6a 01       		.uleb128 0x1
 10422 0e6b 50       		.byte	0x50
 10423 0e6c 9F       		.byte	0x9f
 10424 0e6d B6000000 		.4byte	.LVL312
 10425 0e71 B8000000 		.4byte	.LVL313
 10426 0e75 0100     		.2byte	0x1
 10427 0e77 50       		.byte	0x50
 10428 0e78 B8000000 		.4byte	.LVL313
 10429 0e7c BA000000 		.4byte	.LVL314
 10430 0e80 0400     		.2byte	0x4
 10431 0e82 F3       		.byte	0xf3
 10432 0e83 01       		.uleb128 0x1
 10433 0e84 50       		.byte	0x50
 10434 0e85 9F       		.byte	0x9f
 10435 0e86 BA000000 		.4byte	.LVL314
 10436 0e8a BC000000 		.4byte	.LVL315
 10437 0e8e 0100     		.2byte	0x1
 10438 0e90 50       		.byte	0x50
 10439 0e91 BC000000 		.4byte	.LVL315
 10440 0e95 C8000000 		.4byte	.LFE47
 10441 0e99 0400     		.2byte	0x4
 10442 0e9b F3       		.byte	0xf3
 10443 0e9c 01       		.uleb128 0x1
 10444 0e9d 50       		.byte	0x50
 10445 0e9e 9F       		.byte	0x9f
 10446 0e9f 00000000 		.4byte	0
 10447 0ea3 00000000 		.4byte	0
 10448              	.LLST99:
 10449 0ea7 00000000 		.4byte	.LVL304
 10450 0eab 2C000000 		.4byte	.LVL305
 10451 0eaf 0100     		.2byte	0x1
 10452 0eb1 50       		.byte	0x50
 10453 0eb2 2C000000 		.4byte	.LVL305
 10454 0eb6 43000000 		.4byte	.LVL306-1
 10455 0eba 0100     		.2byte	0x1
 10456 0ebc 53       		.byte	0x53
 10457 0ebd 43000000 		.4byte	.LVL306-1
 10458 0ec1 74000000 		.4byte	.LVL307
 10459 0ec5 0100     		.2byte	0x1
 10460 0ec7 54       		.byte	0x54
 10461 0ec8 74000000 		.4byte	.LVL307
 10462 0ecc 96000000 		.4byte	.LVL309
 10463 0ed0 0300     		.2byte	0x3
 10464 0ed2 75       		.byte	0x75
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 288


 10465 0ed3 7C       		.sleb128 -4
 10466 0ed4 9F       		.byte	0x9f
 10467 0ed5 96000000 		.4byte	.LVL309
 10468 0ed9 A4000000 		.4byte	.LVL310
 10469 0edd 0100     		.2byte	0x1
 10470 0edf 53       		.byte	0x53
 10471 0ee0 A4000000 		.4byte	.LVL310
 10472 0ee4 B4000000 		.4byte	.LVL311
 10473 0ee8 0100     		.2byte	0x1
 10474 0eea 50       		.byte	0x50
 10475 0eeb B4000000 		.4byte	.LVL311
 10476 0eef B6000000 		.4byte	.LVL312
 10477 0ef3 0400     		.2byte	0x4
 10478 0ef5 F3       		.byte	0xf3
 10479 0ef6 01       		.uleb128 0x1
 10480 0ef7 50       		.byte	0x50
 10481 0ef8 9F       		.byte	0x9f
 10482 0ef9 B6000000 		.4byte	.LVL312
 10483 0efd B8000000 		.4byte	.LVL313
 10484 0f01 0100     		.2byte	0x1
 10485 0f03 50       		.byte	0x50
 10486 0f04 B8000000 		.4byte	.LVL313
 10487 0f08 BA000000 		.4byte	.LVL314
 10488 0f0c 0400     		.2byte	0x4
 10489 0f0e F3       		.byte	0xf3
 10490 0f0f 01       		.uleb128 0x1
 10491 0f10 50       		.byte	0x50
 10492 0f11 9F       		.byte	0x9f
 10493 0f12 BA000000 		.4byte	.LVL314
 10494 0f16 BC000000 		.4byte	.LVL315
 10495 0f1a 0100     		.2byte	0x1
 10496 0f1c 50       		.byte	0x50
 10497 0f1d BC000000 		.4byte	.LVL315
 10498 0f21 C8000000 		.4byte	.LFE47
 10499 0f25 0400     		.2byte	0x4
 10500 0f27 F3       		.byte	0xf3
 10501 0f28 01       		.uleb128 0x1
 10502 0f29 50       		.byte	0x50
 10503 0f2a 9F       		.byte	0x9f
 10504 0f2b 00000000 		.4byte	0
 10505 0f2f 00000000 		.4byte	0
 10506              	.LLST100:
 10507 0f33 00000000 		.4byte	.LVL304
 10508 0f37 B8000000 		.4byte	.LVL313
 10509 0f3b 0200     		.2byte	0x2
 10510 0f3d 30       		.byte	0x30
 10511 0f3e 9F       		.byte	0x9f
 10512 0f3f B8000000 		.4byte	.LVL313
 10513 0f43 BA000000 		.4byte	.LVL314
 10514 0f47 0100     		.2byte	0x1
 10515 0f49 50       		.byte	0x50
 10516 0f4a BA000000 		.4byte	.LVL314
 10517 0f4e BC000000 		.4byte	.LVL315
 10518 0f52 0200     		.2byte	0x2
 10519 0f54 30       		.byte	0x30
 10520 0f55 9F       		.byte	0x9f
 10521 0f56 BC000000 		.4byte	.LVL315
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 289


 10522 0f5a C8000000 		.4byte	.LFE47
 10523 0f5e 0100     		.2byte	0x1
 10524 0f60 50       		.byte	0x50
 10525 0f61 00000000 		.4byte	0
 10526 0f65 00000000 		.4byte	0
 10527              	.LLST101:
 10528 0f69 00000000 		.4byte	.LVL316
 10529 0f6d 10000000 		.4byte	.LVL317
 10530 0f71 0100     		.2byte	0x1
 10531 0f73 50       		.byte	0x50
 10532 0f74 10000000 		.4byte	.LVL317
 10533 0f78 21000000 		.4byte	.LVL318-1
 10534 0f7c 0100     		.2byte	0x1
 10535 0f7e 53       		.byte	0x53
 10536 0f7f 21000000 		.4byte	.LVL318-1
 10537 0f83 52000000 		.4byte	.LVL319
 10538 0f87 0100     		.2byte	0x1
 10539 0f89 54       		.byte	0x54
 10540 0f8a 52000000 		.4byte	.LVL319
 10541 0f8e 76000000 		.4byte	.LVL321
 10542 0f92 0300     		.2byte	0x3
 10543 0f94 75       		.byte	0x75
 10544 0f95 7C       		.sleb128 -4
 10545 0f96 9F       		.byte	0x9f
 10546 0f97 76000000 		.4byte	.LVL321
 10547 0f9b 78000000 		.4byte	.LVL322
 10548 0f9f 0100     		.2byte	0x1
 10549 0fa1 50       		.byte	0x50
 10550 0fa2 78000000 		.4byte	.LVL322
 10551 0fa6 7A000000 		.4byte	.LVL323
 10552 0faa 0400     		.2byte	0x4
 10553 0fac F3       		.byte	0xf3
 10554 0fad 01       		.uleb128 0x1
 10555 0fae 50       		.byte	0x50
 10556 0faf 9F       		.byte	0x9f
 10557 0fb0 7A000000 		.4byte	.LVL323
 10558 0fb4 82000000 		.4byte	.LVL326
 10559 0fb8 0100     		.2byte	0x1
 10560 0fba 53       		.byte	0x53
 10561 0fbb 82000000 		.4byte	.LVL326
 10562 0fbf 88000000 		.4byte	.LFE48
 10563 0fc3 0400     		.2byte	0x4
 10564 0fc5 F3       		.byte	0xf3
 10565 0fc6 01       		.uleb128 0x1
 10566 0fc7 50       		.byte	0x50
 10567 0fc8 9F       		.byte	0x9f
 10568 0fc9 00000000 		.4byte	0
 10569 0fcd 00000000 		.4byte	0
 10570              	.LLST102:
 10571 0fd1 00000000 		.4byte	.LVL316
 10572 0fd5 10000000 		.4byte	.LVL317
 10573 0fd9 0100     		.2byte	0x1
 10574 0fdb 50       		.byte	0x50
 10575 0fdc 10000000 		.4byte	.LVL317
 10576 0fe0 21000000 		.4byte	.LVL318-1
 10577 0fe4 0100     		.2byte	0x1
 10578 0fe6 53       		.byte	0x53
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 290


 10579 0fe7 21000000 		.4byte	.LVL318-1
 10580 0feb 52000000 		.4byte	.LVL319
 10581 0fef 0100     		.2byte	0x1
 10582 0ff1 54       		.byte	0x54
 10583 0ff2 52000000 		.4byte	.LVL319
 10584 0ff6 76000000 		.4byte	.LVL321
 10585 0ffa 0300     		.2byte	0x3
 10586 0ffc 75       		.byte	0x75
 10587 0ffd 7C       		.sleb128 -4
 10588 0ffe 9F       		.byte	0x9f
 10589 0fff 76000000 		.4byte	.LVL321
 10590 1003 78000000 		.4byte	.LVL322
 10591 1007 0100     		.2byte	0x1
 10592 1009 50       		.byte	0x50
 10593 100a 78000000 		.4byte	.LVL322
 10594 100e 7A000000 		.4byte	.LVL323
 10595 1012 0400     		.2byte	0x4
 10596 1014 F3       		.byte	0xf3
 10597 1015 01       		.uleb128 0x1
 10598 1016 50       		.byte	0x50
 10599 1017 9F       		.byte	0x9f
 10600 1018 7A000000 		.4byte	.LVL323
 10601 101c 82000000 		.4byte	.LVL326
 10602 1020 0100     		.2byte	0x1
 10603 1022 53       		.byte	0x53
 10604 1023 82000000 		.4byte	.LVL326
 10605 1027 88000000 		.4byte	.LFE48
 10606 102b 0400     		.2byte	0x4
 10607 102d F3       		.byte	0xf3
 10608 102e 01       		.uleb128 0x1
 10609 102f 50       		.byte	0x50
 10610 1030 9F       		.byte	0x9f
 10611 1031 00000000 		.4byte	0
 10612 1035 00000000 		.4byte	0
 10613              	.LLST103:
 10614 1039 00000000 		.4byte	.LVL316
 10615 103d 72000000 		.4byte	.LVL320
 10616 1041 0200     		.2byte	0x2
 10617 1043 30       		.byte	0x30
 10618 1044 9F       		.byte	0x9f
 10619 1045 72000000 		.4byte	.LVL320
 10620 1049 76000000 		.4byte	.LVL321
 10621 104d 0200     		.2byte	0x2
 10622 104f 31       		.byte	0x31
 10623 1050 9F       		.byte	0x9f
 10624 1051 76000000 		.4byte	.LVL321
 10625 1055 78000000 		.4byte	.LVL322
 10626 1059 0200     		.2byte	0x2
 10627 105b 30       		.byte	0x30
 10628 105c 9F       		.byte	0x9f
 10629 105d 78000000 		.4byte	.LVL322
 10630 1061 7A000000 		.4byte	.LVL323
 10631 1065 0100     		.2byte	0x1
 10632 1067 50       		.byte	0x50
 10633 1068 7A000000 		.4byte	.LVL323
 10634 106c 80000000 		.4byte	.LVL325
 10635 1070 0200     		.2byte	0x2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 291


 10636 1072 30       		.byte	0x30
 10637 1073 9F       		.byte	0x9f
 10638 1074 80000000 		.4byte	.LVL325
 10639 1078 88000000 		.4byte	.LFE48
 10640 107c 0100     		.2byte	0x1
 10641 107e 50       		.byte	0x50
 10642 107f 00000000 		.4byte	0
 10643 1083 00000000 		.4byte	0
 10644              	.LLST104:
 10645 1087 00000000 		.4byte	.LVL327
 10646 108b 18000000 		.4byte	.LVL330
 10647 108f 0100     		.2byte	0x1
 10648 1091 50       		.byte	0x50
 10649 1092 18000000 		.4byte	.LVL330
 10650 1096 43000000 		.4byte	.LVL334-1
 10651 109a 0100     		.2byte	0x1
 10652 109c 53       		.byte	0x53
 10653 109d 43000000 		.4byte	.LVL334-1
 10654 10a1 8C000000 		.4byte	.LVL335
 10655 10a5 0100     		.2byte	0x1
 10656 10a7 54       		.byte	0x54
 10657 10a8 8C000000 		.4byte	.LVL335
 10658 10ac 8E000000 		.4byte	.LVL336
 10659 10b0 0400     		.2byte	0x4
 10660 10b2 F3       		.byte	0xf3
 10661 10b3 01       		.uleb128 0x1
 10662 10b4 50       		.byte	0x50
 10663 10b5 9F       		.byte	0x9f
 10664 10b6 8E000000 		.4byte	.LVL336
 10665 10ba 98000000 		.4byte	.LFE49
 10666 10be 0100     		.2byte	0x1
 10667 10c0 50       		.byte	0x50
 10668 10c1 00000000 		.4byte	0
 10669 10c5 00000000 		.4byte	0
 10670              	.LLST105:
 10671 10c9 00000000 		.4byte	.LVL327
 10672 10cd 12000000 		.4byte	.LVL329
 10673 10d1 0100     		.2byte	0x1
 10674 10d3 51       		.byte	0x51
 10675 10d4 12000000 		.4byte	.LVL329
 10676 10d8 8E000000 		.4byte	.LVL336
 10677 10dc 0400     		.2byte	0x4
 10678 10de F3       		.byte	0xf3
 10679 10df 01       		.uleb128 0x1
 10680 10e0 51       		.byte	0x51
 10681 10e1 9F       		.byte	0x9f
 10682 10e2 8E000000 		.4byte	.LVL336
 10683 10e6 98000000 		.4byte	.LFE49
 10684 10ea 0100     		.2byte	0x1
 10685 10ec 51       		.byte	0x51
 10686 10ed 00000000 		.4byte	0
 10687 10f1 00000000 		.4byte	0
 10688              	.LLST106:
 10689 10f5 00000000 		.4byte	.LVL327
 10690 10f9 18000000 		.4byte	.LVL330
 10691 10fd 0100     		.2byte	0x1
 10692 10ff 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 292


 10693 1100 18000000 		.4byte	.LVL330
 10694 1104 43000000 		.4byte	.LVL334-1
 10695 1108 0100     		.2byte	0x1
 10696 110a 53       		.byte	0x53
 10697 110b 43000000 		.4byte	.LVL334-1
 10698 110f 8C000000 		.4byte	.LVL335
 10699 1113 0100     		.2byte	0x1
 10700 1115 54       		.byte	0x54
 10701 1116 8C000000 		.4byte	.LVL335
 10702 111a 8E000000 		.4byte	.LVL336
 10703 111e 0400     		.2byte	0x4
 10704 1120 F3       		.byte	0xf3
 10705 1121 01       		.uleb128 0x1
 10706 1122 50       		.byte	0x50
 10707 1123 9F       		.byte	0x9f
 10708 1124 8E000000 		.4byte	.LVL336
 10709 1128 98000000 		.4byte	.LFE49
 10710 112c 0100     		.2byte	0x1
 10711 112e 50       		.byte	0x50
 10712 112f 00000000 		.4byte	0
 10713 1133 00000000 		.4byte	0
 10714              	.LLST107:
 10715 1137 1C000000 		.4byte	.LVL331
 10716 113b 30000000 		.4byte	.LVL333
 10717 113f 0100     		.2byte	0x1
 10718 1141 51       		.byte	0x51
 10719 1142 00000000 		.4byte	0
 10720 1146 00000000 		.4byte	0
 10721              	.LLST108:
 10722 114a 10000000 		.4byte	.LVL328
 10723 114e 28000000 		.4byte	.LVL332
 10724 1152 0100     		.2byte	0x1
 10725 1154 52       		.byte	0x52
 10726 1155 28000000 		.4byte	.LVL332
 10727 1159 43000000 		.4byte	.LVL334-1
 10728 115d 0200     		.2byte	0x2
 10729 115f 73       		.byte	0x73
 10730 1160 2C       		.sleb128 44
 10731 1161 00000000 		.4byte	0
 10732 1165 00000000 		.4byte	0
 10733              	.LLST109:
 10734 1169 00000000 		.4byte	.LVL338
 10735 116d 09000000 		.4byte	.LVL339-1
 10736 1171 0100     		.2byte	0x1
 10737 1173 50       		.byte	0x50
 10738 1174 09000000 		.4byte	.LVL339-1
 10739 1178 78000000 		.4byte	.LVL345
 10740 117c 0100     		.2byte	0x1
 10741 117e 55       		.byte	0x55
 10742 117f 78000000 		.4byte	.LVL345
 10743 1183 80000000 		.4byte	.LFE52
 10744 1187 0400     		.2byte	0x4
 10745 1189 F3       		.byte	0xf3
 10746 118a 01       		.uleb128 0x1
 10747 118b 50       		.byte	0x50
 10748 118c 9F       		.byte	0x9f
 10749 118d 00000000 		.4byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 293


 10750 1191 00000000 		.4byte	0
 10751              	.LLST110:
 10752 1195 00000000 		.4byte	.LVL338
 10753 1199 09000000 		.4byte	.LVL339-1
 10754 119d 0100     		.2byte	0x1
 10755 119f 51       		.byte	0x51
 10756 11a0 09000000 		.4byte	.LVL339-1
 10757 11a4 4A000000 		.4byte	.LVL343
 10758 11a8 0100     		.2byte	0x1
 10759 11aa 54       		.byte	0x54
 10760 11ab 4A000000 		.4byte	.LVL343
 10761 11af 80000000 		.4byte	.LFE52
 10762 11b3 0400     		.2byte	0x4
 10763 11b5 F3       		.byte	0xf3
 10764 11b6 01       		.uleb128 0x1
 10765 11b7 51       		.byte	0x51
 10766 11b8 9F       		.byte	0x9f
 10767 11b9 00000000 		.4byte	0
 10768 11bd 00000000 		.4byte	0
 10769              	.LLST111:
 10770 11c1 4A000000 		.4byte	.LVL343
 10771 11c5 78000000 		.4byte	.LVL345
 10772 11c9 0100     		.2byte	0x1
 10773 11cb 54       		.byte	0x54
 10774 11cc 78000000 		.4byte	.LVL345
 10775 11d0 80000000 		.4byte	.LFE52
 10776 11d4 0100     		.2byte	0x1
 10777 11d6 50       		.byte	0x50
 10778 11d7 00000000 		.4byte	0
 10779 11db 00000000 		.4byte	0
 10780              	.LLST112:
 10781 11df 00000000 		.4byte	.LVL346
 10782 11e3 0D000000 		.4byte	.LVL347-1
 10783 11e7 0100     		.2byte	0x1
 10784 11e9 50       		.byte	0x50
 10785 11ea 0D000000 		.4byte	.LVL347-1
 10786 11ee 9C000000 		.4byte	.LVL357
 10787 11f2 0100     		.2byte	0x1
 10788 11f4 57       		.byte	0x57
 10789 11f5 9C000000 		.4byte	.LVL357
 10790 11f9 A4000000 		.4byte	.LFE53
 10791 11fd 0400     		.2byte	0x4
 10792 11ff F3       		.byte	0xf3
 10793 1200 01       		.uleb128 0x1
 10794 1201 50       		.byte	0x50
 10795 1202 9F       		.byte	0x9f
 10796 1203 00000000 		.4byte	0
 10797 1207 00000000 		.4byte	0
 10798              	.LLST113:
 10799 120b 00000000 		.4byte	.LVL346
 10800 120f 0D000000 		.4byte	.LVL347-1
 10801 1213 0100     		.2byte	0x1
 10802 1215 51       		.byte	0x51
 10803 1216 0D000000 		.4byte	.LVL347-1
 10804 121a 80000000 		.4byte	.LVL351
 10805 121e 0100     		.2byte	0x1
 10806 1220 55       		.byte	0x55
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 294


 10807 1221 80000000 		.4byte	.LVL351
 10808 1225 86000000 		.4byte	.LVL354
 10809 1229 0400     		.2byte	0x4
 10810 122b F3       		.byte	0xf3
 10811 122c 01       		.uleb128 0x1
 10812 122d 51       		.byte	0x51
 10813 122e 9F       		.byte	0x9f
 10814 122f 86000000 		.4byte	.LVL354
 10815 1233 88000000 		.4byte	.LVL355
 10816 1237 0100     		.2byte	0x1
 10817 1239 55       		.byte	0x55
 10818 123a 88000000 		.4byte	.LVL355
 10819 123e A4000000 		.4byte	.LFE53
 10820 1242 0400     		.2byte	0x4
 10821 1244 F3       		.byte	0xf3
 10822 1245 01       		.uleb128 0x1
 10823 1246 51       		.byte	0x51
 10824 1247 9F       		.byte	0x9f
 10825 1248 00000000 		.4byte	0
 10826 124c 00000000 		.4byte	0
 10827              	.LLST114:
 10828 1250 00000000 		.4byte	.LVL346
 10829 1254 0D000000 		.4byte	.LVL347-1
 10830 1258 0100     		.2byte	0x1
 10831 125a 52       		.byte	0x52
 10832 125b 0D000000 		.4byte	.LVL347-1
 10833 125f 84000000 		.4byte	.LVL353
 10834 1263 0100     		.2byte	0x1
 10835 1265 54       		.byte	0x54
 10836 1266 84000000 		.4byte	.LVL353
 10837 126a 86000000 		.4byte	.LVL354
 10838 126e 0400     		.2byte	0x4
 10839 1270 F3       		.byte	0xf3
 10840 1271 01       		.uleb128 0x1
 10841 1272 52       		.byte	0x52
 10842 1273 9F       		.byte	0x9f
 10843 1274 86000000 		.4byte	.LVL354
 10844 1278 88000000 		.4byte	.LVL355
 10845 127c 0100     		.2byte	0x1
 10846 127e 54       		.byte	0x54
 10847 127f 88000000 		.4byte	.LVL355
 10848 1283 A4000000 		.4byte	.LFE53
 10849 1287 0400     		.2byte	0x4
 10850 1289 F3       		.byte	0xf3
 10851 128a 01       		.uleb128 0x1
 10852 128b 52       		.byte	0x52
 10853 128c 9F       		.byte	0x9f
 10854 128d 00000000 		.4byte	0
 10855 1291 00000000 		.4byte	0
 10856              	.LLST115:
 10857 1295 00000000 		.4byte	.LVL346
 10858 1299 0D000000 		.4byte	.LVL347-1
 10859 129d 0100     		.2byte	0x1
 10860 129f 53       		.byte	0x53
 10861 12a0 0D000000 		.4byte	.LVL347-1
 10862 12a4 9C000000 		.4byte	.LVL357
 10863 12a8 0100     		.2byte	0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 295


 10864 12aa 56       		.byte	0x56
 10865 12ab 9C000000 		.4byte	.LVL357
 10866 12af A4000000 		.4byte	.LFE53
 10867 12b3 0400     		.2byte	0x4
 10868 12b5 F3       		.byte	0xf3
 10869 12b6 01       		.uleb128 0x1
 10870 12b7 53       		.byte	0x53
 10871 12b8 9F       		.byte	0x9f
 10872 12b9 00000000 		.4byte	0
 10873 12bd 00000000 		.4byte	0
 10874              	.LLST116:
 10875 12c1 82000000 		.4byte	.LVL352
 10876 12c5 86000000 		.4byte	.LVL354
 10877 12c9 0200     		.2byte	0x2
 10878 12cb 31       		.byte	0x31
 10879 12cc 9F       		.byte	0x9f
 10880 12cd 88000000 		.4byte	.LVL355
 10881 12d1 9C000000 		.4byte	.LVL357
 10882 12d5 0100     		.2byte	0x1
 10883 12d7 54       		.byte	0x54
 10884 12d8 9C000000 		.4byte	.LVL357
 10885 12dc A4000000 		.4byte	.LFE53
 10886 12e0 0100     		.2byte	0x1
 10887 12e2 50       		.byte	0x50
 10888 12e3 00000000 		.4byte	0
 10889 12e7 00000000 		.4byte	0
 10890              	.LLST117:
 10891 12eb 00000000 		.4byte	.LVL358
 10892 12ef 0D000000 		.4byte	.LVL360-1
 10893 12f3 0100     		.2byte	0x1
 10894 12f5 50       		.byte	0x50
 10895 12f6 0D000000 		.4byte	.LVL360-1
 10896 12fa AE000000 		.4byte	.LVL369
 10897 12fe 0100     		.2byte	0x1
 10898 1300 54       		.byte	0x54
 10899 1301 AE000000 		.4byte	.LVL369
 10900 1305 B8000000 		.4byte	.LFE54
 10901 1309 0400     		.2byte	0x4
 10902 130b F3       		.byte	0xf3
 10903 130c 01       		.uleb128 0x1
 10904 130d 50       		.byte	0x50
 10905 130e 9F       		.byte	0x9f
 10906 130f 00000000 		.4byte	0
 10907 1313 00000000 		.4byte	0
 10908              	.LLST118:
 10909 1317 00000000 		.4byte	.LVL358
 10910 131b 0D000000 		.4byte	.LVL360-1
 10911 131f 0100     		.2byte	0x1
 10912 1321 51       		.byte	0x51
 10913 1322 0D000000 		.4byte	.LVL360-1
 10914 1326 32000000 		.4byte	.LVL362
 10915 132a 0100     		.2byte	0x1
 10916 132c 57       		.byte	0x57
 10917 132d 32000000 		.4byte	.LVL362
 10918 1331 38000000 		.4byte	.LVL363
 10919 1335 0400     		.2byte	0x4
 10920 1337 F3       		.byte	0xf3
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 296


 10921 1338 01       		.uleb128 0x1
 10922 1339 51       		.byte	0x51
 10923 133a 9F       		.byte	0x9f
 10924 133b 38000000 		.4byte	.LVL363
 10925 133f 58000000 		.4byte	.LVL364
 10926 1343 0100     		.2byte	0x1
 10927 1345 57       		.byte	0x57
 10928 1346 58000000 		.4byte	.LVL364
 10929 134a B8000000 		.4byte	.LFE54
 10930 134e 0400     		.2byte	0x4
 10931 1350 F3       		.byte	0xf3
 10932 1351 01       		.uleb128 0x1
 10933 1352 51       		.byte	0x51
 10934 1353 9F       		.byte	0x9f
 10935 1354 00000000 		.4byte	0
 10936 1358 00000000 		.4byte	0
 10937              	.LLST119:
 10938 135c 00000000 		.4byte	.LVL358
 10939 1360 0D000000 		.4byte	.LVL360-1
 10940 1364 0100     		.2byte	0x1
 10941 1366 52       		.byte	0x52
 10942 1367 0D000000 		.4byte	.LVL360-1
 10943 136b B8000000 		.4byte	.LFE54
 10944 136f 0400     		.2byte	0x4
 10945 1371 F3       		.byte	0xf3
 10946 1372 01       		.uleb128 0x1
 10947 1373 52       		.byte	0x52
 10948 1374 9F       		.byte	0x9f
 10949 1375 00000000 		.4byte	0
 10950 1379 00000000 		.4byte	0
 10951              	.LLST120:
 10952 137d 00000000 		.4byte	.LVL358
 10953 1381 0D000000 		.4byte	.LVL360-1
 10954 1385 0100     		.2byte	0x1
 10955 1387 53       		.byte	0x53
 10956 1388 0D000000 		.4byte	.LVL360-1
 10957 138c 6E000000 		.4byte	.LVL366
 10958 1390 0100     		.2byte	0x1
 10959 1392 56       		.byte	0x56
 10960 1393 6E000000 		.4byte	.LVL366
 10961 1397 B8000000 		.4byte	.LFE54
 10962 139b 0400     		.2byte	0x4
 10963 139d F3       		.byte	0xf3
 10964 139e 01       		.uleb128 0x1
 10965 139f 53       		.byte	0x53
 10966 13a0 9F       		.byte	0x9f
 10967 13a1 00000000 		.4byte	0
 10968 13a5 00000000 		.4byte	0
 10969              	.LLST121:
 10970 13a9 0A000000 		.4byte	.LVL359
 10971 13ad 0D000000 		.4byte	.LVL360-1
 10972 13b1 0100     		.2byte	0x1
 10973 13b3 50       		.byte	0x50
 10974 13b4 0D000000 		.4byte	.LVL360-1
 10975 13b8 AE000000 		.4byte	.LVL369
 10976 13bc 0100     		.2byte	0x1
 10977 13be 54       		.byte	0x54
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 297


 10978 13bf AE000000 		.4byte	.LVL369
 10979 13c3 B8000000 		.4byte	.LFE54
 10980 13c7 0400     		.2byte	0x4
 10981 13c9 F3       		.byte	0xf3
 10982 13ca 01       		.uleb128 0x1
 10983 13cb 50       		.byte	0x50
 10984 13cc 9F       		.byte	0x9f
 10985 13cd 00000000 		.4byte	0
 10986 13d1 00000000 		.4byte	0
 10987              	.LLST122:
 10988 13d5 0A000000 		.4byte	.LVL359
 10989 13d9 58000000 		.4byte	.LVL364
 10990 13dd 0200     		.2byte	0x2
 10991 13df 31       		.byte	0x31
 10992 13e0 9F       		.byte	0x9f
 10993 13e1 58000000 		.4byte	.LVL364
 10994 13e5 AE000000 		.4byte	.LVL369
 10995 13e9 0100     		.2byte	0x1
 10996 13eb 55       		.byte	0x55
 10997 13ec AE000000 		.4byte	.LVL369
 10998 13f0 B8000000 		.4byte	.LFE54
 10999 13f4 0100     		.2byte	0x1
 11000 13f6 50       		.byte	0x50
 11001 13f7 00000000 		.4byte	0
 11002 13fb 00000000 		.4byte	0
 11003              	.LLST123:
 11004 13ff 1A000000 		.4byte	.LVL361
 11005 1403 63000000 		.4byte	.LVL365-1
 11006 1407 0100     		.2byte	0x1
 11007 1409 53       		.byte	0x53
 11008 140a 00000000 		.4byte	0
 11009 140e 00000000 		.4byte	0
 11010              	.LLST124:
 11011 1412 00000000 		.4byte	.LVL370
 11012 1416 72000000 		.4byte	.LVL379
 11013 141a 0100     		.2byte	0x1
 11014 141c 50       		.byte	0x50
 11015 141d 72000000 		.4byte	.LVL379
 11016 1421 9C000000 		.4byte	.LVL382
 11017 1425 0100     		.2byte	0x1
 11018 1427 56       		.byte	0x56
 11019 1428 9C000000 		.4byte	.LVL382
 11020 142c A2000000 		.4byte	.LVL383
 11021 1430 0100     		.2byte	0x1
 11022 1432 50       		.byte	0x50
 11023 1433 A2000000 		.4byte	.LVL383
 11024 1437 C6000000 		.4byte	.LVL385
 11025 143b 0100     		.2byte	0x1
 11026 143d 56       		.byte	0x56
 11027 143e C6000000 		.4byte	.LVL385
 11028 1442 D8000000 		.4byte	.LFE55
 11029 1446 0400     		.2byte	0x4
 11030 1448 F3       		.byte	0xf3
 11031 1449 01       		.uleb128 0x1
 11032 144a 50       		.byte	0x50
 11033 144b 9F       		.byte	0x9f
 11034 144c 00000000 		.4byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 298


 11035 1450 00000000 		.4byte	0
 11036              	.LLST125:
 11037 1454 00000000 		.4byte	.LVL370
 11038 1458 3A000000 		.4byte	.LVL375
 11039 145c 0100     		.2byte	0x1
 11040 145e 51       		.byte	0x51
 11041 145f 3A000000 		.4byte	.LVL375
 11042 1463 40000000 		.4byte	.LVL376
 11043 1467 0400     		.2byte	0x4
 11044 1469 F3       		.byte	0xf3
 11045 146a 01       		.uleb128 0x1
 11046 146b 51       		.byte	0x51
 11047 146c 9F       		.byte	0x9f
 11048 146d 40000000 		.4byte	.LVL376
 11049 1471 60000000 		.4byte	.LVL377
 11050 1475 0100     		.2byte	0x1
 11051 1477 51       		.byte	0x51
 11052 1478 60000000 		.4byte	.LVL377
 11053 147c D8000000 		.4byte	.LFE55
 11054 1480 0400     		.2byte	0x4
 11055 1482 F3       		.byte	0xf3
 11056 1483 01       		.uleb128 0x1
 11057 1484 51       		.byte	0x51
 11058 1485 9F       		.byte	0x9f
 11059 1486 00000000 		.4byte	0
 11060 148a 00000000 		.4byte	0
 11061              	.LLST126:
 11062 148e 00000000 		.4byte	.LVL370
 11063 1492 2A000000 		.4byte	.LVL374
 11064 1496 0100     		.2byte	0x1
 11065 1498 52       		.byte	0x52
 11066 1499 2A000000 		.4byte	.LVL374
 11067 149d D8000000 		.4byte	.LFE55
 11068 14a1 0400     		.2byte	0x4
 11069 14a3 F3       		.byte	0xf3
 11070 14a4 01       		.uleb128 0x1
 11071 14a5 52       		.byte	0x52
 11072 14a6 9F       		.byte	0x9f
 11073 14a7 00000000 		.4byte	0
 11074 14ab 00000000 		.4byte	0
 11075              	.LLST127:
 11076 14af 00000000 		.4byte	.LVL370
 11077 14b3 20000000 		.4byte	.LVL372
 11078 14b7 0100     		.2byte	0x1
 11079 14b9 53       		.byte	0x53
 11080 14ba 20000000 		.4byte	.LVL372
 11081 14be D8000000 		.4byte	.LFE55
 11082 14c2 0400     		.2byte	0x4
 11083 14c4 F3       		.byte	0xf3
 11084 14c5 01       		.uleb128 0x1
 11085 14c6 53       		.byte	0x53
 11086 14c7 9F       		.byte	0x9f
 11087 14c8 00000000 		.4byte	0
 11088 14cc 00000000 		.4byte	0
 11089              	.LLST128:
 11090 14d0 00000000 		.4byte	.LVL370
 11091 14d4 CE000000 		.4byte	.LVL387
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 299


 11092 14d8 0200     		.2byte	0x2
 11093 14da 91       		.byte	0x91
 11094 14db 00       		.sleb128 0
 11095 14dc CE000000 		.4byte	.LVL387
 11096 14e0 D8000000 		.4byte	.LFE55
 11097 14e4 0200     		.2byte	0x2
 11098 14e6 7D       		.byte	0x7d
 11099 14e7 00       		.sleb128 0
 11100 14e8 00000000 		.4byte	0
 11101 14ec 00000000 		.4byte	0
 11102              	.LLST129:
 11103 14f0 02000000 		.4byte	.LVL371
 11104 14f4 72000000 		.4byte	.LVL379
 11105 14f8 0100     		.2byte	0x1
 11106 14fa 50       		.byte	0x50
 11107 14fb 72000000 		.4byte	.LVL379
 11108 14ff 9C000000 		.4byte	.LVL382
 11109 1503 0100     		.2byte	0x1
 11110 1505 56       		.byte	0x56
 11111 1506 9C000000 		.4byte	.LVL382
 11112 150a A2000000 		.4byte	.LVL383
 11113 150e 0100     		.2byte	0x1
 11114 1510 50       		.byte	0x50
 11115 1511 A2000000 		.4byte	.LVL383
 11116 1515 C6000000 		.4byte	.LVL385
 11117 1519 0100     		.2byte	0x1
 11118 151b 56       		.byte	0x56
 11119 151c C6000000 		.4byte	.LVL385
 11120 1520 D8000000 		.4byte	.LFE55
 11121 1524 0400     		.2byte	0x4
 11122 1526 F3       		.byte	0xf3
 11123 1527 01       		.uleb128 0x1
 11124 1528 50       		.byte	0x50
 11125 1529 9F       		.byte	0x9f
 11126 152a 00000000 		.4byte	0
 11127 152e 00000000 		.4byte	0
 11128              	.LLST130:
 11129 1532 22000000 		.4byte	.LVL373
 11130 1536 68000000 		.4byte	.LVL378
 11131 153a 0100     		.2byte	0x1
 11132 153c 53       		.byte	0x53
 11133 153d 00000000 		.4byte	0
 11134 1541 00000000 		.4byte	0
 11135              	.LLST131:
 11136 1545 02000000 		.4byte	.LVL371
 11137 1549 60000000 		.4byte	.LVL377
 11138 154d 0200     		.2byte	0x2
 11139 154f 31       		.byte	0x31
 11140 1550 9F       		.byte	0x9f
 11141 1551 60000000 		.4byte	.LVL377
 11142 1555 CE000000 		.4byte	.LVL387
 11143 1559 0100     		.2byte	0x1
 11144 155b 54       		.byte	0x54
 11145 155c CE000000 		.4byte	.LVL387
 11146 1560 D8000000 		.4byte	.LFE55
 11147 1564 0100     		.2byte	0x1
 11148 1566 50       		.byte	0x50
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 300


 11149 1567 00000000 		.4byte	0
 11150 156b 00000000 		.4byte	0
 11151              	.LLST132:
 11152 156f C6000000 		.4byte	.LVL385
 11153 1573 CA000000 		.4byte	.LVL386
 11154 1577 0100     		.2byte	0x1
 11155 1579 55       		.byte	0x55
 11156 157a 00000000 		.4byte	0
 11157 157e 00000000 		.4byte	0
 11158              	.LLST133:
 11159 1582 00000000 		.4byte	.LVL388
 11160 1586 3C000000 		.4byte	.LVL392
 11161 158a 0100     		.2byte	0x1
 11162 158c 50       		.byte	0x50
 11163 158d 3C000000 		.4byte	.LVL392
 11164 1591 66000000 		.4byte	.LVL395
 11165 1595 0100     		.2byte	0x1
 11166 1597 54       		.byte	0x54
 11167 1598 66000000 		.4byte	.LVL395
 11168 159c 6C000000 		.4byte	.LVL397
 11169 15a0 0100     		.2byte	0x1
 11170 15a2 50       		.byte	0x50
 11171 15a3 6C000000 		.4byte	.LVL397
 11172 15a7 8C000000 		.4byte	.LVL399
 11173 15ab 0100     		.2byte	0x1
 11174 15ad 54       		.byte	0x54
 11175 15ae 8C000000 		.4byte	.LVL399
 11176 15b2 9C000000 		.4byte	.LFE56
 11177 15b6 0400     		.2byte	0x4
 11178 15b8 F3       		.byte	0xf3
 11179 15b9 01       		.uleb128 0x1
 11180 15ba 50       		.byte	0x50
 11181 15bb 9F       		.byte	0x9f
 11182 15bc 00000000 		.4byte	0
 11183 15c0 00000000 		.4byte	0
 11184              	.LLST134:
 11185 15c4 00000000 		.4byte	.LVL388
 11186 15c8 3F000000 		.4byte	.LVL393-1
 11187 15cc 0100     		.2byte	0x1
 11188 15ce 51       		.byte	0x51
 11189 15cf 3F000000 		.4byte	.LVL393-1
 11190 15d3 66000000 		.4byte	.LVL395
 11191 15d7 0100     		.2byte	0x1
 11192 15d9 56       		.byte	0x56
 11193 15da 66000000 		.4byte	.LVL395
 11194 15de 6A000000 		.4byte	.LVL396
 11195 15e2 0100     		.2byte	0x1
 11196 15e4 51       		.byte	0x51
 11197 15e5 6A000000 		.4byte	.LVL396
 11198 15e9 8C000000 		.4byte	.LVL399
 11199 15ed 0100     		.2byte	0x1
 11200 15ef 56       		.byte	0x56
 11201 15f0 8C000000 		.4byte	.LVL399
 11202 15f4 9C000000 		.4byte	.LFE56
 11203 15f8 0400     		.2byte	0x4
 11204 15fa F3       		.byte	0xf3
 11205 15fb 01       		.uleb128 0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 301


 11206 15fc 51       		.byte	0x51
 11207 15fd 9F       		.byte	0x9f
 11208 15fe 00000000 		.4byte	0
 11209 1602 00000000 		.4byte	0
 11210              	.LLST135:
 11211 1606 02000000 		.4byte	.LVL389
 11212 160a 3C000000 		.4byte	.LVL392
 11213 160e 0100     		.2byte	0x1
 11214 1610 50       		.byte	0x50
 11215 1611 3C000000 		.4byte	.LVL392
 11216 1615 66000000 		.4byte	.LVL395
 11217 1619 0100     		.2byte	0x1
 11218 161b 54       		.byte	0x54
 11219 161c 66000000 		.4byte	.LVL395
 11220 1620 6C000000 		.4byte	.LVL397
 11221 1624 0100     		.2byte	0x1
 11222 1626 50       		.byte	0x50
 11223 1627 6C000000 		.4byte	.LVL397
 11224 162b 8C000000 		.4byte	.LVL399
 11225 162f 0100     		.2byte	0x1
 11226 1631 54       		.byte	0x54
 11227 1632 8C000000 		.4byte	.LVL399
 11228 1636 9C000000 		.4byte	.LFE56
 11229 163a 0400     		.2byte	0x4
 11230 163c F3       		.byte	0xf3
 11231 163d 01       		.uleb128 0x1
 11232 163e 50       		.byte	0x50
 11233 163f 9F       		.byte	0x9f
 11234 1640 00000000 		.4byte	0
 11235 1644 00000000 		.4byte	0
 11236              	.LLST136:
 11237 1648 1C000000 		.4byte	.LVL390
 11238 164c 32000000 		.4byte	.LVL391
 11239 1650 0100     		.2byte	0x1
 11240 1652 53       		.byte	0x53
 11241 1653 00000000 		.4byte	0
 11242 1657 00000000 		.4byte	0
 11243              	.LLST137:
 11244 165b 8C000000 		.4byte	.LVL399
 11245 165f 90000000 		.4byte	.LVL400
 11246 1663 0100     		.2byte	0x1
 11247 1665 55       		.byte	0x55
 11248 1666 00000000 		.4byte	0
 11249 166a 00000000 		.4byte	0
 11250              	.LLST138:
 11251 166e 00000000 		.4byte	.LVL401
 11252 1672 0C000000 		.4byte	.LVL402
 11253 1676 0100     		.2byte	0x1
 11254 1678 50       		.byte	0x50
 11255 1679 00000000 		.4byte	0
 11256 167d 00000000 		.4byte	0
 11257              	.LLST139:
 11258 1681 0C000000 		.4byte	.LVL402
 11259 1685 22000000 		.4byte	.LVL405
 11260 1689 0100     		.2byte	0x1
 11261 168b 54       		.byte	0x54
 11262 168c 24000000 		.4byte	.LVL406
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 302


 11263 1690 26000000 		.4byte	.LVL407
 11264 1694 0100     		.2byte	0x1
 11265 1696 54       		.byte	0x54
 11266 1697 00000000 		.4byte	0
 11267 169b 00000000 		.4byte	0
 11268              	.LLST140:
 11269 169f 20000000 		.4byte	.LVL404
 11270 16a3 24000000 		.4byte	.LVL406
 11271 16a7 0200     		.2byte	0x2
 11272 16a9 31       		.byte	0x31
 11273 16aa 9F       		.byte	0x9f
 11274 16ab 26000000 		.4byte	.LVL407
 11275 16af 2E000000 		.4byte	.LVL409
 11276 16b3 0100     		.2byte	0x1
 11277 16b5 54       		.byte	0x54
 11278 16b6 2E000000 		.4byte	.LVL409
 11279 16ba 34000000 		.4byte	.LFE57
 11280 16be 0100     		.2byte	0x1
 11281 16c0 50       		.byte	0x50
 11282 16c1 00000000 		.4byte	0
 11283 16c5 00000000 		.4byte	0
 11284              		.section	.debug_aranges,"",%progbits
 11285 0000 C4010000 		.4byte	0x1c4
 11286 0004 0200     		.2byte	0x2
 11287 0006 00000000 		.4byte	.Ldebug_info0
 11288 000a 04       		.byte	0x4
 11289 000b 00       		.byte	0
 11290 000c 0000     		.2byte	0
 11291 000e 0000     		.2byte	0
 11292 0010 00000000 		.4byte	.LFB16
 11293 0014 2C000000 		.4byte	.LFE16-.LFB16
 11294 0018 00000000 		.4byte	.LFB41
 11295 001c 14000000 		.4byte	.LFE41-.LFB41
 11296 0020 00000000 		.4byte	.LFB44
 11297 0024 24000000 		.4byte	.LFE44-.LFB44
 11298 0028 00000000 		.4byte	.LFB43
 11299 002c 12000000 		.4byte	.LFE43-.LFB43
 11300 0030 00000000 		.4byte	.LFB6
 11301 0034 90000000 		.4byte	.LFE6-.LFB6
 11302 0038 00000000 		.4byte	.LFB39
 11303 003c 58000000 		.4byte	.LFE39-.LFB39
 11304 0040 00000000 		.4byte	.LFB7
 11305 0044 AC000000 		.4byte	.LFE7-.LFB7
 11306 0048 00000000 		.4byte	.LFB40
 11307 004c 44000000 		.4byte	.LFE40-.LFB40
 11308 0050 00000000 		.4byte	.LFB38
 11309 0054 08000000 		.4byte	.LFE38-.LFB38
 11310 0058 00000000 		.4byte	.LFB58
 11311 005c 84000000 		.4byte	.LFE58-.LFB58
 11312 0060 00000000 		.4byte	.LFB5
 11313 0064 62000000 		.4byte	.LFE5-.LFB5
 11314 0068 00000000 		.4byte	.LFB8
 11315 006c BC000000 		.4byte	.LFE8-.LFB8
 11316 0070 00000000 		.4byte	.LFB11
 11317 0074 70000000 		.4byte	.LFE11-.LFB11
 11318 0078 00000000 		.4byte	.LFB12
 11319 007c 20000000 		.4byte	.LFE12-.LFB12
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 303


 11320 0080 00000000 		.4byte	.LFB13
 11321 0084 28000000 		.4byte	.LFE13-.LFB13
 11322 0088 00000000 		.4byte	.LFB14
 11323 008c E0000000 		.4byte	.LFE14-.LFB14
 11324 0090 00000000 		.4byte	.LFB17
 11325 0094 78000000 		.4byte	.LFE17-.LFB17
 11326 0098 00000000 		.4byte	.LFB18
 11327 009c 88000000 		.4byte	.LFE18-.LFB18
 11328 00a0 00000000 		.4byte	.LFB19
 11329 00a4 60000000 		.4byte	.LFE19-.LFB19
 11330 00a8 00000000 		.4byte	.LFB20
 11331 00ac 24000000 		.4byte	.LFE20-.LFB20
 11332 00b0 00000000 		.4byte	.LFB21
 11333 00b4 14000000 		.4byte	.LFE21-.LFB21
 11334 00b8 00000000 		.4byte	.LFB23
 11335 00bc 0C000000 		.4byte	.LFE23-.LFB23
 11336 00c0 00000000 		.4byte	.LFB24
 11337 00c4 0C000000 		.4byte	.LFE24-.LFB24
 11338 00c8 00000000 		.4byte	.LFB25
 11339 00cc 0C000000 		.4byte	.LFE25-.LFB25
 11340 00d0 00000000 		.4byte	.LFB26
 11341 00d4 14000000 		.4byte	.LFE26-.LFB26
 11342 00d8 00000000 		.4byte	.LFB27
 11343 00dc 00010000 		.4byte	.LFE27-.LFB27
 11344 00e0 00000000 		.4byte	.LFB22
 11345 00e4 D8000000 		.4byte	.LFE22-.LFB22
 11346 00e8 00000000 		.4byte	.LFB9
 11347 00ec 6C000000 		.4byte	.LFE9-.LFB9
 11348 00f0 00000000 		.4byte	.LFB10
 11349 00f4 34000000 		.4byte	.LFE10-.LFB10
 11350 00f8 00000000 		.4byte	.LFB28
 11351 00fc 70000000 		.4byte	.LFE28-.LFB28
 11352 0100 00000000 		.4byte	.LFB15
 11353 0104 C0000000 		.4byte	.LFE15-.LFB15
 11354 0108 00000000 		.4byte	.LFB29
 11355 010c 20000000 		.4byte	.LFE29-.LFB29
 11356 0110 00000000 		.4byte	.LFB30
 11357 0114 28000000 		.4byte	.LFE30-.LFB30
 11358 0118 00000000 		.4byte	.LFB31
 11359 011c 28000000 		.4byte	.LFE31-.LFB31
 11360 0120 00000000 		.4byte	.LFB32
 11361 0124 74000000 		.4byte	.LFE32-.LFB32
 11362 0128 00000000 		.4byte	.LFB33
 11363 012c 54000000 		.4byte	.LFE33-.LFB33
 11364 0130 00000000 		.4byte	.LFB34
 11365 0134 20000000 		.4byte	.LFE34-.LFB34
 11366 0138 00000000 		.4byte	.LFB35
 11367 013c 14000000 		.4byte	.LFE35-.LFB35
 11368 0140 00000000 		.4byte	.LFB36
 11369 0144 58000000 		.4byte	.LFE36-.LFB36
 11370 0148 00000000 		.4byte	.LFB37
 11371 014c 10000000 		.4byte	.LFE37-.LFB37
 11372 0150 00000000 		.4byte	.LFB42
 11373 0154 18000000 		.4byte	.LFE42-.LFB42
 11374 0158 00000000 		.4byte	.LFB45
 11375 015c 0C000000 		.4byte	.LFE45-.LFB45
 11376 0160 00000000 		.4byte	.LFB46
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 304


 11377 0164 20000000 		.4byte	.LFE46-.LFB46
 11378 0168 00000000 		.4byte	.LFB47
 11379 016c C8000000 		.4byte	.LFE47-.LFB47
 11380 0170 00000000 		.4byte	.LFB48
 11381 0174 88000000 		.4byte	.LFE48-.LFB48
 11382 0178 00000000 		.4byte	.LFB49
 11383 017c 98000000 		.4byte	.LFE49-.LFB49
 11384 0180 00000000 		.4byte	.LFB50
 11385 0184 20000000 		.4byte	.LFE50-.LFB50
 11386 0188 00000000 		.4byte	.LFB51
 11387 018c 20000000 		.4byte	.LFE51-.LFB51
 11388 0190 00000000 		.4byte	.LFB52
 11389 0194 80000000 		.4byte	.LFE52-.LFB52
 11390 0198 00000000 		.4byte	.LFB53
 11391 019c A4000000 		.4byte	.LFE53-.LFB53
 11392 01a0 00000000 		.4byte	.LFB54
 11393 01a4 B8000000 		.4byte	.LFE54-.LFB54
 11394 01a8 00000000 		.4byte	.LFB55
 11395 01ac D8000000 		.4byte	.LFE55-.LFB55
 11396 01b0 00000000 		.4byte	.LFB56
 11397 01b4 9C000000 		.4byte	.LFE56-.LFB56
 11398 01b8 00000000 		.4byte	.LFB57
 11399 01bc 34000000 		.4byte	.LFE57-.LFB57
 11400 01c0 00000000 		.4byte	0
 11401 01c4 00000000 		.4byte	0
 11402              		.section	.debug_ranges,"",%progbits
 11403              	.Ldebug_ranges0:
 11404 0000 0E000000 		.4byte	.LBB40
 11405 0004 3E000000 		.4byte	.LBE40
 11406 0008 44000000 		.4byte	.LBB42
 11407 000c D4000000 		.4byte	.LBE42
 11408 0010 E6000000 		.4byte	.LBB43
 11409 0014 EA000000 		.4byte	.LBE43
 11410 0018 00000000 		.4byte	0
 11411 001c 00000000 		.4byte	0
 11412 0020 0A000000 		.4byte	.LBB45
 11413 0024 20000000 		.4byte	.LBE45
 11414 0028 24000000 		.4byte	.LBB46
 11415 002c 2C000000 		.4byte	.LBE46
 11416 0030 34000000 		.4byte	.LBB47
 11417 0034 4A000000 		.4byte	.LBE47
 11418 0038 00000000 		.4byte	0
 11419 003c 00000000 		.4byte	0
 11420 0040 00000000 		.4byte	.LFB16
 11421 0044 2C000000 		.4byte	.LFE16
 11422 0048 00000000 		.4byte	.LFB41
 11423 004c 14000000 		.4byte	.LFE41
 11424 0050 00000000 		.4byte	.LFB44
 11425 0054 24000000 		.4byte	.LFE44
 11426 0058 00000000 		.4byte	.LFB43
 11427 005c 12000000 		.4byte	.LFE43
 11428 0060 00000000 		.4byte	.LFB6
 11429 0064 90000000 		.4byte	.LFE6
 11430 0068 00000000 		.4byte	.LFB39
 11431 006c 58000000 		.4byte	.LFE39
 11432 0070 00000000 		.4byte	.LFB7
 11433 0074 AC000000 		.4byte	.LFE7
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 305


 11434 0078 00000000 		.4byte	.LFB40
 11435 007c 44000000 		.4byte	.LFE40
 11436 0080 00000000 		.4byte	.LFB38
 11437 0084 08000000 		.4byte	.LFE38
 11438 0088 00000000 		.4byte	.LFB58
 11439 008c 84000000 		.4byte	.LFE58
 11440 0090 00000000 		.4byte	.LFB5
 11441 0094 62000000 		.4byte	.LFE5
 11442 0098 00000000 		.4byte	.LFB8
 11443 009c BC000000 		.4byte	.LFE8
 11444 00a0 00000000 		.4byte	.LFB11
 11445 00a4 70000000 		.4byte	.LFE11
 11446 00a8 00000000 		.4byte	.LFB12
 11447 00ac 20000000 		.4byte	.LFE12
 11448 00b0 00000000 		.4byte	.LFB13
 11449 00b4 28000000 		.4byte	.LFE13
 11450 00b8 00000000 		.4byte	.LFB14
 11451 00bc E0000000 		.4byte	.LFE14
 11452 00c0 00000000 		.4byte	.LFB17
 11453 00c4 78000000 		.4byte	.LFE17
 11454 00c8 00000000 		.4byte	.LFB18
 11455 00cc 88000000 		.4byte	.LFE18
 11456 00d0 00000000 		.4byte	.LFB19
 11457 00d4 60000000 		.4byte	.LFE19
 11458 00d8 00000000 		.4byte	.LFB20
 11459 00dc 24000000 		.4byte	.LFE20
 11460 00e0 00000000 		.4byte	.LFB21
 11461 00e4 14000000 		.4byte	.LFE21
 11462 00e8 00000000 		.4byte	.LFB23
 11463 00ec 0C000000 		.4byte	.LFE23
 11464 00f0 00000000 		.4byte	.LFB24
 11465 00f4 0C000000 		.4byte	.LFE24
 11466 00f8 00000000 		.4byte	.LFB25
 11467 00fc 0C000000 		.4byte	.LFE25
 11468 0100 00000000 		.4byte	.LFB26
 11469 0104 14000000 		.4byte	.LFE26
 11470 0108 00000000 		.4byte	.LFB27
 11471 010c 00010000 		.4byte	.LFE27
 11472 0110 00000000 		.4byte	.LFB22
 11473 0114 D8000000 		.4byte	.LFE22
 11474 0118 00000000 		.4byte	.LFB9
 11475 011c 6C000000 		.4byte	.LFE9
 11476 0120 00000000 		.4byte	.LFB10
 11477 0124 34000000 		.4byte	.LFE10
 11478 0128 00000000 		.4byte	.LFB28
 11479 012c 70000000 		.4byte	.LFE28
 11480 0130 00000000 		.4byte	.LFB15
 11481 0134 C0000000 		.4byte	.LFE15
 11482 0138 00000000 		.4byte	.LFB29
 11483 013c 20000000 		.4byte	.LFE29
 11484 0140 00000000 		.4byte	.LFB30
 11485 0144 28000000 		.4byte	.LFE30
 11486 0148 00000000 		.4byte	.LFB31
 11487 014c 28000000 		.4byte	.LFE31
 11488 0150 00000000 		.4byte	.LFB32
 11489 0154 74000000 		.4byte	.LFE32
 11490 0158 00000000 		.4byte	.LFB33
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 306


 11491 015c 54000000 		.4byte	.LFE33
 11492 0160 00000000 		.4byte	.LFB34
 11493 0164 20000000 		.4byte	.LFE34
 11494 0168 00000000 		.4byte	.LFB35
 11495 016c 14000000 		.4byte	.LFE35
 11496 0170 00000000 		.4byte	.LFB36
 11497 0174 58000000 		.4byte	.LFE36
 11498 0178 00000000 		.4byte	.LFB37
 11499 017c 10000000 		.4byte	.LFE37
 11500 0180 00000000 		.4byte	.LFB42
 11501 0184 18000000 		.4byte	.LFE42
 11502 0188 00000000 		.4byte	.LFB45
 11503 018c 0C000000 		.4byte	.LFE45
 11504 0190 00000000 		.4byte	.LFB46
 11505 0194 20000000 		.4byte	.LFE46
 11506 0198 00000000 		.4byte	.LFB47
 11507 019c C8000000 		.4byte	.LFE47
 11508 01a0 00000000 		.4byte	.LFB48
 11509 01a4 88000000 		.4byte	.LFE48
 11510 01a8 00000000 		.4byte	.LFB49
 11511 01ac 98000000 		.4byte	.LFE49
 11512 01b0 00000000 		.4byte	.LFB50
 11513 01b4 20000000 		.4byte	.LFE50
 11514 01b8 00000000 		.4byte	.LFB51
 11515 01bc 20000000 		.4byte	.LFE51
 11516 01c0 00000000 		.4byte	.LFB52
 11517 01c4 80000000 		.4byte	.LFE52
 11518 01c8 00000000 		.4byte	.LFB53
 11519 01cc A4000000 		.4byte	.LFE53
 11520 01d0 00000000 		.4byte	.LFB54
 11521 01d4 B8000000 		.4byte	.LFE54
 11522 01d8 00000000 		.4byte	.LFB55
 11523 01dc D8000000 		.4byte	.LFE55
 11524 01e0 00000000 		.4byte	.LFB56
 11525 01e4 9C000000 		.4byte	.LFE56
 11526 01e8 00000000 		.4byte	.LFB57
 11527 01ec 34000000 		.4byte	.LFE57
 11528 01f0 00000000 		.4byte	0
 11529 01f4 00000000 		.4byte	0
 11530              		.section	.debug_line,"",%progbits
 11531              	.Ldebug_line0:
 11532 0000 4B0A0000 		.section	.debug_str,"MS",%progbits,1
 11532      02002C02 
 11532      00000201 
 11532      FB0E0D00 
 11532      01010101 
 11533              	.LASF233:
 11534 0000 764C6973 		.ascii	"vListInsert\000"
 11534      74496E73 
 11534      65727400 
 11535              	.LASF45:
 11536 000c 70635461 		.ascii	"pcTaskName\000"
 11536      736B4E61 
 11536      6D6500
 11537              	.LASF31:
 11538 0017 75784E75 		.ascii	"uxNumberOfItems\000"
 11538      6D626572 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 307


 11538      4F664974 
 11538      656D7300 
 11539              	.LASF239:
 11540 0027 46726565 		.ascii	"FreeRTOS\\src\\tasks.c\000"
 11540      52544F53 
 11540      5C737263 
 11540      5C746173 
 11540      6B732E63 
 11541              	.LASF231:
 11542 003c 76506F72 		.ascii	"vPortExitCritical\000"
 11542      74457869 
 11542      74437269 
 11542      74696361 
 11542      6C00
 11543              	.LASF236:
 11544 004e 78506F72 		.ascii	"xPortStartScheduler\000"
 11544      74537461 
 11544      72745363 
 11544      68656475 
 11544      6C657200 
 11545              	.LASF43:
 11546 0062 75785072 		.ascii	"uxPriority\000"
 11546      696F7269 
 11546      747900
 11547              	.LASF152:
 11548 006d 7078436F 		.ascii	"pxConstList\000"
 11548      6E73744C 
 11548      69737400 
 11549              	.LASF114:
 11550 0079 70785374 		.ascii	"pxStateList\000"
 11550      6174654C 
 11550      69737400 
 11551              	.LASF53:
 11552 0085 65537573 		.ascii	"eSuspended\000"
 11552      70656E64 
 11552      656400
 11553              	.LASF39:
 11554 0090 74736B54 		.ascii	"tskTaskControlBlock\000"
 11554      61736B43 
 11554      6F6E7472 
 11554      6F6C426C 
 11554      6F636B00 
 11555              	.LASF143:
 11556 00a4 75785065 		.ascii	"uxPendedCounts\000"
 11556      6E646564 
 11556      436F756E 
 11556      747300
 11557              	.LASF192:
 11558 00b3 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11558      7473546F 
 11558      436C6561 
 11558      724F6E45 
 11558      78697400 
 11559              	.LASF92:
 11560 00c7 70727649 		.ascii	"prvInitialiseNewTask\000"
 11560      6E697469 
 11560      616C6973 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 308


 11560      654E6577 
 11560      5461736B 
 11561              	.LASF175:
 11562 00dc 78546173 		.ascii	"xTaskGetSchedulerState\000"
 11562      6B476574 
 11562      53636865 
 11562      64756C65 
 11562      72537461 
 11563              	.LASF201:
 11564 00f3 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11564      67686572 
 11564      5072696F 
 11564      72697479 
 11564      5461736B 
 11565              	.LASF57:
 11566 010d 654E6F41 		.ascii	"eNoAction\000"
 11566      6374696F 
 11566      6E00
 11567              	.LASF215:
 11568 0117 7578546F 		.ascii	"uxTopReadyPriority\000"
 11568      70526561 
 11568      64795072 
 11568      696F7269 
 11568      747900
 11569              	.LASF115:
 11570 012a 70784465 		.ascii	"pxDelayedList\000"
 11570      6C617965 
 11570      644C6973 
 11570      7400
 11571              	.LASF0:
 11572 0138 756E7369 		.ascii	"unsigned int\000"
 11572      676E6564 
 11572      20696E74 
 11572      00
 11573              	.LASF156:
 11574 0145 70784576 		.ascii	"pxEventList\000"
 11574      656E744C 
 11574      69737400 
 11575              	.LASF216:
 11576 0151 78536368 		.ascii	"xSchedulerRunning\000"
 11576      6564756C 
 11576      65725275 
 11576      6E6E696E 
 11576      6700
 11577              	.LASF32:
 11578 0163 7078496E 		.ascii	"pxIndex\000"
 11578      64657800 
 11579              	.LASF20:
 11580 016b 53746163 		.ascii	"StackType_t\000"
 11580      6B547970 
 11580      655F7400 
 11581              	.LASF63:
 11582 0177 7854494D 		.ascii	"xTIME_OUT\000"
 11582      455F4F55 
 11582      5400
 11583              	.LASF211:
 11584 0181 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 309


 11584      6C657465 
 11584      64546173 
 11584      6B735761 
 11584      6974696E 
 11585              	.LASF29:
 11586 019e 784C4953 		.ascii	"xLIST_ITEM\000"
 11586      545F4954 
 11586      454D00
 11587              	.LASF204:
 11588 01a9 70785265 		.ascii	"pxReadyTasksLists\000"
 11588      61647954 
 11588      61736B73 
 11588      4C697374 
 11588      7300
 11589              	.LASF159:
 11590 01bb 78576169 		.ascii	"xWaitIndefinitely\000"
 11590      74496E64 
 11590      6566696E 
 11590      6974656C 
 11590      7900
 11591              	.LASF240:
 11592 01cd 443A5C4E 		.ascii	"D:\\Notes 202324\\ELECH410\\Labs\\Lab3\\ex7_priorit"
 11592      6F746573 
 11592      20323032 
 11592      3332345C 
 11592      454C4543 
 11593 01fb 6965735C 		.ascii	"ies\\priorities.cydsn\000"
 11593      7072696F 
 11593      72697469 
 11593      65732E63 
 11593      7964736E 
 11594              	.LASF200:
 11595 0210 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11595      6B47656E 
 11595      65726963 
 11595      4E6F7469 
 11595      66794672 
 11596              	.LASF88:
 11597 022a 70756353 		.ascii	"pucStackByte\000"
 11597      7461636B 
 11597      42797465 
 11597      00
 11598              	.LASF81:
 11599 0237 756C4269 		.ascii	"ulBitmap\000"
 11599      746D6170 
 11599      00
 11600              	.LASF205:
 11601 0240 7844656C 		.ascii	"xDelayedTaskList1\000"
 11601      61796564 
 11601      5461736B 
 11601      4C697374 
 11601      3100
 11602              	.LASF206:
 11603 0252 7844656C 		.ascii	"xDelayedTaskList2\000"
 11603      61796564 
 11603      5461736B 
 11603      4C697374 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 310


 11603      3200
 11604              	.LASF64:
 11605 0264 784F7665 		.ascii	"xOverflowCount\000"
 11605      72666C6F 
 11605      77436F75 
 11605      6E7400
 11606              	.LASF229:
 11607 0273 76506F72 		.ascii	"vPortEnterCritical\000"
 11607      74456E74 
 11607      65724372 
 11607      69746963 
 11607      616C00
 11608              	.LASF116:
 11609 0286 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 11609      6572666C 
 11609      6F776564 
 11609      44656C61 
 11609      7965644C 
 11610              	.LASF70:
 11611 029e 756C5061 		.ascii	"ulParameters\000"
 11611      72616D65 
 11611      74657273 
 11611      00
 11612              	.LASF113:
 11613 02ab 65526574 		.ascii	"eReturn\000"
 11613      75726E00 
 11614              	.LASF128:
 11615 02b3 78546173 		.ascii	"xTaskToResume\000"
 11615      6B546F52 
 11615      6573756D 
 11615      6500
 11616              	.LASF118:
 11617 02c1 75785265 		.ascii	"uxReturn\000"
 11617      7475726E 
 11617      00
 11618              	.LASF185:
 11619 02ca 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11619      736B4765 
 11619      744E756D 
 11619      6265724F 
 11619      66546173 
 11620              	.LASF235:
 11621 02e1 7854696D 		.ascii	"xTimerCreateTimerTask\000"
 11621      65724372 
 11621      65617465 
 11621      54696D65 
 11621      72546173 
 11622              	.LASF94:
 11623 02f7 70634E61 		.ascii	"pcName\000"
 11623      6D6500
 11624              	.LASF72:
 11625 02fe 74736B54 		.ascii	"tskTCB\000"
 11625      434200
 11626              	.LASF130:
 11627 0305 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11627      76656449 
 11627      6E746572 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 311


 11627      72757074 
 11627      53746174 
 11628              	.LASF18:
 11629 031c 75696E74 		.ascii	"uint32_t\000"
 11629      33325F74 
 11629      00
 11630              	.LASF49:
 11631 0325 75634E6F 		.ascii	"ucNotifyState\000"
 11631      74696679 
 11631      53746174 
 11631      6500
 11632              	.LASF232:
 11633 0333 75784C69 		.ascii	"uxListRemove\000"
 11633      73745265 
 11633      6D6F7665 
 11633      00
 11634              	.LASF126:
 11635 0340 78596965 		.ascii	"xYieldRequired\000"
 11635      6C645265 
 11635      71756972 
 11635      656400
 11636              	.LASF74:
 11637 034f 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 11637      6967696E 
 11637      616C4241 
 11637      53455052 
 11637      4900
 11638              	.LASF194:
 11639 0361 78546173 		.ascii	"xTaskGenericNotify\000"
 11639      6B47656E 
 11639      65726963 
 11639      4E6F7469 
 11639      667900
 11640              	.LASF161:
 11641 0374 7078556E 		.ascii	"pxUnblockedTCB\000"
 11641      626C6F63 
 11641      6B656454 
 11641      434200
 11642              	.LASF109:
 11643 0383 75735374 		.ascii	"usStackDepth\000"
 11643      61636B44 
 11643      65707468 
 11643      00
 11644              	.LASF188:
 11645 0390 78436C65 		.ascii	"xClearCountOnExit\000"
 11645      6172436F 
 11645      756E744F 
 11645      6E457869 
 11645      7400
 11646              	.LASF169:
 11647 03a2 78456C61 		.ascii	"xElapsedTime\000"
 11647      70736564 
 11647      54696D65 
 11647      00
 11648              	.LASF60:
 11649 03af 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11649      56616C75 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 312


 11649      65576974 
 11649      684F7665 
 11649      72777269 
 11650              	.LASF13:
 11651 03c6 6C6F6E67 		.ascii	"long long unsigned int\000"
 11651      206C6F6E 
 11651      6720756E 
 11651      7369676E 
 11651      65642069 
 11652              	.LASF135:
 11653 03dd 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11653      6B476574 
 11653      5469636B 
 11653      436F756E 
 11653      7446726F 
 11654              	.LASF120:
 11655 03f6 75785361 		.ascii	"uxSavedInterruptState\000"
 11655      76656449 
 11655      6E746572 
 11655      72757074 
 11655      53746174 
 11656              	.LASF191:
 11657 040c 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11657      7473546F 
 11657      436C6561 
 11657      724F6E45 
 11657      6E747279 
 11658              	.LASF209:
 11659 0421 7850656E 		.ascii	"xPendingReadyList\000"
 11659      64696E67 
 11659      52656164 
 11659      794C6973 
 11659      7400
 11660              	.LASF26:
 11661 0433 70785072 		.ascii	"pxPrevious\000"
 11661      6576696F 
 11661      757300
 11662              	.LASF164:
 11663 043e 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11663      6B536574 
 11663      54696D65 
 11663      4F757453 
 11663      74617465 
 11664              	.LASF210:
 11665 0453 78546173 		.ascii	"xTasksWaitingTermination\000"
 11665      6B735761 
 11665      6974696E 
 11665      67546572 
 11665      6D696E61 
 11666              	.LASF8:
 11667 046c 5F5F7569 		.ascii	"__uint16_t\000"
 11667      6E743136 
 11667      5F7400
 11668              	.LASF180:
 11669 0477 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11669      6B507269 
 11669      6F726974 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 313


 11669      79446973 
 11669      696E6865 
 11670              	.LASF129:
 11671 049b 78546173 		.ascii	"xTaskResumeFromISR\000"
 11671      6B526573 
 11671      756D6546 
 11671      726F6D49 
 11671      535200
 11672              	.LASF234:
 11673 04ae 7076506F 		.ascii	"pvPortMalloc\000"
 11673      72744D61 
 11673      6C6C6F63 
 11673      00
 11674              	.LASF170:
 11675 04bb 76546173 		.ascii	"vTaskSuspendAll\000"
 11675      6B537573 
 11675      70656E64 
 11675      416C6C00 
 11676              	.LASF172:
 11677 04cb 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11677      736B4765 
 11677      74537461 
 11677      636B4869 
 11677      67685761 
 11678              	.LASF138:
 11679 04e7 78546173 		.ascii	"xTaskIncrementTick\000"
 11679      6B496E63 
 11679      72656D65 
 11679      6E745469 
 11679      636B00
 11680              	.LASF238:
 11681 04fa 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11681      43313120 
 11681      352E342E 
 11681      31203230 
 11681      31363036 
 11682 052d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11682      20726576 
 11682      6973696F 
 11682      6E203233 
 11682      37373135 
 11683 0560 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11683      66756E63 
 11683      74696F6E 
 11683      2D736563 
 11683      74696F6E 
 11684              	.LASF62:
 11685 0588 654E6F74 		.ascii	"eNotifyAction\000"
 11685      69667941 
 11685      6374696F 
 11685      6E00
 11686              	.LASF4:
 11687 0596 73697A65 		.ascii	"size_t\000"
 11687      5F7400
 11688              	.LASF59:
 11689 059d 65496E63 		.ascii	"eIncrement\000"
 11689      72656D65 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 314


 11689      6E7400
 11690              	.LASF35:
 11691 05a8 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11691      495F4C49 
 11691      53545F49 
 11691      54454D00 
 11692              	.LASF183:
 11693 05b8 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 11693      6C794F6E 
 11693      654D7574 
 11693      65784865 
 11693      6C6400
 11694              	.LASF30:
 11695 05cb 784C4953 		.ascii	"xLIST\000"
 11695      5400
 11696              	.LASF132:
 11697 05d1 76546173 		.ascii	"vTaskEndScheduler\000"
 11697      6B456E64 
 11697      53636865 
 11697      64756C65 
 11697      7200
 11698              	.LASF117:
 11699 05e3 75785461 		.ascii	"uxTaskPriorityGet\000"
 11699      736B5072 
 11699      696F7269 
 11699      74794765 
 11699      7400
 11700              	.LASF108:
 11701 05f5 78436F6E 		.ascii	"xConstTickCount\000"
 11701      73745469 
 11701      636B436F 
 11701      756E7400 
 11702              	.LASF230:
 11703 0605 764C6973 		.ascii	"vListInsertEnd\000"
 11703      74496E73 
 11703      65727445 
 11703      6E6400
 11704              	.LASF212:
 11705 0614 78537573 		.ascii	"xSuspendedTaskList\000"
 11705      70656E64 
 11705      65645461 
 11705      736B4C69 
 11705      737400
 11706              	.LASF76:
 11707 0627 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11707      74536574 
 11707      42415345 
 11707      50524900 
 11708              	.LASF208:
 11709 0637 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11709      6572666C 
 11709      6F774465 
 11709      6C617965 
 11709      64546173 
 11710              	.LASF155:
 11711 0651 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11711      6B506C61 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 315


 11711      63654F6E 
 11711      4576656E 
 11711      744C6973 
 11712              	.LASF148:
 11713 0667 76546173 		.ascii	"vTaskDelay\000"
 11713      6B44656C 
 11713      617900
 11714              	.LASF186:
 11715 0672 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11715      736B496E 
 11715      6372656D 
 11715      656E744D 
 11715      75746578 
 11716              	.LASF48:
 11717 0690 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11717      74696669 
 11717      65645661 
 11717      6C756500 
 11718              	.LASF162:
 11719 06a0 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 11719      6B52656D 
 11719      6F766546 
 11719      726F6D55 
 11719      6E6F7264 
 11720              	.LASF47:
 11721 06c2 75784D75 		.ascii	"uxMutexesHeld\000"
 11721      74657865 
 11721      7348656C 
 11721      6400
 11722              	.LASF179:
 11723 06d0 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11723      6B507269 
 11723      6F726974 
 11723      79446973 
 11723      696E6865 
 11724              	.LASF160:
 11725 06e8 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11725      6B52656D 
 11725      6F766546 
 11725      726F6D45 
 11725      76656E74 
 11726              	.LASF15:
 11727 0701 63686172 		.ascii	"char\000"
 11727      00
 11728              	.LASF34:
 11729 0706 4C697374 		.ascii	"ListItem_t\000"
 11729      4974656D 
 11729      5F7400
 11730              	.LASF61:
 11731 0711 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11731      56616C75 
 11731      65576974 
 11731      686F7574 
 11731      4F766572 
 11732              	.LASF75:
 11733 072b 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11733      77424153 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 316


 11733      45505249 
 11733      00
 11734              	.LASF22:
 11735 0738 55426173 		.ascii	"UBaseType_t\000"
 11735      65547970 
 11735      655F7400 
 11736              	.LASF95:
 11737 0744 756C5374 		.ascii	"ulStackDepth\000"
 11737      61636B44 
 11737      65707468 
 11737      00
 11738              	.LASF147:
 11739 0751 7853686F 		.ascii	"xShouldDelay\000"
 11739      756C6444 
 11739      656C6179 
 11739      00
 11740              	.LASF103:
 11741 075e 70727649 		.ascii	"prvIdleTask\000"
 11741      646C6554 
 11741      61736B00 
 11742              	.LASF33:
 11743 076a 784C6973 		.ascii	"xListEnd\000"
 11743      74456E64 
 11743      00
 11744              	.LASF187:
 11745 0773 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11745      736B4E6F 
 11745      74696679 
 11745      54616B65 
 11745      00
 11746              	.LASF158:
 11747 0784 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 11747      6B506C61 
 11747      63654F6E 
 11747      4576656E 
 11747      744C6973 
 11748              	.LASF36:
 11749 07a4 4D696E69 		.ascii	"MiniListItem_t\000"
 11749      4C697374 
 11749      4974656D 
 11749      5F7400
 11750              	.LASF190:
 11751 07b3 78546173 		.ascii	"xTaskNotifyWait\000"
 11751      6B4E6F74 
 11751      69667957 
 11751      61697400 
 11752              	.LASF111:
 11753 07c3 78546173 		.ascii	"xTaskCreate\000"
 11753      6B437265 
 11753      61746500 
 11754              	.LASF101:
 11755 07cf 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11755      64644E65 
 11755      77546173 
 11755      6B546F52 
 11755      65616479 
 11756              	.LASF16:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 317


 11757 07e8 75696E74 		.ascii	"uint8_t\000"
 11757      385F7400 
 11758              	.LASF51:
 11759 07f0 65526561 		.ascii	"eReady\000"
 11759      647900
 11760              	.LASF112:
 11761 07f7 65546173 		.ascii	"eTaskGetState\000"
 11761      6B476574 
 11761      53746174 
 11761      6500
 11762              	.LASF98:
 11763 0805 70784E65 		.ascii	"pxNewTCB\000"
 11763      77544342 
 11763      00
 11764              	.LASF93:
 11765 080e 70785461 		.ascii	"pxTaskCode\000"
 11765      736B436F 
 11765      646500
 11766              	.LASF71:
 11767 0819 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11767      72795265 
 11767      67696F6E 
 11767      5F7400
 11768              	.LASF221:
 11769 0828 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11769      74546173 
 11769      6B556E62 
 11769      6C6F636B 
 11769      54696D65 
 11770              	.LASF78:
 11771 083d 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11771      72745261 
 11771      69736542 
 11771      41534550 
 11771      524900
 11772              	.LASF227:
 11773 0850 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11773      7274496E 
 11773      69746961 
 11773      6C697365 
 11773      53746163 
 11774              	.LASF214:
 11775 0866 78546963 		.ascii	"xTickCount\000"
 11775      6B436F75 
 11775      6E7400
 11776              	.LASF1:
 11777 0871 6C6F6E67 		.ascii	"long long int\000"
 11777      206C6F6E 
 11777      6720696E 
 11777      7400
 11778              	.LASF54:
 11779 087f 6544656C 		.ascii	"eDeleted\000"
 11779      65746564 
 11779      00
 11780              	.LASF79:
 11781 0888 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 11781      7274436F 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 318


 11781      756E744C 
 11781      65616469 
 11781      6E675A65 
 11782              	.LASF69:
 11783 08a0 756C4C65 		.ascii	"ulLengthInBytes\000"
 11783      6E677468 
 11783      496E4279 
 11783      74657300 
 11784              	.LASF21:
 11785 08b0 42617365 		.ascii	"BaseType_t\000"
 11785      54797065 
 11785      5F7400
 11786              	.LASF90:
 11787 08bb 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11787      65736574 
 11787      4E657874 
 11787      5461736B 
 11787      556E626C 
 11788              	.LASF65:
 11789 08d7 7854696D 		.ascii	"xTimeOnEntering\000"
 11789      654F6E45 
 11789      6E746572 
 11789      696E6700 
 11790              	.LASF123:
 11791 08e7 75784E65 		.ascii	"uxNewPriority\000"
 11791      77507269 
 11791      6F726974 
 11791      7900
 11792              	.LASF19:
 11793 08f5 5461736B 		.ascii	"TaskFunction_t\000"
 11793      46756E63 
 11793      74696F6E 
 11793      5F7400
 11794              	.LASF25:
 11795 0904 70784E65 		.ascii	"pxNext\000"
 11795      787400
 11796              	.LASF198:
 11797 090b 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11797      72657669 
 11797      6F75734E 
 11797      6F746966 
 11797      69636174 
 11798              	.LASF225:
 11799 0928 6D656D73 		.ascii	"memset\000"
 11799      657400
 11800              	.LASF165:
 11801 092f 70785469 		.ascii	"pxTimeOut\000"
 11801      6D654F75 
 11801      7400
 11802              	.LASF149:
 11803 0939 78546963 		.ascii	"xTicksToDelay\000"
 11803      6B73546F 
 11803      44656C61 
 11803      7900
 11804              	.LASF119:
 11805 0947 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11805      736B5072 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 319


 11805      696F7269 
 11805      74794765 
 11805      7446726F 
 11806              	.LASF89:
 11807 0960 756C436F 		.ascii	"ulCount\000"
 11807      756E7400 
 11808              	.LASF66:
 11809 0968 54696D65 		.ascii	"TimeOut_t\000"
 11809      4F75745F 
 11809      7400
 11810              	.LASF166:
 11811 0972 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11811      6B496E74 
 11811      65726E61 
 11811      6C536574 
 11811      54696D65 
 11812              	.LASF220:
 11813 098f 75785461 		.ascii	"uxTaskNumber\000"
 11813      736B4E75 
 11813      6D626572 
 11813      00
 11814              	.LASF38:
 11815 099c 5461736B 		.ascii	"TaskHandle_t\000"
 11815      48616E64 
 11815      6C655F74 
 11815      00
 11816              	.LASF197:
 11817 09a9 65416374 		.ascii	"eAction\000"
 11817      696F6E00 
 11818              	.LASF80:
 11819 09b1 756C4E65 		.ascii	"ulNewMaskValue\000"
 11819      774D6173 
 11819      6B56616C 
 11819      756500
 11820              	.LASF184:
 11821 09c0 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11821      736B5265 
 11821      73657445 
 11821      76656E74 
 11821      4974656D 
 11822              	.LASF122:
 11823 09da 76546173 		.ascii	"vTaskPrioritySet\000"
 11823      6B507269 
 11823      6F726974 
 11823      79536574 
 11823      00
 11824              	.LASF56:
 11825 09eb 65546173 		.ascii	"eTaskState\000"
 11825      6B537461 
 11825      746500
 11826              	.LASF37:
 11827 09f6 4C697374 		.ascii	"List_t\000"
 11827      5F7400
 11828              	.LASF137:
 11829 09fd 78546173 		.ascii	"xTaskToQuery\000"
 11829      6B546F51 
 11829      75657279 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 320


 11829      00
 11830              	.LASF23:
 11831 0a0a 5469636B 		.ascii	"TickType_t\000"
 11831      54797065 
 11831      5F7400
 11832              	.LASF195:
 11833 0a15 78546173 		.ascii	"xTaskToNotify\000"
 11833      6B546F4E 
 11833      6F746966 
 11833      7900
 11834              	.LASF87:
 11835 0a23 78546173 		.ascii	"xTask\000"
 11835      6B00
 11836              	.LASF58:
 11837 0a29 65536574 		.ascii	"eSetBits\000"
 11837      42697473 
 11837      00
 11838              	.LASF2:
 11839 0a32 6C6F6E67 		.ascii	"long double\000"
 11839      20646F75 
 11839      626C6500 
 11840              	.LASF199:
 11841 0a3e 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11841      6967696E 
 11841      616C4E6F 
 11841      74696679 
 11841      53746174 
 11842              	.LASF67:
 11843 0a54 784D454D 		.ascii	"xMEMORY_REGION\000"
 11843      4F52595F 
 11843      52454749 
 11843      4F4E00
 11844              	.LASF17:
 11845 0a63 75696E74 		.ascii	"uint16_t\000"
 11845      31365F74 
 11845      00
 11846              	.LASF121:
 11847 0a6c 76546173 		.ascii	"vTaskDelete\000"
 11847      6B44656C 
 11847      65746500 
 11848              	.LASF182:
 11849 0a78 75785072 		.ascii	"uxPriorityToUse\000"
 11849      696F7269 
 11849      7479546F 
 11849      55736500 
 11850              	.LASF150:
 11851 0a88 76546173 		.ascii	"vTaskSwitchContext\000"
 11851      6B537769 
 11851      74636843 
 11851      6F6E7465 
 11851      787400
 11852              	.LASF219:
 11853 0a9b 784E756D 		.ascii	"xNumOfOverflows\000"
 11853      4F664F76 
 11853      6572666C 
 11853      6F777300 
 11854              	.LASF28:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 321


 11855 0aab 7076436F 		.ascii	"pvContainer\000"
 11855      6E746169 
 11855      6E657200 
 11856              	.LASF222:
 11857 0ab7 7849646C 		.ascii	"xIdleTaskHandle\000"
 11857      65546173 
 11857      6B48616E 
 11857      646C6500 
 11858              	.LASF181:
 11859 0ac7 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 11859      67686573 
 11859      74507269 
 11859      6F726974 
 11859      79576169 
 11860              	.LASF7:
 11861 0ae4 73686F72 		.ascii	"short int\000"
 11861      7420696E 
 11861      7400
 11862              	.LASF226:
 11863 0aee 764C6973 		.ascii	"vListInitialiseItem\000"
 11863      74496E69 
 11863      7469616C 
 11863      69736549 
 11863      74656D00 
 11864              	.LASF96:
 11865 0b02 70765061 		.ascii	"pvParameters\000"
 11865      72616D65 
 11865      74657273 
 11865      00
 11866              	.LASF24:
 11867 0b0f 78497465 		.ascii	"xItemValue\000"
 11867      6D56616C 
 11867      756500
 11868              	.LASF10:
 11869 0b1a 6C6F6E67 		.ascii	"long int\000"
 11869      20696E74 
 11869      00
 11870              	.LASF141:
 11871 0b23 78546173 		.ascii	"xTaskResumeAll\000"
 11871      6B526573 
 11871      756D6541 
 11871      6C6C00
 11872              	.LASF202:
 11873 0b32 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11873      6B4E6F74 
 11873      69667947 
 11873      69766546 
 11873      726F6D49 
 11874              	.LASF207:
 11875 0b49 70784465 		.ascii	"pxDelayedTaskList\000"
 11875      6C617965 
 11875      64546173 
 11875      6B4C6973 
 11875      7400
 11876              	.LASF133:
 11877 0b5b 78546173 		.ascii	"xTaskGetTickCount\000"
 11877      6B476574 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 322


 11877      5469636B 
 11877      436F756E 
 11877      7400
 11878              	.LASF85:
 11879 0b6d 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11879      61736B49 
 11879      73546173 
 11879      6B537573 
 11879      70656E64 
 11880              	.LASF139:
 11881 0b84 78537769 		.ascii	"xSwitchRequired\000"
 11881      74636852 
 11881      65717569 
 11881      72656400 
 11882              	.LASF177:
 11883 0b94 70784D75 		.ascii	"pxMutexHolder\000"
 11883      74657848 
 11883      6F6C6465 
 11883      7200
 11884              	.LASF44:
 11885 0ba2 70785374 		.ascii	"pxStack\000"
 11885      61636B00 
 11886              	.LASF110:
 11887 0baa 78546173 		.ascii	"xTaskToDelete\000"
 11887      6B546F44 
 11887      656C6574 
 11887      6500
 11888              	.LASF196:
 11889 0bb8 756C5661 		.ascii	"ulValue\000"
 11889      6C756500 
 11890              	.LASF154:
 11891 0bc0 78546173 		.ascii	"xTaskToSuspend\000"
 11891      6B546F53 
 11891      75737065 
 11891      6E6400
 11892              	.LASF167:
 11893 0bcf 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11893      6B436865 
 11893      636B466F 
 11893      7254696D 
 11893      654F7574 
 11894              	.LASF237:
 11895 0be4 76506F72 		.ascii	"vPortEndScheduler\000"
 11895      74456E64 
 11895      53636865 
 11895      64756C65 
 11895      7200
 11896              	.LASF224:
 11897 0bf6 76506F72 		.ascii	"vPortFree\000"
 11897      74467265 
 11897      6500
 11898              	.LASF145:
 11899 0c00 70785072 		.ascii	"pxPreviousWakeTime\000"
 11899      6576696F 
 11899      75735761 
 11899      6B655469 
 11899      6D6500
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 323


 11900              	.LASF5:
 11901 0c13 5F5F7569 		.ascii	"__uint8_t\000"
 11901      6E74385F 
 11901      7400
 11902              	.LASF82:
 11903 0c1d 75635265 		.ascii	"ucReturn\000"
 11903      7475726E 
 11903      00
 11904              	.LASF193:
 11905 0c26 70756C4E 		.ascii	"pulNotificationValue\000"
 11905      6F746966 
 11905      69636174 
 11905      696F6E56 
 11905      616C7565 
 11906              	.LASF83:
 11907 0c3b 78526574 		.ascii	"xReturn\000"
 11907      75726E00 
 11908              	.LASF14:
 11909 0c43 73697A65 		.ascii	"sizetype\000"
 11909      74797065 
 11909      00
 11910              	.LASF171:
 11911 0c4c 76546173 		.ascii	"vTaskMissedYield\000"
 11911      6B4D6973 
 11911      73656459 
 11911      69656C64 
 11911      00
 11912              	.LASF217:
 11913 0c5d 75785065 		.ascii	"uxPendedTicks\000"
 11913      6E646564 
 11913      5469636B 
 11913      7300
 11914              	.LASF12:
 11915 0c6b 6C6F6E67 		.ascii	"long unsigned int\000"
 11915      20756E73 
 11915      69676E65 
 11915      6420696E 
 11915      7400
 11916              	.LASF77:
 11917 0c7d 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 11917      74526169 
 11917      73654241 
 11917      53455052 
 11917      4900
 11918              	.LASF176:
 11919 0c8f 78546173 		.ascii	"xTaskPriorityInherit\000"
 11919      6B507269 
 11919      6F726974 
 11919      79496E68 
 11919      65726974 
 11920              	.LASF173:
 11921 0ca4 70756345 		.ascii	"pucEndOfStack\000"
 11921      6E644F66 
 11921      53746163 
 11921      6B00
 11922              	.LASF178:
 11923 0cb2 70784D75 		.ascii	"pxMutexHolderTCB\000"
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 324


 11923      74657848 
 11923      6F6C6465 
 11923      72544342 
 11923      00
 11924              	.LASF136:
 11925 0cc3 70635461 		.ascii	"pcTaskGetName\000"
 11925      736B4765 
 11925      744E616D 
 11925      6500
 11926              	.LASF134:
 11927 0cd1 78546963 		.ascii	"xTicks\000"
 11927      6B7300
 11928              	.LASF131:
 11929 0cd8 76546173 		.ascii	"vTaskStartScheduler\000"
 11929      6B537461 
 11929      72745363 
 11929      68656475 
 11929      6C657200 
 11930              	.LASF106:
 11931 0cec 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11931      426C6F63 
 11931      6B496E64 
 11931      6566696E 
 11931      6974656C 
 11932              	.LASF50:
 11933 0d02 6552756E 		.ascii	"eRunning\000"
 11933      6E696E67 
 11933      00
 11934              	.LASF68:
 11935 0d0b 70764261 		.ascii	"pvBaseAddress\000"
 11935      73654164 
 11935      64726573 
 11935      7300
 11936              	.LASF140:
 11937 0d19 70785465 		.ascii	"pxTemp\000"
 11937      6D7000
 11938              	.LASF6:
 11939 0d20 756E7369 		.ascii	"unsigned char\000"
 11939      676E6564 
 11939      20636861 
 11939      7200
 11940              	.LASF157:
 11941 0d2e 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11941      6B506C61 
 11941      63654F6E 
 11941      556E6F72 
 11941      64657265 
 11942              	.LASF11:
 11943 0d4d 5F5F7569 		.ascii	"__uint32_t\000"
 11943      6E743332 
 11943      5F7400
 11944              	.LASF203:
 11945 0d58 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11945      6B4E6F74 
 11945      69667953 
 11945      74617465 
 11945      436C6561 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 325


 11946              	.LASF228:
 11947 0d6e 764C6973 		.ascii	"vListInitialise\000"
 11947      74496E69 
 11947      7469616C 
 11947      69736500 
 11948              	.LASF168:
 11949 0d7e 70785469 		.ascii	"pxTicksToWait\000"
 11949      636B7354 
 11949      6F576169 
 11949      7400
 11950              	.LASF55:
 11951 0d8c 65496E76 		.ascii	"eInvalid\000"
 11951      616C6964 
 11951      00
 11952              	.LASF151:
 11953 0d95 7578546F 		.ascii	"uxTopPriority\000"
 11953      70507269 
 11953      6F726974 
 11953      7900
 11954              	.LASF46:
 11955 0da3 75784261 		.ascii	"uxBasePriority\000"
 11955      73655072 
 11955      696F7269 
 11955      747900
 11956              	.LASF144:
 11957 0db2 76546173 		.ascii	"vTaskDelayUntil\000"
 11957      6B44656C 
 11957      6179556E 
 11957      74696C00 
 11958              	.LASF42:
 11959 0dc2 78457665 		.ascii	"xEventListItem\000"
 11959      6E744C69 
 11959      73744974 
 11959      656D00
 11960              	.LASF125:
 11961 0dd1 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11961      696F7269 
 11961      74795573 
 11961      65644F6E 
 11961      456E7472 
 11962              	.LASF73:
 11963 0de7 5443425F 		.ascii	"TCB_t\000"
 11963      7400
 11964              	.LASF105:
 11965 0ded 78546963 		.ascii	"xTicksToWait\000"
 11965      6B73546F 
 11965      57616974 
 11965      00
 11966              	.LASF27:
 11967 0dfa 70764F77 		.ascii	"pvOwner\000"
 11967      6E657200 
 11968              	.LASF91:
 11969 0e02 70727644 		.ascii	"prvDeleteTCB\000"
 11969      656C6574 
 11969      65544342 
 11969      00
 11970              	.LASF52:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 326


 11971 0e0f 65426C6F 		.ascii	"eBlocked\000"
 11971      636B6564 
 11971      00
 11972              	.LASF153:
 11973 0e18 76546173 		.ascii	"vTaskSuspend\000"
 11973      6B537573 
 11973      70656E64 
 11973      00
 11974              	.LASF142:
 11975 0e25 78416C72 		.ascii	"xAlreadyYielded\000"
 11975      65616479 
 11975      5969656C 
 11975      64656400 
 11976              	.LASF174:
 11977 0e35 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11977      6B476574 
 11977      43757272 
 11977      656E7454 
 11977      61736B48 
 11978              	.LASF86:
 11979 0e4f 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11979      61736B43 
 11979      6865636B 
 11979      46726565 
 11979      53746163 
 11980              	.LASF99:
 11981 0e6a 78526567 		.ascii	"xRegions\000"
 11981      696F6E73 
 11981      00
 11982              	.LASF104:
 11983 0e73 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11983      64644375 
 11983      7272656E 
 11983      74546173 
 11983      6B546F44 
 11984              	.LASF241:
 11985 0e92 70784375 		.ascii	"pxCurrentTCB\000"
 11985      7272656E 
 11985      74544342 
 11985      00
 11986              	.LASF213:
 11987 0e9f 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11987      7272656E 
 11987      744E756D 
 11987      6265724F 
 11987      66546173 
 11988              	.LASF146:
 11989 0eb6 7854696D 		.ascii	"xTimeIncrement\000"
 11989      65496E63 
 11989      72656D65 
 11989      6E7400
 11990              	.LASF3:
 11991 0ec5 7369676E 		.ascii	"signed char\000"
 11991      65642063 
 11991      68617200 
 11992              	.LASF9:
 11993 0ed1 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 327


 11993      7420756E 
 11993      7369676E 
 11993      65642069 
 11993      6E7400
 11994              	.LASF107:
 11995 0ee4 7854696D 		.ascii	"xTimeToWake\000"
 11995      65546F57 
 11995      616B6500 
 11996              	.LASF41:
 11997 0ef0 78537461 		.ascii	"xStateListItem\000"
 11997      74654C69 
 11997      73744974 
 11997      656D00
 11998              	.LASF84:
 11999 0eff 70785443 		.ascii	"pxTCB\000"
 11999      4200
 12000              	.LASF223:
 12001 0f05 75785363 		.ascii	"uxSchedulerSuspended\000"
 12001      68656475 
 12001      6C657253 
 12001      75737065 
 12001      6E646564 
 12002              	.LASF40:
 12003 0f1a 7078546F 		.ascii	"pxTopOfStack\000"
 12003      704F6653 
 12003      7461636B 
 12003      00
 12004              	.LASF127:
 12005 0f27 76546173 		.ascii	"vTaskResume\000"
 12005      6B526573 
 12005      756D6500 
 12006              	.LASF100:
 12007 0f33 70727649 		.ascii	"prvInitialiseTaskLists\000"
 12007      6E697469 
 12007      616C6973 
 12007      65546173 
 12007      6B4C6973 
 12008              	.LASF163:
 12009 0f4a 70784576 		.ascii	"pxEventListItem\000"
 12009      656E744C 
 12009      69737449 
 12009      74656D00 
 12010              	.LASF97:
 12011 0f5a 70784372 		.ascii	"pxCreatedTask\000"
 12011      65617465 
 12011      64546173 
 12011      6B00
 12012              	.LASF102:
 12013 0f68 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 12013      6865636B 
 12013      5461736B 
 12013      73576169 
 12013      74696E67 
 12014              	.LASF189:
 12015 0f88 756C5265 		.ascii	"ulReturn\000"
 12015      7475726E 
 12015      00
ARM GAS  C:\Users\nicol\AppData\Local\Temp\ccVZ2DKL.s 			page 328


 12016              	.LASF124:
 12017 0f91 75784375 		.ascii	"uxCurrentBasePriority\000"
 12017      7272656E 
 12017      74426173 
 12017      65507269 
 12017      6F726974 
 12018              	.LASF218:
 12019 0fa7 78596965 		.ascii	"xYieldPending\000"
 12019      6C645065 
 12019      6E64696E 
 12019      6700
 12020              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
