ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskExitError,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskExitError, %function
  24              	prvTaskExitError:
  25              	.LFB6:
  26              		.file 1 "FreeRTOS\\src\\port.c"
   1:FreeRTOS\src/port.c **** /*
   2:FreeRTOS\src/port.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS\src/port.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS\src/port.c ****  *
   5:FreeRTOS\src/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS\src/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS\src/port.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS\src/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS\src/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS\src/port.c ****  * subject to the following conditions:
  11:FreeRTOS\src/port.c ****  *
  12:FreeRTOS\src/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS\src/port.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS\src/port.c ****  *
  15:FreeRTOS\src/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS\src/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS\src/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS\src/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS\src/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS\src/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS\src/port.c ****  *
  22:FreeRTOS\src/port.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS\src/port.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS\src/port.c ****  *
  25:FreeRTOS\src/port.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS\src/port.c ****  */
  27:FreeRTOS\src/port.c **** 
  28:FreeRTOS\src/port.c **** /*-----------------------------------------------------------
  29:FreeRTOS\src/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  30:FreeRTOS\src/port.c ****  *----------------------------------------------------------*/
  31:FreeRTOS\src/port.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 2


  32:FreeRTOS\src/port.c **** /* Scheduler includes. */
  33:FreeRTOS\src/port.c **** #include "FreeRTOS.h"
  34:FreeRTOS\src/port.c **** #include "task.h"
  35:FreeRTOS\src/port.c **** 
  36:FreeRTOS\src/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  37:FreeRTOS\src/port.c **** defined.  The value should also ensure backward compatibility.
  38:FreeRTOS\src/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  39:FreeRTOS\src/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  40:FreeRTOS\src/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  41:FreeRTOS\src/port.c **** #endif
  42:FreeRTOS\src/port.c **** 
  43:FreeRTOS\src/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:FreeRTOS\src/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  45:FreeRTOS\src/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  46:FreeRTOS\src/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  47:FreeRTOS\src/port.c **** #else
  48:FreeRTOS\src/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  49:FreeRTOS\src/port.c **** 	as the core. */
  50:FreeRTOS\src/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  51:FreeRTOS\src/port.c **** #endif
  52:FreeRTOS\src/port.c **** 
  53:FreeRTOS\src/port.c **** /* Constants required to manipulate the core.  Registers first... */
  54:FreeRTOS\src/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  55:FreeRTOS\src/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  56:FreeRTOS\src/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  57:FreeRTOS\src/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  58:FreeRTOS\src/port.c **** /* ...then bits in the registers. */
  59:FreeRTOS\src/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  60:FreeRTOS\src/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  61:FreeRTOS\src/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  62:FreeRTOS\src/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  63:FreeRTOS\src/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  64:FreeRTOS\src/port.c **** 
  65:FreeRTOS\src/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  66:FreeRTOS\src/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  67:FreeRTOS\src/port.c **** 
  68:FreeRTOS\src/port.c **** /* Constants required to check the validity of an interrupt priority. */
  69:FreeRTOS\src/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  70:FreeRTOS\src/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  71:FreeRTOS\src/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  72:FreeRTOS\src/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  73:FreeRTOS\src/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  74:FreeRTOS\src/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  75:FreeRTOS\src/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  76:FreeRTOS\src/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  77:FreeRTOS\src/port.c **** 
  78:FreeRTOS\src/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  79:FreeRTOS\src/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  80:FreeRTOS\src/port.c **** 
  81:FreeRTOS\src/port.c **** /* Constants required to set up the initial stack. */
  82:FreeRTOS\src/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
  83:FreeRTOS\src/port.c **** 
  84:FreeRTOS\src/port.c **** /* The systick is a 24-bit counter. */
  85:FreeRTOS\src/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  86:FreeRTOS\src/port.c **** 
  87:FreeRTOS\src/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  88:FreeRTOS\src/port.c **** occurred while the SysTick counter is stopped during tickless idle
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 3


  89:FreeRTOS\src/port.c **** calculations. */
  90:FreeRTOS\src/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
  91:FreeRTOS\src/port.c **** 
  92:FreeRTOS\src/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  93:FreeRTOS\src/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  94:FreeRTOS\src/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
  95:FreeRTOS\src/port.c **** 
  96:FreeRTOS\src/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  97:FreeRTOS\src/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
  98:FreeRTOS\src/port.c **** debugger. */
  99:FreeRTOS\src/port.c **** #ifdef configTASK_RETURN_ADDRESS
 100:FreeRTOS\src/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 101:FreeRTOS\src/port.c **** #else
 102:FreeRTOS\src/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 103:FreeRTOS\src/port.c **** #endif
 104:FreeRTOS\src/port.c **** 
 105:FreeRTOS\src/port.c **** /*
 106:FreeRTOS\src/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 107:FreeRTOS\src/port.c ****  * file is weak to allow application writers to change the timer used to
 108:FreeRTOS\src/port.c ****  * generate the tick interrupt.
 109:FreeRTOS\src/port.c ****  */
 110:FreeRTOS\src/port.c **** void vPortSetupTimerInterrupt( void );
 111:FreeRTOS\src/port.c **** 
 112:FreeRTOS\src/port.c **** /*
 113:FreeRTOS\src/port.c ****  * Exception handlers.
 114:FreeRTOS\src/port.c ****  */
 115:FreeRTOS\src/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 116:FreeRTOS\src/port.c **** void xPortSysTickHandler( void );
 117:FreeRTOS\src/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 118:FreeRTOS\src/port.c **** 
 119:FreeRTOS\src/port.c **** /*
 120:FreeRTOS\src/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 121:FreeRTOS\src/port.c ****  */
 122:FreeRTOS\src/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 123:FreeRTOS\src/port.c **** 
 124:FreeRTOS\src/port.c **** /*
 125:FreeRTOS\src/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 126:FreeRTOS\src/port.c ****  */
 127:FreeRTOS\src/port.c **** static void prvTaskExitError( void );
 128:FreeRTOS\src/port.c **** 
 129:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 130:FreeRTOS\src/port.c **** 
 131:FreeRTOS\src/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 132:FreeRTOS\src/port.c **** variable. */
 133:FreeRTOS\src/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 134:FreeRTOS\src/port.c **** 
 135:FreeRTOS\src/port.c **** /*
 136:FreeRTOS\src/port.c ****  * The number of SysTick increments that make up one tick period.
 137:FreeRTOS\src/port.c ****  */
 138:FreeRTOS\src/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 139:FreeRTOS\src/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 140:FreeRTOS\src/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 141:FreeRTOS\src/port.c **** 
 142:FreeRTOS\src/port.c **** /*
 143:FreeRTOS\src/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 144:FreeRTOS\src/port.c ****  * 24 bit resolution of the SysTick timer.
 145:FreeRTOS\src/port.c ****  */
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 4


 146:FreeRTOS\src/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 147:FreeRTOS\src/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 148:FreeRTOS\src/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 149:FreeRTOS\src/port.c **** 
 150:FreeRTOS\src/port.c **** /*
 151:FreeRTOS\src/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 152:FreeRTOS\src/port.c ****  * power functionality only.
 153:FreeRTOS\src/port.c ****  */
 154:FreeRTOS\src/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 155:FreeRTOS\src/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 156:FreeRTOS\src/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 157:FreeRTOS\src/port.c **** 
 158:FreeRTOS\src/port.c **** /*
 159:FreeRTOS\src/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 160:FreeRTOS\src/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 161:FreeRTOS\src/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 162:FreeRTOS\src/port.c ****  */
 163:FreeRTOS\src/port.c **** #if( configASSERT_DEFINED == 1 )
 164:FreeRTOS\src/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 165:FreeRTOS\src/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 166:FreeRTOS\src/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 167:FreeRTOS\src/port.c **** #endif /* configASSERT_DEFINED */
 168:FreeRTOS\src/port.c **** 
 169:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 170:FreeRTOS\src/port.c **** 
 171:FreeRTOS\src/port.c **** /*
 172:FreeRTOS\src/port.c ****  * See header file for description.
 173:FreeRTOS\src/port.c ****  */
 174:FreeRTOS\src/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 175:FreeRTOS\src/port.c **** {
 176:FreeRTOS\src/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 177:FreeRTOS\src/port.c **** 	interrupt. */
 178:FreeRTOS\src/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 179:FreeRTOS\src/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 180:FreeRTOS\src/port.c **** 	pxTopOfStack--;
 181:FreeRTOS\src/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 182:FreeRTOS\src/port.c **** 	pxTopOfStack--;
 183:FreeRTOS\src/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 184:FreeRTOS\src/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 185:FreeRTOS\src/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 186:FreeRTOS\src/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 187:FreeRTOS\src/port.c **** 
 188:FreeRTOS\src/port.c **** 	return pxTopOfStack;
 189:FreeRTOS\src/port.c **** }
 190:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 191:FreeRTOS\src/port.c **** 
 192:FreeRTOS\src/port.c **** static void prvTaskExitError( void )
 193:FreeRTOS\src/port.c **** {
  27              		.loc 1 193 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              		.cfi_def_cfa_offset 8
 194:FreeRTOS\src/port.c **** volatile uint32_t ulDummy = 0UL;
  34              		.loc 1 194 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 5


  35 0002 0023     		movs	r3, #0
  36 0004 0193     		str	r3, [sp, #4]
  37              	.LBB12:
  38              	.LBB13:
  39              		.file 2 ".\\FreeRTOS\\include/portmacro.h"
   1:.\FreeRTOS\include/portmacro.h **** /*
   2:.\FreeRTOS\include/portmacro.h ****  * FreeRTOS Kernel V10.1.1
   3:.\FreeRTOS\include/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.\FreeRTOS\include/portmacro.h ****  *
   5:.\FreeRTOS\include/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.\FreeRTOS\include/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:.\FreeRTOS\include/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:.\FreeRTOS\include/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.\FreeRTOS\include/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.\FreeRTOS\include/portmacro.h ****  * subject to the following conditions:
  11:.\FreeRTOS\include/portmacro.h ****  *
  12:.\FreeRTOS\include/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:.\FreeRTOS\include/portmacro.h ****  * copies or substantial portions of the Software.
  14:.\FreeRTOS\include/portmacro.h ****  *
  15:.\FreeRTOS\include/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.\FreeRTOS\include/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:.\FreeRTOS\include/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.\FreeRTOS\include/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:.\FreeRTOS\include/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.\FreeRTOS\include/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.\FreeRTOS\include/portmacro.h ****  *
  22:.\FreeRTOS\include/portmacro.h ****  * http://www.FreeRTOS.org
  23:.\FreeRTOS\include/portmacro.h ****  * http://aws.amazon.com/freertos
  24:.\FreeRTOS\include/portmacro.h ****  *
  25:.\FreeRTOS\include/portmacro.h ****  * 1 tab == 4 spaces!
  26:.\FreeRTOS\include/portmacro.h ****  */
  27:.\FreeRTOS\include/portmacro.h **** 
  28:.\FreeRTOS\include/portmacro.h **** 
  29:.\FreeRTOS\include/portmacro.h **** #ifndef PORTMACRO_H
  30:.\FreeRTOS\include/portmacro.h **** #define PORTMACRO_H
  31:.\FreeRTOS\include/portmacro.h **** 
  32:.\FreeRTOS\include/portmacro.h **** #ifdef __cplusplus
  33:.\FreeRTOS\include/portmacro.h **** extern "C" {
  34:.\FreeRTOS\include/portmacro.h **** #endif
  35:.\FreeRTOS\include/portmacro.h **** 
  36:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------
  37:.\FreeRTOS\include/portmacro.h ****  * Port specific definitions.
  38:.\FreeRTOS\include/portmacro.h ****  *
  39:.\FreeRTOS\include/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:.\FreeRTOS\include/portmacro.h ****  * given hardware and compiler.
  41:.\FreeRTOS\include/portmacro.h ****  *
  42:.\FreeRTOS\include/portmacro.h ****  * These settings should not be altered.
  43:.\FreeRTOS\include/portmacro.h ****  *-----------------------------------------------------------
  44:.\FreeRTOS\include/portmacro.h ****  */
  45:.\FreeRTOS\include/portmacro.h **** 
  46:.\FreeRTOS\include/portmacro.h **** /* Type definitions. */
  47:.\FreeRTOS\include/portmacro.h **** #define portCHAR		char
  48:.\FreeRTOS\include/portmacro.h **** #define portFLOAT		float
  49:.\FreeRTOS\include/portmacro.h **** #define portDOUBLE		double
  50:.\FreeRTOS\include/portmacro.h **** #define portLONG		long
  51:.\FreeRTOS\include/portmacro.h **** #define portSHORT		short
  52:.\FreeRTOS\include/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 6


  53:.\FreeRTOS\include/portmacro.h **** #define portBASE_TYPE	long
  54:.\FreeRTOS\include/portmacro.h **** 
  55:.\FreeRTOS\include/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:.\FreeRTOS\include/portmacro.h **** typedef long BaseType_t;
  57:.\FreeRTOS\include/portmacro.h **** typedef unsigned long UBaseType_t;
  58:.\FreeRTOS\include/portmacro.h **** 
  59:.\FreeRTOS\include/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:.\FreeRTOS\include/portmacro.h **** 	typedef uint16_t TickType_t;
  61:.\FreeRTOS\include/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:.\FreeRTOS\include/portmacro.h **** #else
  63:.\FreeRTOS\include/portmacro.h **** 	typedef uint32_t TickType_t;
  64:.\FreeRTOS\include/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:.\FreeRTOS\include/portmacro.h **** 
  66:.\FreeRTOS\include/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:.\FreeRTOS\include/portmacro.h **** 	not need to be guarded with a critical section. */
  68:.\FreeRTOS\include/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:.\FreeRTOS\include/portmacro.h **** #endif
  70:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  71:.\FreeRTOS\include/portmacro.h **** 
  72:.\FreeRTOS\include/portmacro.h **** /* Architecture specifics. */
  73:.\FreeRTOS\include/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:.\FreeRTOS\include/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:.\FreeRTOS\include/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  77:.\FreeRTOS\include/portmacro.h **** 
  78:.\FreeRTOS\include/portmacro.h **** /* Scheduler utilities. */
  79:.\FreeRTOS\include/portmacro.h **** #define portYIELD() 															\
  80:.\FreeRTOS\include/portmacro.h **** {																				\
  81:.\FreeRTOS\include/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:.\FreeRTOS\include/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:.\FreeRTOS\include/portmacro.h **** 																				\
  84:.\FreeRTOS\include/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:.\FreeRTOS\include/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:.\FreeRTOS\include/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:.\FreeRTOS\include/portmacro.h **** 	__asm volatile( "isb" );													\
  88:.\FreeRTOS\include/portmacro.h **** }
  89:.\FreeRTOS\include/portmacro.h **** 
  90:.\FreeRTOS\include/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:.\FreeRTOS\include/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:.\FreeRTOS\include/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:.\FreeRTOS\include/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  95:.\FreeRTOS\include/portmacro.h **** 
  96:.\FreeRTOS\include/portmacro.h **** /* Critical section management. */
  97:.\FreeRTOS\include/portmacro.h **** extern void vPortEnterCritical( void );
  98:.\FreeRTOS\include/portmacro.h **** extern void vPortExitCritical( void );
  99:.\FreeRTOS\include/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:.\FreeRTOS\include/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:.\FreeRTOS\include/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:.\FreeRTOS\include/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:.\FreeRTOS\include/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:.\FreeRTOS\include/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:.\FreeRTOS\include/portmacro.h **** 
 106:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 107:.\FreeRTOS\include/portmacro.h **** 
 108:.\FreeRTOS\include/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:.\FreeRTOS\include/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 7


 110:.\FreeRTOS\include/portmacro.h **** (which build with all the ports) will build. */
 111:.\FreeRTOS\include/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:.\FreeRTOS\include/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 114:.\FreeRTOS\include/portmacro.h **** 
 115:.\FreeRTOS\include/portmacro.h **** /* Tickless idle/low power functionality. */
 116:.\FreeRTOS\include/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:.\FreeRTOS\include/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:.\FreeRTOS\include/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:.\FreeRTOS\include/portmacro.h **** #endif
 120:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 121:.\FreeRTOS\include/portmacro.h **** 
 122:.\FreeRTOS\include/portmacro.h **** /* Architecture specific optimisations. */
 123:.\FreeRTOS\include/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:.\FreeRTOS\include/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:.\FreeRTOS\include/portmacro.h **** #endif
 126:.\FreeRTOS\include/portmacro.h **** 
 127:.\FreeRTOS\include/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:.\FreeRTOS\include/portmacro.h **** 
 129:.\FreeRTOS\include/portmacro.h **** 	/* Generic helper function. */
 130:.\FreeRTOS\include/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:.\FreeRTOS\include/portmacro.h **** 	{
 132:.\FreeRTOS\include/portmacro.h **** 	uint8_t ucReturn;
 133:.\FreeRTOS\include/portmacro.h **** 
 134:.\FreeRTOS\include/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:.\FreeRTOS\include/portmacro.h **** 		return ucReturn;
 136:.\FreeRTOS\include/portmacro.h **** 	}
 137:.\FreeRTOS\include/portmacro.h **** 
 138:.\FreeRTOS\include/portmacro.h **** 	/* Check the configuration. */
 139:.\FreeRTOS\include/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:.\FreeRTOS\include/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:.\FreeRTOS\include/portmacro.h **** 	#endif
 142:.\FreeRTOS\include/portmacro.h **** 
 143:.\FreeRTOS\include/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:.\FreeRTOS\include/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:.\FreeRTOS\include/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:.\FreeRTOS\include/portmacro.h **** 
 147:.\FreeRTOS\include/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:.\FreeRTOS\include/portmacro.h **** 
 149:.\FreeRTOS\include/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:.\FreeRTOS\include/portmacro.h **** 
 151:.\FreeRTOS\include/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:.\FreeRTOS\include/portmacro.h **** 
 153:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 154:.\FreeRTOS\include/portmacro.h **** 
 155:.\FreeRTOS\include/portmacro.h **** #ifdef configASSERT
 156:.\FreeRTOS\include/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:.\FreeRTOS\include/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:.\FreeRTOS\include/portmacro.h **** #endif
 159:.\FreeRTOS\include/portmacro.h **** 
 160:.\FreeRTOS\include/portmacro.h **** /* portNOP() is not required by this port. */
 161:.\FreeRTOS\include/portmacro.h **** #define portNOP()
 162:.\FreeRTOS\include/portmacro.h **** 
 163:.\FreeRTOS\include/portmacro.h **** #define portINLINE	__inline
 164:.\FreeRTOS\include/portmacro.h **** 
 165:.\FreeRTOS\include/portmacro.h **** #ifndef portFORCE_INLINE
 166:.\FreeRTOS\include/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 8


 167:.\FreeRTOS\include/portmacro.h **** #endif
 168:.\FreeRTOS\include/portmacro.h **** 
 169:.\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:.\FreeRTOS\include/portmacro.h **** {
 171:.\FreeRTOS\include/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:.\FreeRTOS\include/portmacro.h **** BaseType_t xReturn;
 173:.\FreeRTOS\include/portmacro.h **** 
 174:.\FreeRTOS\include/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:.\FreeRTOS\include/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:.\FreeRTOS\include/portmacro.h **** 
 177:.\FreeRTOS\include/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:.\FreeRTOS\include/portmacro.h **** 	{
 179:.\FreeRTOS\include/portmacro.h **** 		xReturn = pdFALSE;
 180:.\FreeRTOS\include/portmacro.h **** 	}
 181:.\FreeRTOS\include/portmacro.h **** 	else
 182:.\FreeRTOS\include/portmacro.h **** 	{
 183:.\FreeRTOS\include/portmacro.h **** 		xReturn = pdTRUE;
 184:.\FreeRTOS\include/portmacro.h **** 	}
 185:.\FreeRTOS\include/portmacro.h **** 
 186:.\FreeRTOS\include/portmacro.h **** 	return xReturn;
 187:.\FreeRTOS\include/portmacro.h **** }
 188:.\FreeRTOS\include/portmacro.h **** 
 189:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 190:.\FreeRTOS\include/portmacro.h **** 
 191:.\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:.\FreeRTOS\include/portmacro.h **** {
 193:.\FreeRTOS\include/portmacro.h **** uint32_t ulNewBASEPRI;
 194:.\FreeRTOS\include/portmacro.h **** 
 195:.\FreeRTOS\include/portmacro.h **** 	__asm volatile
  40              		.loc 2 195 0
  41              		.syntax unified
  42              	@ 195 ".\FreeRTOS\include/portmacro.h" 1
  43 0006 4FF0A003 			mov r3, #160												
  44 000a 83F31188 		msr basepri, r3											
  45 000e BFF36F8F 		isb														
  46 0012 BFF34F8F 		dsb														
  47              	
  48              	@ 0 "" 2
  49              	.LVL0:
  50              		.thumb
  51              		.syntax unified
  52              	.L2:
  53              	.LBE13:
  54              	.LBE12:
 195:FreeRTOS\src/port.c **** 
 196:FreeRTOS\src/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 197:FreeRTOS\src/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 198:FreeRTOS\src/port.c **** 	should instead call vTaskDelete( NULL ).
 199:FreeRTOS\src/port.c **** 
 200:FreeRTOS\src/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 201:FreeRTOS\src/port.c **** 	defined, then stop here so application writers can catch the error. */
 202:FreeRTOS\src/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 203:FreeRTOS\src/port.c **** 	portDISABLE_INTERRUPTS();
 204:FreeRTOS\src/port.c **** 	while( ulDummy == 0 )
  55              		.loc 1 204 0 discriminator 1
  56 0016 019B     		ldr	r3, [sp, #4]
  57 0018 002B     		cmp	r3, #0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 9


  58 001a FCD0     		beq	.L2
 205:FreeRTOS\src/port.c **** 	{
 206:FreeRTOS\src/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 207:FreeRTOS\src/port.c **** 		started to remove a compiler warning about the function being defined
 208:FreeRTOS\src/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 209:FreeRTOS\src/port.c **** 		about code appearing after this function is called - making ulDummy
 210:FreeRTOS\src/port.c **** 		volatile makes the compiler think the function could return and
 211:FreeRTOS\src/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 212:FreeRTOS\src/port.c **** 		after it. */
 213:FreeRTOS\src/port.c **** 	}
 214:FreeRTOS\src/port.c **** }
  59              		.loc 1 214 0
  60 001c 02B0     		add	sp, sp, #8
  61              		.cfi_def_cfa_offset 0
  62              		@ sp needed
  63 001e 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE6:
  66              		.size	prvTaskExitError, .-prvTaskExitError
  67              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  71              		.type	prvPortStartFirstTask, %function
  72              	prvPortStartFirstTask:
  73              	.LFB8:
 215:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS\src/port.c **** 
 217:FreeRTOS\src/port.c **** void vPortSVCHandler( void )
 218:FreeRTOS\src/port.c **** {
 219:FreeRTOS\src/port.c **** 	__asm volatile (
 220:FreeRTOS\src/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 221:FreeRTOS\src/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 222:FreeRTOS\src/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 223:FreeRTOS\src/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 224:FreeRTOS\src/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 225:FreeRTOS\src/port.c **** 					"	isb								\n"
 226:FreeRTOS\src/port.c **** 					"	mov r0, #0 						\n"
 227:FreeRTOS\src/port.c **** 					"	msr	basepri, r0					\n"
 228:FreeRTOS\src/port.c **** 					"	orr r14, #0xd					\n"
 229:FreeRTOS\src/port.c **** 					"	bx r14							\n"
 230:FreeRTOS\src/port.c **** 					"									\n"
 231:FreeRTOS\src/port.c **** 					"	.align 4						\n"
 232:FreeRTOS\src/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 233:FreeRTOS\src/port.c **** 				);
 234:FreeRTOS\src/port.c **** }
 235:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 236:FreeRTOS\src/port.c **** 
 237:FreeRTOS\src/port.c **** static void prvPortStartFirstTask( void )
 238:FreeRTOS\src/port.c **** {
  74              		.loc 1 238 0
  75              		.cfi_startproc
  76              		@ Naked Function: prologue and epilogue provided by programmer.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
 239:FreeRTOS\src/port.c **** 	__asm volatile(
  79              		.loc 1 239 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 10


  80              		.syntax unified
  81              	@ 239 "FreeRTOS\src\port.c" 1
  82 0000 0648     		 ldr r0, =0xE000ED08 	
  83 0002 0068     	 ldr r0, [r0] 			
  84 0004 0068     	 ldr r0, [r0] 			
  85 0006 80F30888 	 msr msp, r0			
  86 000a 62B6     	 cpsie i				
  87 000c 61B6     	 cpsie f				
  88 000e BFF34F8F 	 dsb					
  89 0012 BFF36F8F 	 isb					
  90 0016 00DF     	 svc 0					
  91 0018 00BF     	 nop					
  92              	
  93              	@ 0 "" 2
 240:FreeRTOS\src/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 241:FreeRTOS\src/port.c **** 					" ldr r0, [r0] 			\n"
 242:FreeRTOS\src/port.c **** 					" ldr r0, [r0] 			\n"
 243:FreeRTOS\src/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 244:FreeRTOS\src/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 245:FreeRTOS\src/port.c **** 					" cpsie f				\n"
 246:FreeRTOS\src/port.c **** 					" dsb					\n"
 247:FreeRTOS\src/port.c **** 					" isb					\n"
 248:FreeRTOS\src/port.c **** 					" svc 0					\n" /* System call to start first task. */
 249:FreeRTOS\src/port.c **** 					" nop					\n"
 250:FreeRTOS\src/port.c **** 				);
 251:FreeRTOS\src/port.c **** }
  94              		.loc 1 251 0
  95              		.thumb
  96              		.syntax unified
  97              		.cfi_endproc
  98              	.LFE8:
  99              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 100 001a 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 101              		.align	2
 102              		.global	pxPortInitialiseStack
 103              		.thumb
 104              		.thumb_func
 105              		.type	pxPortInitialiseStack, %function
 106              	pxPortInitialiseStack:
 107              	.LFB5:
 175:FreeRTOS\src/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 108              		.loc 1 175 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.LVL1:
 179:FreeRTOS\src/port.c **** 	pxTopOfStack--;
 114              		.loc 1 179 0
 115 0000 4FF08073 		mov	r3, #16777216
 116 0004 40F8043C 		str	r3, [r0, #-4]
 117              	.LVL2:
 181:FreeRTOS\src/port.c **** 	pxTopOfStack--;
 118              		.loc 1 181 0
 119 0008 21F00101 		bic	r1, r1, #1
 120              	.LVL3:
 121 000c 40F8081C 		str	r1, [r0, #-8]
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 11


 122              	.LVL4:
 183:FreeRTOS\src/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 123              		.loc 1 183 0
 124 0010 034B     		ldr	r3, .L6
 125 0012 40F80C3C 		str	r3, [r0, #-12]
 126              	.LVL5:
 185:FreeRTOS\src/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 127              		.loc 1 185 0
 128 0016 40F8202C 		str	r2, [r0, #-32]
 129              	.LVL6:
 189:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 130              		.loc 1 189 0
 131 001a 4038     		subs	r0, r0, #64
 132              	.LVL7:
 133 001c 7047     		bx	lr
 134              	.L7:
 135 001e 00BF     		.align	2
 136              	.L6:
 137 0020 00000000 		.word	prvTaskExitError
 138              		.cfi_endproc
 139              	.LFE5:
 140              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 141              		.section	.text.vPortSVCHandler,"ax",%progbits
 142              		.align	2
 143              		.global	vPortSVCHandler
 144              		.thumb
 145              		.thumb_func
 146              		.type	vPortSVCHandler, %function
 147              	vPortSVCHandler:
 148              	.LFB7:
 218:FreeRTOS\src/port.c **** 	__asm volatile (
 149              		.loc 1 218 0
 150              		.cfi_startproc
 151              		@ Naked Function: prologue and epilogue provided by programmer.
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 219:FreeRTOS\src/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 154              		.loc 1 219 0
 155              		.syntax unified
 156              	@ 219 "FreeRTOS\src\port.c" 1
 157 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 158 0002 1968     		ldr r1, [r3]					
 159 0004 0868     		ldr r0, [r1]					
 160 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 161 000a 80F30988 		msr psp, r0						
 162 000e BFF36F8F 		isb								
 163 0012 4FF00000 		mov r0, #0 						
 164 0016 80F31188 		msr	basepri, r0					
 165 001a 4EF00D0E 		orr r14, #0xd					
 166 001e 7047     		bx r14							
 167              										
 168              		.align 4						
 169 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 170              	
 171              	@ 0 "" 2
 234:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 172              		.loc 1 234 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 12


 173              		.thumb
 174              		.syntax unified
 175              		.cfi_endproc
 176              	.LFE7:
 177              		.size	vPortSVCHandler, .-vPortSVCHandler
 178              		.section	.text.vPortEndScheduler,"ax",%progbits
 179              		.align	2
 180              		.global	vPortEndScheduler
 181              		.thumb
 182              		.thumb_func
 183              		.type	vPortEndScheduler, %function
 184              	vPortEndScheduler:
 185              	.LFB10:
 252:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 253:FreeRTOS\src/port.c **** 
 254:FreeRTOS\src/port.c **** /*
 255:FreeRTOS\src/port.c ****  * See header file for description.
 256:FreeRTOS\src/port.c ****  */
 257:FreeRTOS\src/port.c **** BaseType_t xPortStartScheduler( void )
 258:FreeRTOS\src/port.c **** {
 259:FreeRTOS\src/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 260:FreeRTOS\src/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 261:FreeRTOS\src/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 262:FreeRTOS\src/port.c **** 
 263:FreeRTOS\src/port.c **** 	#if( configASSERT_DEFINED == 1 )
 264:FreeRTOS\src/port.c **** 	{
 265:FreeRTOS\src/port.c **** 		volatile uint32_t ulOriginalPriority;
 266:FreeRTOS\src/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 267:FreeRTOS\src/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 268:FreeRTOS\src/port.c **** 
 269:FreeRTOS\src/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 270:FreeRTOS\src/port.c **** 		functions can be called.  ISR safe functions are those that end in
 271:FreeRTOS\src/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 272:FreeRTOS\src/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 273:FreeRTOS\src/port.c **** 
 274:FreeRTOS\src/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 275:FreeRTOS\src/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 276:FreeRTOS\src/port.c **** 
 277:FreeRTOS\src/port.c **** 		/* Determine the number of priority bits available.  First write to all
 278:FreeRTOS\src/port.c **** 		possible bits. */
 279:FreeRTOS\src/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 280:FreeRTOS\src/port.c **** 
 281:FreeRTOS\src/port.c **** 		/* Read the value back to see how many bits stuck. */
 282:FreeRTOS\src/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 283:FreeRTOS\src/port.c **** 
 284:FreeRTOS\src/port.c **** 		/* Use the same mask on the maximum system call priority. */
 285:FreeRTOS\src/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 286:FreeRTOS\src/port.c **** 
 287:FreeRTOS\src/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 288:FreeRTOS\src/port.c **** 		of bits read back. */
 289:FreeRTOS\src/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 290:FreeRTOS\src/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 291:FreeRTOS\src/port.c **** 		{
 292:FreeRTOS\src/port.c **** 			ulMaxPRIGROUPValue--;
 293:FreeRTOS\src/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 294:FreeRTOS\src/port.c **** 		}
 295:FreeRTOS\src/port.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 13


 296:FreeRTOS\src/port.c **** 		#ifdef __NVIC_PRIO_BITS
 297:FreeRTOS\src/port.c **** 		{
 298:FreeRTOS\src/port.c **** 			/* Check the CMSIS configuration that defines the number of
 299:FreeRTOS\src/port.c **** 			priority bits matches the number of priority bits actually queried
 300:FreeRTOS\src/port.c **** 			from the hardware. */
 301:FreeRTOS\src/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 302:FreeRTOS\src/port.c **** 		}
 303:FreeRTOS\src/port.c **** 		#endif
 304:FreeRTOS\src/port.c **** 
 305:FreeRTOS\src/port.c **** 		#ifdef configPRIO_BITS
 306:FreeRTOS\src/port.c **** 		{
 307:FreeRTOS\src/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 308:FreeRTOS\src/port.c **** 			priority bits matches the number of priority bits actually queried
 309:FreeRTOS\src/port.c **** 			from the hardware. */
 310:FreeRTOS\src/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 311:FreeRTOS\src/port.c **** 		}
 312:FreeRTOS\src/port.c **** 		#endif
 313:FreeRTOS\src/port.c **** 
 314:FreeRTOS\src/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 315:FreeRTOS\src/port.c **** 		register. */
 316:FreeRTOS\src/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 317:FreeRTOS\src/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 318:FreeRTOS\src/port.c **** 
 319:FreeRTOS\src/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 320:FreeRTOS\src/port.c **** 		value. */
 321:FreeRTOS\src/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 322:FreeRTOS\src/port.c **** 	}
 323:FreeRTOS\src/port.c **** 	#endif /* conifgASSERT_DEFINED */
 324:FreeRTOS\src/port.c **** 
 325:FreeRTOS\src/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 326:FreeRTOS\src/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 327:FreeRTOS\src/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 328:FreeRTOS\src/port.c **** 
 329:FreeRTOS\src/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 330:FreeRTOS\src/port.c **** 	here already. */
 331:FreeRTOS\src/port.c **** 	vPortSetupTimerInterrupt();
 332:FreeRTOS\src/port.c **** 
 333:FreeRTOS\src/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 334:FreeRTOS\src/port.c **** 	uxCriticalNesting = 0;
 335:FreeRTOS\src/port.c **** 
 336:FreeRTOS\src/port.c **** 	/* Start the first task. */
 337:FreeRTOS\src/port.c **** 	prvPortStartFirstTask();
 338:FreeRTOS\src/port.c **** 
 339:FreeRTOS\src/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 340:FreeRTOS\src/port.c **** 	exit error function to prevent compiler warnings about a static function
 341:FreeRTOS\src/port.c **** 	not being called in the case that the application writer overrides this
 342:FreeRTOS\src/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 343:FreeRTOS\src/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 344:FreeRTOS\src/port.c **** 	symbol. */
 345:FreeRTOS\src/port.c **** 	vTaskSwitchContext();
 346:FreeRTOS\src/port.c **** 	prvTaskExitError();
 347:FreeRTOS\src/port.c **** 
 348:FreeRTOS\src/port.c **** 	/* Should not get here! */
 349:FreeRTOS\src/port.c **** 	return 0;
 350:FreeRTOS\src/port.c **** }
 351:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 352:FreeRTOS\src/port.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 14


 353:FreeRTOS\src/port.c **** void vPortEndScheduler( void )
 354:FreeRTOS\src/port.c **** {
 186              		.loc 1 354 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 0000 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE10:
 194              		.size	vPortEndScheduler, .-vPortEndScheduler
 195 0002 00BF     		.section	.text.vPortEnterCritical,"ax",%progbits
 196              		.align	2
 197              		.global	vPortEnterCritical
 198              		.thumb
 199              		.thumb_func
 200              		.type	vPortEnterCritical, %function
 201              	vPortEnterCritical:
 202              	.LFB11:
 355:FreeRTOS\src/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 356:FreeRTOS\src/port.c **** 	Artificially force an assert. */
 357:FreeRTOS\src/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 358:FreeRTOS\src/port.c **** }
 359:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 360:FreeRTOS\src/port.c **** 
 361:FreeRTOS\src/port.c **** void vPortEnterCritical( void )
 362:FreeRTOS\src/port.c **** {
 203              		.loc 1 362 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208              	.LBB14:
 209              	.LBB15:
 210              		.loc 2 195 0
 211              		.syntax unified
 212              	@ 195 ".\FreeRTOS\include/portmacro.h" 1
 213 0000 4FF0A003 			mov r3, #160												
 214 0004 83F31188 		msr basepri, r3											
 215 0008 BFF36F8F 		isb														
 216 000c BFF34F8F 		dsb														
 217              	
 218              	@ 0 "" 2
 219              		.thumb
 220              		.syntax unified
 221              	.LBE15:
 222              	.LBE14:
 363:FreeRTOS\src/port.c **** 	portDISABLE_INTERRUPTS();
 364:FreeRTOS\src/port.c **** 	uxCriticalNesting++;
 223              		.loc 1 364 0
 224 0010 024A     		ldr	r2, .L11
 225 0012 1368     		ldr	r3, [r2]
 226 0014 0133     		adds	r3, r3, #1
 227 0016 1360     		str	r3, [r2]
 228 0018 7047     		bx	lr
 229              	.L12:
 230 001a 00BF     		.align	2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 15


 231              	.L11:
 232 001c 00000000 		.word	.LANCHOR0
 233              		.cfi_endproc
 234              	.LFE11:
 235              		.size	vPortEnterCritical, .-vPortEnterCritical
 236              		.section	.text.vPortExitCritical,"ax",%progbits
 237              		.align	2
 238              		.global	vPortExitCritical
 239              		.thumb
 240              		.thumb_func
 241              		.type	vPortExitCritical, %function
 242              	vPortExitCritical:
 243              	.LFB12:
 365:FreeRTOS\src/port.c **** 
 366:FreeRTOS\src/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 367:FreeRTOS\src/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 368:FreeRTOS\src/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 369:FreeRTOS\src/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 370:FreeRTOS\src/port.c **** 	assert function also uses a critical section. */
 371:FreeRTOS\src/port.c **** 	if( uxCriticalNesting == 1 )
 372:FreeRTOS\src/port.c **** 	{
 373:FreeRTOS\src/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 374:FreeRTOS\src/port.c **** 	}
 375:FreeRTOS\src/port.c **** }
 376:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 377:FreeRTOS\src/port.c **** 
 378:FreeRTOS\src/port.c **** void vPortExitCritical( void )
 379:FreeRTOS\src/port.c **** {
 244              		.loc 1 379 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 380:FreeRTOS\src/port.c **** 	configASSERT( uxCriticalNesting );
 381:FreeRTOS\src/port.c **** 	uxCriticalNesting--;
 249              		.loc 1 381 0
 250 0000 034A     		ldr	r2, .L15
 251 0002 1368     		ldr	r3, [r2]
 252 0004 013B     		subs	r3, r3, #1
 253 0006 1360     		str	r3, [r2]
 382:FreeRTOS\src/port.c **** 	if( uxCriticalNesting == 0 )
 254              		.loc 1 382 0
 255 0008 0BB9     		cbnz	r3, .L13
 256              	.LVL8:
 257              	.LBB16:
 258              	.LBB17:
 196:.\FreeRTOS\include/portmacro.h **** 	(
 197:.\FreeRTOS\include/portmacro.h **** 		"	mov %0, %1												\n" \
 198:.\FreeRTOS\include/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:.\FreeRTOS\include/portmacro.h **** 		"	isb														\n" \
 200:.\FreeRTOS\include/portmacro.h **** 		"	dsb														\n" \
 201:.\FreeRTOS\include/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:.\FreeRTOS\include/portmacro.h **** 	);
 203:.\FreeRTOS\include/portmacro.h **** }
 204:.\FreeRTOS\include/portmacro.h **** 
 205:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 206:.\FreeRTOS\include/portmacro.h **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 16


 207:.\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:.\FreeRTOS\include/portmacro.h **** {
 209:.\FreeRTOS\include/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:.\FreeRTOS\include/portmacro.h **** 
 211:.\FreeRTOS\include/portmacro.h **** 	__asm volatile
 212:.\FreeRTOS\include/portmacro.h **** 	(
 213:.\FreeRTOS\include/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:.\FreeRTOS\include/portmacro.h **** 		"	mov %1, %2												\n" \
 215:.\FreeRTOS\include/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:.\FreeRTOS\include/portmacro.h **** 		"	isb														\n" \
 217:.\FreeRTOS\include/portmacro.h **** 		"	dsb														\n" \
 218:.\FreeRTOS\include/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:.\FreeRTOS\include/portmacro.h **** 	);
 220:.\FreeRTOS\include/portmacro.h **** 
 221:.\FreeRTOS\include/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:.\FreeRTOS\include/portmacro.h **** 	warnings. */
 223:.\FreeRTOS\include/portmacro.h **** 	return ulOriginalBASEPRI;
 224:.\FreeRTOS\include/portmacro.h **** }
 225:.\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 226:.\FreeRTOS\include/portmacro.h **** 
 227:.\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:.\FreeRTOS\include/portmacro.h **** {
 229:.\FreeRTOS\include/portmacro.h **** 	__asm volatile
 259              		.loc 2 229 0
 260              		.syntax unified
 261              	@ 229 ".\FreeRTOS\include/portmacro.h" 1
 262 000a 83F31188 			msr basepri, r3	
 263              	@ 0 "" 2
 264              	.LVL9:
 265              		.thumb
 266              		.syntax unified
 267              	.L13:
 268 000e 7047     		bx	lr
 269              	.L16:
 270              		.align	2
 271              	.L15:
 272 0010 00000000 		.word	.LANCHOR0
 273              	.LBE17:
 274              	.LBE16:
 275              		.cfi_endproc
 276              	.LFE12:
 277              		.size	vPortExitCritical, .-vPortExitCritical
 278              		.section	.text.xPortPendSVHandler,"ax",%progbits
 279              		.align	2
 280              		.global	xPortPendSVHandler
 281              		.thumb
 282              		.thumb_func
 283              		.type	xPortPendSVHandler, %function
 284              	xPortPendSVHandler:
 285              	.LFB13:
 383:FreeRTOS\src/port.c **** 	{
 384:FreeRTOS\src/port.c **** 		portENABLE_INTERRUPTS();
 385:FreeRTOS\src/port.c **** 	}
 386:FreeRTOS\src/port.c **** }
 387:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 388:FreeRTOS\src/port.c **** 
 389:FreeRTOS\src/port.c **** void xPortPendSVHandler( void )
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 17


 390:FreeRTOS\src/port.c **** {
 286              		.loc 1 390 0
 287              		.cfi_startproc
 288              		@ Naked Function: prologue and epilogue provided by programmer.
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 391:FreeRTOS\src/port.c **** 	/* This is a naked function. */
 392:FreeRTOS\src/port.c **** 
 393:FreeRTOS\src/port.c **** 	__asm volatile
 291              		.loc 1 393 0
 292              		.syntax unified
 293              	@ 393 "FreeRTOS\src\port.c" 1
 294 0000 EFF30980 			mrs r0, psp							
 295 0004 BFF36F8F 		isb									
 296              											
 297 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 298 000a 1A68     		ldr	r2, [r3]						
 299              											
 300 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 301 0010 1060     		str r0, [r2]						
 302              											
 303 0012 2DE90840 		stmdb sp!, {r3, r14}				
 304 0016 4FF0A000 		mov r0, #160							
 305 001a 80F31188 		msr basepri, r0						
 306 001e FFF7FEFF 		bl vTaskSwitchContext				
 307 0022 4FF00000 		mov r0, #0							
 308 0026 80F31188 		msr basepri, r0						
 309 002a BDE80840 		ldmia sp!, {r3, r14}				
 310              											
 311 002e 1968     		ldr r1, [r3]						
 312 0030 0868     		ldr r0, [r1]						
 313 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 314 0036 80F30988 		msr psp, r0							
 315 003a BFF36F8F 		isb									
 316 003e 7047     		bx r14								
 317              											
 318              		.align 4							
 319 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 320              	
 321              	@ 0 "" 2
 394:FreeRTOS\src/port.c **** 	(
 395:FreeRTOS\src/port.c **** 	"	mrs r0, psp							\n"
 396:FreeRTOS\src/port.c **** 	"	isb									\n"
 397:FreeRTOS\src/port.c **** 	"										\n"
 398:FreeRTOS\src/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 399:FreeRTOS\src/port.c **** 	"	ldr	r2, [r3]						\n"
 400:FreeRTOS\src/port.c **** 	"										\n"
 401:FreeRTOS\src/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 402:FreeRTOS\src/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 403:FreeRTOS\src/port.c **** 	"										\n"
 404:FreeRTOS\src/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 405:FreeRTOS\src/port.c **** 	"	mov r0, %0							\n"
 406:FreeRTOS\src/port.c **** 	"	msr basepri, r0						\n"
 407:FreeRTOS\src/port.c **** 	"	bl vTaskSwitchContext				\n"
 408:FreeRTOS\src/port.c **** 	"	mov r0, #0							\n"
 409:FreeRTOS\src/port.c **** 	"	msr basepri, r0						\n"
 410:FreeRTOS\src/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 18


 411:FreeRTOS\src/port.c **** 	"										\n" /* Restore the context, including the critical nesting count. */
 412:FreeRTOS\src/port.c **** 	"	ldr r1, [r3]						\n"
 413:FreeRTOS\src/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 414:FreeRTOS\src/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 415:FreeRTOS\src/port.c **** 	"	msr psp, r0							\n"
 416:FreeRTOS\src/port.c **** 	"	isb									\n"
 417:FreeRTOS\src/port.c **** 	"	bx r14								\n"
 418:FreeRTOS\src/port.c **** 	"										\n"
 419:FreeRTOS\src/port.c **** 	"	.align 4							\n"
 420:FreeRTOS\src/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 421:FreeRTOS\src/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 422:FreeRTOS\src/port.c **** 	);
 423:FreeRTOS\src/port.c **** }
 322              		.loc 1 423 0
 323              		.thumb
 324              		.syntax unified
 325              		.cfi_endproc
 326              	.LFE13:
 327              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 328              		.section	.text.xPortSysTickHandler,"ax",%progbits
 329              		.align	2
 330              		.global	xPortSysTickHandler
 331              		.thumb
 332              		.thumb_func
 333              		.type	xPortSysTickHandler, %function
 334              	xPortSysTickHandler:
 335              	.LFB14:
 424:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 425:FreeRTOS\src/port.c **** 
 426:FreeRTOS\src/port.c **** void xPortSysTickHandler( void )
 427:FreeRTOS\src/port.c **** {
 336              		.loc 1 427 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340 0000 08B5     		push	{r3, lr}
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 3, -8
 343              		.cfi_offset 14, -4
 344              	.LBB18:
 345              	.LBB19:
 195:.\FreeRTOS\include/portmacro.h **** 	(
 346              		.loc 2 195 0
 347              		.syntax unified
 348              	@ 195 ".\FreeRTOS\include/portmacro.h" 1
 349 0002 4FF0A003 			mov r3, #160												
 350 0006 83F31188 		msr basepri, r3											
 351 000a BFF36F8F 		isb														
 352 000e BFF34F8F 		dsb														
 353              	
 354              	@ 0 "" 2
 355              		.thumb
 356              		.syntax unified
 357              	.LBE19:
 358              	.LBE18:
 428:FreeRTOS\src/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 429:FreeRTOS\src/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 19


 430:FreeRTOS\src/port.c **** 	save and then restore the interrupt mask value as its value is already
 431:FreeRTOS\src/port.c **** 	known. */
 432:FreeRTOS\src/port.c **** 	portDISABLE_INTERRUPTS();
 433:FreeRTOS\src/port.c **** 	{
 434:FreeRTOS\src/port.c **** 		/* Increment the RTOS tick. */
 435:FreeRTOS\src/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 359              		.loc 1 435 0
 360 0012 FFF7FEFF 		bl	xTaskIncrementTick
 361              	.LVL10:
 362 0016 18B1     		cbz	r0, .L19
 436:FreeRTOS\src/port.c **** 		{
 437:FreeRTOS\src/port.c **** 			/* A context switch is required.  Context switching is performed in
 438:FreeRTOS\src/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 439:FreeRTOS\src/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 363              		.loc 1 439 0
 364 0018 4FF08052 		mov	r2, #268435456
 365 001c 024B     		ldr	r3, .L21
 366 001e 1A60     		str	r2, [r3]
 367              	.L19:
 368              	.LVL11:
 369              	.LBB20:
 370              	.LBB21:
 371              		.loc 2 229 0
 372 0020 0023     		movs	r3, #0
 373              		.syntax unified
 374              	@ 229 ".\FreeRTOS\include/portmacro.h" 1
 375 0022 83F31188 			msr basepri, r3	
 376              	@ 0 "" 2
 377              	.LVL12:
 378              		.thumb
 379              		.syntax unified
 380 0026 08BD     		pop	{r3, pc}
 381              	.L22:
 382              		.align	2
 383              	.L21:
 384 0028 04ED00E0 		.word	-536810236
 385              	.LBE21:
 386              	.LBE20:
 387              		.cfi_endproc
 388              	.LFE14:
 389              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 390              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 391              		.align	2
 392              		.weak	vPortSetupTimerInterrupt
 393              		.thumb
 394              		.thumb_func
 395              		.type	vPortSetupTimerInterrupt, %function
 396              	vPortSetupTimerInterrupt:
 397              	.LFB15:
 440:FreeRTOS\src/port.c **** 		}
 441:FreeRTOS\src/port.c **** 	}
 442:FreeRTOS\src/port.c **** 	portENABLE_INTERRUPTS();
 443:FreeRTOS\src/port.c **** }
 444:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 445:FreeRTOS\src/port.c **** 
 446:FreeRTOS\src/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 447:FreeRTOS\src/port.c **** 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 20


 448:FreeRTOS\src/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 449:FreeRTOS\src/port.c **** 	{
 450:FreeRTOS\src/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 451:FreeRTOS\src/port.c **** 	TickType_t xModifiableIdleTime;
 452:FreeRTOS\src/port.c **** 
 453:FreeRTOS\src/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 454:FreeRTOS\src/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 455:FreeRTOS\src/port.c **** 		{
 456:FreeRTOS\src/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 457:FreeRTOS\src/port.c **** 		}
 458:FreeRTOS\src/port.c **** 
 459:FreeRTOS\src/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 460:FreeRTOS\src/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 461:FreeRTOS\src/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 462:FreeRTOS\src/port.c **** 		kernel with respect to calendar time. */
 463:FreeRTOS\src/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 464:FreeRTOS\src/port.c **** 
 465:FreeRTOS\src/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 466:FreeRTOS\src/port.c **** 		tick periods.  -1 is used because this code will execute part way
 467:FreeRTOS\src/port.c **** 		through one of the tick periods. */
 468:FreeRTOS\src/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 469:FreeRTOS\src/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 470:FreeRTOS\src/port.c **** 		{
 471:FreeRTOS\src/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 472:FreeRTOS\src/port.c **** 		}
 473:FreeRTOS\src/port.c **** 
 474:FreeRTOS\src/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 475:FreeRTOS\src/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 476:FreeRTOS\src/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 477:FreeRTOS\src/port.c **** 		__asm volatile( "dsb" );
 478:FreeRTOS\src/port.c **** 		__asm volatile( "isb" );
 479:FreeRTOS\src/port.c **** 
 480:FreeRTOS\src/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 481:FreeRTOS\src/port.c **** 		to be unsuspended then abandon the low power entry. */
 482:FreeRTOS\src/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 483:FreeRTOS\src/port.c **** 		{
 484:FreeRTOS\src/port.c **** 			/* Restart from whatever is left in the count register to complete
 485:FreeRTOS\src/port.c **** 			this tick period. */
 486:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 487:FreeRTOS\src/port.c **** 
 488:FreeRTOS\src/port.c **** 			/* Restart SysTick. */
 489:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 490:FreeRTOS\src/port.c **** 
 491:FreeRTOS\src/port.c **** 			/* Reset the reload register to the value required for normal tick
 492:FreeRTOS\src/port.c **** 			periods. */
 493:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 494:FreeRTOS\src/port.c **** 
 495:FreeRTOS\src/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 496:FreeRTOS\src/port.c **** 			above. */
 497:FreeRTOS\src/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 498:FreeRTOS\src/port.c **** 		}
 499:FreeRTOS\src/port.c **** 		else
 500:FreeRTOS\src/port.c **** 		{
 501:FreeRTOS\src/port.c **** 			/* Set the new reload value. */
 502:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 503:FreeRTOS\src/port.c **** 
 504:FreeRTOS\src/port.c **** 			/* Clear the SysTick count flag and set the count value back to
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 21


 505:FreeRTOS\src/port.c **** 			zero. */
 506:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 507:FreeRTOS\src/port.c **** 
 508:FreeRTOS\src/port.c **** 			/* Restart SysTick. */
 509:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 510:FreeRTOS\src/port.c **** 
 511:FreeRTOS\src/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 512:FreeRTOS\src/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 513:FreeRTOS\src/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 514:FreeRTOS\src/port.c **** 			should not be executed again.  However, the original expected idle
 515:FreeRTOS\src/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 516:FreeRTOS\src/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 517:FreeRTOS\src/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 518:FreeRTOS\src/port.c **** 			if( xModifiableIdleTime > 0 )
 519:FreeRTOS\src/port.c **** 			{
 520:FreeRTOS\src/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 521:FreeRTOS\src/port.c **** 				__asm volatile( "wfi" );
 522:FreeRTOS\src/port.c **** 				__asm volatile( "isb" );
 523:FreeRTOS\src/port.c **** 			}
 524:FreeRTOS\src/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 525:FreeRTOS\src/port.c **** 
 526:FreeRTOS\src/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 527:FreeRTOS\src/port.c **** 			out of sleep mode to execute immediately.  see comments above
 528:FreeRTOS\src/port.c **** 			__disable_interrupt() call above. */
 529:FreeRTOS\src/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 530:FreeRTOS\src/port.c **** 			__asm volatile( "dsb" );
 531:FreeRTOS\src/port.c **** 			__asm volatile( "isb" );
 532:FreeRTOS\src/port.c **** 
 533:FreeRTOS\src/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 534:FreeRTOS\src/port.c **** 			and interrupts that execute while the clock is stopped will increase
 535:FreeRTOS\src/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 536:FreeRTOS\src/port.c **** 			time. */
 537:FreeRTOS\src/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 538:FreeRTOS\src/port.c **** 			__asm volatile( "dsb" );
 539:FreeRTOS\src/port.c **** 			__asm volatile( "isb" );
 540:FreeRTOS\src/port.c **** 
 541:FreeRTOS\src/port.c **** 			/* Disable the SysTick clock without reading the
 542:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 543:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 544:FreeRTOS\src/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 545:FreeRTOS\src/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 546:FreeRTOS\src/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 547:FreeRTOS\src/port.c **** 			time*/
 548:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 549:FreeRTOS\src/port.c **** 
 550:FreeRTOS\src/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 551:FreeRTOS\src/port.c **** 			been set back to the current reload value (the reload back being
 552:FreeRTOS\src/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 553:FreeRTOS\src/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 554:FreeRTOS\src/port.c **** 			must have brought the system out of sleep mode). */
 555:FreeRTOS\src/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 556:FreeRTOS\src/port.c **** 			{
 557:FreeRTOS\src/port.c **** 				uint32_t ulCalculatedLoadValue;
 558:FreeRTOS\src/port.c **** 
 559:FreeRTOS\src/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 560:FreeRTOS\src/port.c **** 				reloaded with ulReloadValue.  Reset the
 561:FreeRTOS\src/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 22


 562:FreeRTOS\src/port.c **** 				period. */
 563:FreeRTOS\src/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 564:FreeRTOS\src/port.c **** 
 565:FreeRTOS\src/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 566:FreeRTOS\src/port.c **** 				underflowed because the post sleep hook did something
 567:FreeRTOS\src/port.c **** 				that took too long. */
 568:FreeRTOS\src/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 569:FreeRTOS\src/port.c **** 				{
 570:FreeRTOS\src/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 571:FreeRTOS\src/port.c **** 				}
 572:FreeRTOS\src/port.c **** 
 573:FreeRTOS\src/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 574:FreeRTOS\src/port.c **** 
 575:FreeRTOS\src/port.c **** 				/* As the pending tick will be processed as soon as this
 576:FreeRTOS\src/port.c **** 				function exits, the tick value maintained by the tick is stepped
 577:FreeRTOS\src/port.c **** 				forward by one less than the time spent waiting. */
 578:FreeRTOS\src/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 579:FreeRTOS\src/port.c **** 			}
 580:FreeRTOS\src/port.c **** 			else
 581:FreeRTOS\src/port.c **** 			{
 582:FreeRTOS\src/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 583:FreeRTOS\src/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 584:FreeRTOS\src/port.c **** 				periods (not the ulReload value which accounted for part
 585:FreeRTOS\src/port.c **** 				ticks). */
 586:FreeRTOS\src/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 587:FreeRTOS\src/port.c **** 
 588:FreeRTOS\src/port.c **** 				/* How many complete tick periods passed while the processor
 589:FreeRTOS\src/port.c **** 				was waiting? */
 590:FreeRTOS\src/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 591:FreeRTOS\src/port.c **** 
 592:FreeRTOS\src/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 593:FreeRTOS\src/port.c **** 				period remains. */
 594:FreeRTOS\src/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 595:FreeRTOS\src/port.c **** 			}
 596:FreeRTOS\src/port.c **** 
 597:FreeRTOS\src/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 598:FreeRTOS\src/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 599:FreeRTOS\src/port.c **** 			value. */
 600:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 601:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 602:FreeRTOS\src/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 603:FreeRTOS\src/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 604:FreeRTOS\src/port.c **** 
 605:FreeRTOS\src/port.c **** 			/* Exit with interrpts enabled. */
 606:FreeRTOS\src/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 607:FreeRTOS\src/port.c **** 		}
 608:FreeRTOS\src/port.c **** 	}
 609:FreeRTOS\src/port.c **** 
 610:FreeRTOS\src/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 611:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 612:FreeRTOS\src/port.c **** 
 613:FreeRTOS\src/port.c **** /*
 614:FreeRTOS\src/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 615:FreeRTOS\src/port.c ****  * frequency.
 616:FreeRTOS\src/port.c ****  */
 617:FreeRTOS\src/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 618:FreeRTOS\src/port.c **** {
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 23


 398              		.loc 1 618 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 619:FreeRTOS\src/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 620:FreeRTOS\src/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 621:FreeRTOS\src/port.c **** 	{
 622:FreeRTOS\src/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 623:FreeRTOS\src/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 624:FreeRTOS\src/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 625:FreeRTOS\src/port.c **** 	}
 626:FreeRTOS\src/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 627:FreeRTOS\src/port.c **** 
 628:FreeRTOS\src/port.c **** 	/* Stop and clear the SysTick. */
 629:FreeRTOS\src/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 403              		.loc 1 629 0
 404 0000 054B     		ldr	r3, .L24
 405 0002 0022     		movs	r2, #0
 406 0004 1A60     		str	r2, [r3]
 630:FreeRTOS\src/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 407              		.loc 1 630 0
 408 0006 0549     		ldr	r1, .L24+4
 409 0008 0A60     		str	r2, [r1]
 631:FreeRTOS\src/port.c **** 
 632:FreeRTOS\src/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 633:FreeRTOS\src/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 410              		.loc 1 633 0
 411 000a 45F6BF51 		movw	r1, #23999
 412 000e 044A     		ldr	r2, .L24+8
 413 0010 1160     		str	r1, [r2]
 634:FreeRTOS\src/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 414              		.loc 1 634 0
 415 0012 0722     		movs	r2, #7
 416 0014 1A60     		str	r2, [r3]
 417 0016 7047     		bx	lr
 418              	.L25:
 419              		.align	2
 420              	.L24:
 421 0018 10E000E0 		.word	-536813552
 422 001c 18E000E0 		.word	-536813544
 423 0020 14E000E0 		.word	-536813548
 424              		.cfi_endproc
 425              	.LFE15:
 426              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 427              		.section	.text.xPortStartScheduler,"ax",%progbits
 428              		.align	2
 429              		.global	xPortStartScheduler
 430              		.thumb
 431              		.thumb_func
 432              		.type	xPortStartScheduler, %function
 433              	xPortStartScheduler:
 434              	.LFB9:
 258:FreeRTOS\src/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 435              		.loc 1 258 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 24


 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439 0000 10B5     		push	{r4, lr}
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 4, -8
 442              		.cfi_offset 14, -4
 326:FreeRTOS\src/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 443              		.loc 1 326 0
 444 0002 0B4B     		ldr	r3, .L28
 445 0004 1A68     		ldr	r2, [r3]
 446 0006 42F46002 		orr	r2, r2, #14680064
 447 000a 1A60     		str	r2, [r3]
 327:FreeRTOS\src/port.c **** 
 448              		.loc 1 327 0
 449 000c 1A68     		ldr	r2, [r3]
 450 000e 42F06042 		orr	r2, r2, #-536870912
 451 0012 1A60     		str	r2, [r3]
 331:FreeRTOS\src/port.c **** 
 452              		.loc 1 331 0
 453 0014 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 454              	.LVL13:
 334:FreeRTOS\src/port.c **** 
 455              		.loc 1 334 0
 456 0018 0024     		movs	r4, #0
 457 001a 064B     		ldr	r3, .L28+4
 458 001c 1C60     		str	r4, [r3]
 337:FreeRTOS\src/port.c **** 
 459              		.loc 1 337 0
 460 001e FFF7FEFF 		bl	prvPortStartFirstTask
 461              	.LVL14:
 345:FreeRTOS\src/port.c **** 	prvTaskExitError();
 462              		.loc 1 345 0
 463 0022 FFF7FEFF 		bl	vTaskSwitchContext
 464              	.LVL15:
 346:FreeRTOS\src/port.c **** 
 465              		.loc 1 346 0
 466 0026 FFF7FEFF 		bl	prvTaskExitError
 467              	.LVL16:
 350:FreeRTOS\src/port.c **** /*-----------------------------------------------------------*/
 468              		.loc 1 350 0
 469 002a 2046     		mov	r0, r4
 470 002c 10BD     		pop	{r4, pc}
 471              	.L29:
 472 002e 00BF     		.align	2
 473              	.L28:
 474 0030 20ED00E0 		.word	-536810208
 475 0034 00000000 		.word	.LANCHOR0
 476              		.cfi_endproc
 477              	.LFE9:
 478              		.size	xPortStartScheduler, .-xPortStartScheduler
 479              		.data
 480              		.align	2
 481              		.set	.LANCHOR0,. + 0
 482              		.type	uxCriticalNesting, %object
 483              		.size	uxCriticalNesting, 4
 484              	uxCriticalNesting:
 485 0000 AAAAAAAA 		.word	-1431655766
 486              		.text
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 25


 487              	.Letext0:
 488              		.file 3 "d:\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.1\\arm-none-eabi\\inc
 489              		.file 4 "d:\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.1\\arm-none-eabi\\inc
 490              		.file 5 ".\\FreeRTOS\\include/projdefs.h"
 491              		.file 6 ".\\FreeRTOS\\include/task.h"
 492              		.section	.debug_info,"",%progbits
 493              	.Ldebug_info0:
 494 0000 2A030000 		.4byte	0x32a
 495 0004 0400     		.2byte	0x4
 496 0006 00000000 		.4byte	.Ldebug_abbrev0
 497 000a 04       		.byte	0x4
 498 000b 01       		.uleb128 0x1
 499 000c 0B010000 		.4byte	.LASF37
 500 0010 0C       		.byte	0xc
 501 0011 7C000000 		.4byte	.LASF38
 502 0015 37000000 		.4byte	.LASF39
 503 0019 00000000 		.4byte	.Ldebug_ranges0+0
 504 001d 00000000 		.4byte	0
 505 0021 00000000 		.4byte	.Ldebug_line0
 506 0025 02       		.uleb128 0x2
 507 0026 04       		.byte	0x4
 508 0027 05       		.byte	0x5
 509 0028 696E7400 		.ascii	"int\000"
 510 002c 03       		.uleb128 0x3
 511 002d 04       		.byte	0x4
 512 002e 07       		.byte	0x7
 513 002f 23020000 		.4byte	.LASF0
 514 0033 03       		.uleb128 0x3
 515 0034 08       		.byte	0x8
 516 0035 05       		.byte	0x5
 517 0036 8D020000 		.4byte	.LASF1
 518 003a 03       		.uleb128 0x3
 519 003b 08       		.byte	0x8
 520 003c 04       		.byte	0x4
 521 003d 0A030000 		.4byte	.LASF2
 522 0041 03       		.uleb128 0x3
 523 0042 01       		.byte	0x1
 524 0043 06       		.byte	0x6
 525 0044 16030000 		.4byte	.LASF3
 526 0048 03       		.uleb128 0x3
 527 0049 01       		.byte	0x1
 528 004a 08       		.byte	0x8
 529 004b FD000000 		.4byte	.LASF4
 530 004f 03       		.uleb128 0x3
 531 0050 02       		.byte	0x2
 532 0051 05       		.byte	0x5
 533 0052 B8000000 		.4byte	.LASF5
 534 0056 03       		.uleb128 0x3
 535 0057 02       		.byte	0x2
 536 0058 07       		.byte	0x7
 537 0059 AB010000 		.4byte	.LASF6
 538 005d 03       		.uleb128 0x3
 539 005e 04       		.byte	0x4
 540 005f 05       		.byte	0x5
 541 0060 A3000000 		.4byte	.LASF7
 542 0064 04       		.uleb128 0x4
 543 0065 BE010000 		.4byte	.LASF10
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 26


 544 0069 03       		.byte	0x3
 545 006a 41       		.byte	0x41
 546 006b 6F000000 		.4byte	0x6f
 547 006f 03       		.uleb128 0x3
 548 0070 04       		.byte	0x4
 549 0071 07       		.byte	0x7
 550 0072 99010000 		.4byte	.LASF8
 551 0076 03       		.uleb128 0x3
 552 0077 08       		.byte	0x8
 553 0078 07       		.byte	0x7
 554 0079 30020000 		.4byte	.LASF9
 555 007d 04       		.uleb128 0x4
 556 007e DC020000 		.4byte	.LASF11
 557 0082 04       		.byte	0x4
 558 0083 30       		.byte	0x30
 559 0084 64000000 		.4byte	0x64
 560 0088 04       		.uleb128 0x4
 561 0089 E6000000 		.4byte	.LASF12
 562 008d 05       		.byte	0x5
 563 008e 23       		.byte	0x23
 564 008f 93000000 		.4byte	0x93
 565 0093 05       		.uleb128 0x5
 566 0094 04       		.byte	0x4
 567 0095 99000000 		.4byte	0x99
 568 0099 06       		.uleb128 0x6
 569 009a A4000000 		.4byte	0xa4
 570 009e 07       		.uleb128 0x7
 571 009f A4000000 		.4byte	0xa4
 572 00a3 00       		.byte	0
 573 00a4 08       		.uleb128 0x8
 574 00a5 04       		.byte	0x4
 575 00a6 04       		.uleb128 0x4
 576 00a7 AC000000 		.4byte	.LASF13
 577 00ab 02       		.byte	0x2
 578 00ac 37       		.byte	0x37
 579 00ad 7D000000 		.4byte	0x7d
 580 00b1 04       		.uleb128 0x4
 581 00b2 42030000 		.4byte	.LASF14
 582 00b6 02       		.byte	0x2
 583 00b7 38       		.byte	0x38
 584 00b8 5D000000 		.4byte	0x5d
 585 00bc 04       		.uleb128 0x4
 586 00bd 36030000 		.4byte	.LASF15
 587 00c1 02       		.byte	0x2
 588 00c2 39       		.byte	0x39
 589 00c3 6F000000 		.4byte	0x6f
 590 00c7 04       		.uleb128 0x4
 591 00c8 00000000 		.4byte	.LASF16
 592 00cc 02       		.byte	0x2
 593 00cd 3F       		.byte	0x3f
 594 00ce 7D000000 		.4byte	0x7d
 595 00d2 03       		.uleb128 0x3
 596 00d3 04       		.byte	0x4
 597 00d4 07       		.byte	0x7
 598 00d5 84020000 		.4byte	.LASF17
 599 00d9 03       		.uleb128 0x3
 600 00da 01       		.byte	0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 27


 601 00db 08       		.byte	0x8
 602 00dc 9B020000 		.4byte	.LASF18
 603 00e0 05       		.uleb128 0x5
 604 00e1 04       		.byte	0x4
 605 00e2 A6000000 		.4byte	0xa6
 606 00e6 09       		.uleb128 0x9
 607 00e7 47020000 		.4byte	.LASF19
 608 00eb 02       		.byte	0x2
 609 00ec BF       		.byte	0xbf
 610 00ed 03       		.byte	0x3
 611 00ee FE000000 		.4byte	0xfe
 612 00f2 0A       		.uleb128 0xa
 613 00f3 C9010000 		.4byte	.LASF40
 614 00f7 02       		.byte	0x2
 615 00f8 C1       		.byte	0xc1
 616 00f9 7D000000 		.4byte	0x7d
 617 00fd 00       		.byte	0
 618 00fe 09       		.uleb128 0x9
 619 00ff FF010000 		.4byte	.LASF20
 620 0103 02       		.byte	0x2
 621 0104 E3       		.byte	0xe3
 622 0105 03       		.byte	0x3
 623 0106 16010000 		.4byte	0x116
 624 010a 0B       		.uleb128 0xb
 625 010b E5020000 		.4byte	.LASF41
 626 010f 02       		.byte	0x2
 627 0110 E3       		.byte	0xe3
 628 0111 7D000000 		.4byte	0x7d
 629 0115 00       		.byte	0
 630 0116 0C       		.uleb128 0xc
 631 0117 D5000000 		.4byte	.LASF42
 632 011b 01       		.byte	0x1
 633 011c C0       		.byte	0xc0
 634 011d 00000000 		.4byte	.LFB6
 635 0121 20000000 		.4byte	.LFE6-.LFB6
 636 0125 01       		.uleb128 0x1
 637 0126 9C       		.byte	0x9c
 638 0127 59010000 		.4byte	0x159
 639 012b 0D       		.uleb128 0xd
 640 012c F5000000 		.4byte	.LASF33
 641 0130 01       		.byte	0x1
 642 0131 C2       		.byte	0xc2
 643 0132 59010000 		.4byte	0x159
 644 0136 02       		.uleb128 0x2
 645 0137 91       		.byte	0x91
 646 0138 7C       		.sleb128 -4
 647 0139 0E       		.uleb128 0xe
 648 013a E6000000 		.4byte	0xe6
 649 013e 06000000 		.4byte	.LBB12
 650 0142 10000000 		.4byte	.LBE12-.LBB12
 651 0146 01       		.byte	0x1
 652 0147 CB       		.byte	0xcb
 653 0148 0F       		.uleb128 0xf
 654 0149 06000000 		.4byte	.LBB13
 655 014d 10000000 		.4byte	.LBE13-.LBB13
 656 0151 10       		.uleb128 0x10
 657 0152 F2000000 		.4byte	0xf2
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 28


 658 0156 00       		.byte	0
 659 0157 00       		.byte	0
 660 0158 00       		.byte	0
 661 0159 11       		.uleb128 0x11
 662 015a 7D000000 		.4byte	0x7d
 663 015e 12       		.uleb128 0x12
 664 015f F4020000 		.4byte	.LASF43
 665 0163 01       		.byte	0x1
 666 0164 ED       		.byte	0xed
 667 0165 00000000 		.4byte	.LFB8
 668 0169 1A000000 		.4byte	.LFE8-.LFB8
 669 016d 01       		.uleb128 0x1
 670 016e 9C       		.byte	0x9c
 671 016f 13       		.uleb128 0x13
 672 0170 D6010000 		.4byte	.LASF31
 673 0174 01       		.byte	0x1
 674 0175 AE       		.byte	0xae
 675 0176 E0000000 		.4byte	0xe0
 676 017a 00000000 		.4byte	.LFB5
 677 017e 24000000 		.4byte	.LFE5-.LFB5
 678 0182 01       		.uleb128 0x1
 679 0183 9C       		.byte	0x9c
 680 0184 B4010000 		.4byte	0x1b4
 681 0188 14       		.uleb128 0x14
 682 0189 BD020000 		.4byte	.LASF21
 683 018d 01       		.byte	0x1
 684 018e AE       		.byte	0xae
 685 018f E0000000 		.4byte	0xe0
 686 0193 00000000 		.4byte	.LLST0
 687 0197 14       		.uleb128 0x14
 688 0198 1E000000 		.4byte	.LASF22
 689 019c 01       		.byte	0x1
 690 019d AE       		.byte	0xae
 691 019e 88000000 		.4byte	0x88
 692 01a2 5F000000 		.4byte	.LLST1
 693 01a6 15       		.uleb128 0x15
 694 01a7 A0020000 		.4byte	.LASF23
 695 01ab 01       		.byte	0x1
 696 01ac AE       		.byte	0xae
 697 01ad A4000000 		.4byte	0xa4
 698 01b1 01       		.uleb128 0x1
 699 01b2 52       		.byte	0x52
 700 01b3 00       		.byte	0
 701 01b4 16       		.uleb128 0x16
 702 01b5 AD020000 		.4byte	.LASF24
 703 01b9 01       		.byte	0x1
 704 01ba D9       		.byte	0xd9
 705 01bb 00000000 		.4byte	.LFB7
 706 01bf 24000000 		.4byte	.LFE7-.LFB7
 707 01c3 01       		.uleb128 0x1
 708 01c4 9C       		.byte	0x9c
 709 01c5 17       		.uleb128 0x17
 710 01c6 25000000 		.4byte	.LASF25
 711 01ca 01       		.byte	0x1
 712 01cb 6101     		.2byte	0x161
 713 01cd 00000000 		.4byte	.LFB10
 714 01d1 02000000 		.4byte	.LFE10-.LFB10
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 29


 715 01d5 01       		.uleb128 0x1
 716 01d6 9C       		.byte	0x9c
 717 01d7 18       		.uleb128 0x18
 718 01d8 0B000000 		.4byte	.LASF26
 719 01dc 01       		.byte	0x1
 720 01dd 6901     		.2byte	0x169
 721 01df 00000000 		.4byte	.LFB11
 722 01e3 20000000 		.4byte	.LFE11-.LFB11
 723 01e7 01       		.uleb128 0x1
 724 01e8 9C       		.byte	0x9c
 725 01e9 0E020000 		.4byte	0x20e
 726 01ed 19       		.uleb128 0x19
 727 01ee E6000000 		.4byte	0xe6
 728 01f2 00000000 		.4byte	.LBB14
 729 01f6 10000000 		.4byte	.LBE14-.LBB14
 730 01fa 01       		.byte	0x1
 731 01fb 6B01     		.2byte	0x16b
 732 01fd 0F       		.uleb128 0xf
 733 01fe 00000000 		.4byte	.LBB15
 734 0202 10000000 		.4byte	.LBE15-.LBB15
 735 0206 10       		.uleb128 0x10
 736 0207 F2000000 		.4byte	0xf2
 737 020b 00       		.byte	0
 738 020c 00       		.byte	0
 739 020d 00       		.byte	0
 740 020e 18       		.uleb128 0x18
 741 020f CA020000 		.4byte	.LASF27
 742 0213 01       		.byte	0x1
 743 0214 7A01     		.2byte	0x17a
 744 0216 00000000 		.4byte	.LFB12
 745 021a 14000000 		.4byte	.LFE12-.LFB12
 746 021e 01       		.uleb128 0x1
 747 021f 9C       		.byte	0x9c
 748 0220 3F020000 		.4byte	0x23f
 749 0224 19       		.uleb128 0x19
 750 0225 FE000000 		.4byte	0xfe
 751 0229 0A000000 		.4byte	.LBB16
 752 022d 0A000000 		.4byte	.LBE16-.LBB16
 753 0231 01       		.byte	0x1
 754 0232 8001     		.2byte	0x180
 755 0234 1A       		.uleb128 0x1a
 756 0235 0A010000 		.4byte	0x10a
 757 0239 80000000 		.4byte	.LLST2
 758 023d 00       		.byte	0
 759 023e 00       		.byte	0
 760 023f 17       		.uleb128 0x17
 761 0240 C2000000 		.4byte	.LASF28
 762 0244 01       		.byte	0x1
 763 0245 8501     		.2byte	0x185
 764 0247 00000000 		.4byte	.LFB13
 765 024b 44000000 		.4byte	.LFE13-.LFB13
 766 024f 01       		.uleb128 0x1
 767 0250 9C       		.byte	0x9c
 768 0251 18       		.uleb128 0x18
 769 0252 0F020000 		.4byte	.LASF29
 770 0256 01       		.byte	0x1
 771 0257 AA01     		.2byte	0x1aa
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 30


 772 0259 00000000 		.4byte	.LFB14
 773 025d 2C000000 		.4byte	.LFE14-.LFB14
 774 0261 01       		.uleb128 0x1
 775 0262 9C       		.byte	0x9c
 776 0263 B3020000 		.4byte	0x2b3
 777 0267 1B       		.uleb128 0x1b
 778 0268 E6000000 		.4byte	0xe6
 779 026c 02000000 		.4byte	.LBB18
 780 0270 10000000 		.4byte	.LBE18-.LBB18
 781 0274 01       		.byte	0x1
 782 0275 B001     		.2byte	0x1b0
 783 0277 8B020000 		.4byte	0x28b
 784 027b 0F       		.uleb128 0xf
 785 027c 02000000 		.4byte	.LBB19
 786 0280 10000000 		.4byte	.LBE19-.LBB19
 787 0284 10       		.uleb128 0x10
 788 0285 F2000000 		.4byte	0xf2
 789 0289 00       		.byte	0
 790 028a 00       		.byte	0
 791 028b 1B       		.uleb128 0x1b
 792 028c FE000000 		.4byte	0xfe
 793 0290 20000000 		.4byte	.LBB20
 794 0294 0C000000 		.4byte	.LBE20-.LBB20
 795 0298 01       		.byte	0x1
 796 0299 BA01     		.2byte	0x1ba
 797 029b A9020000 		.4byte	0x2a9
 798 029f 1A       		.uleb128 0x1a
 799 02a0 0A010000 		.4byte	0x10a
 800 02a4 94000000 		.4byte	.LLST3
 801 02a8 00       		.byte	0
 802 02a9 1C       		.uleb128 0x1c
 803 02aa 16000000 		.4byte	.LVL10
 804 02ae 15030000 		.4byte	0x315
 805 02b2 00       		.byte	0
 806 02b3 17       		.uleb128 0x17
 807 02b4 6B020000 		.4byte	.LASF30
 808 02b8 01       		.byte	0x1
 809 02b9 6902     		.2byte	0x269
 810 02bb 00000000 		.4byte	.LFB15
 811 02bf 24000000 		.4byte	.LFE15-.LFB15
 812 02c3 01       		.uleb128 0x1
 813 02c4 9C       		.byte	0x9c
 814 02c5 1D       		.uleb128 0x1d
 815 02c6 22030000 		.4byte	.LASF32
 816 02ca 01       		.byte	0x1
 817 02cb 0101     		.2byte	0x101
 818 02cd B1000000 		.4byte	0xb1
 819 02d1 00000000 		.4byte	.LFB9
 820 02d5 38000000 		.4byte	.LFE9-.LFB9
 821 02d9 01       		.uleb128 0x1
 822 02da 9C       		.byte	0x9c
 823 02db 04030000 		.4byte	0x304
 824 02df 1C       		.uleb128 0x1c
 825 02e0 18000000 		.4byte	.LVL13
 826 02e4 B3020000 		.4byte	0x2b3
 827 02e8 1C       		.uleb128 0x1c
 828 02e9 22000000 		.4byte	.LVL14
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 31


 829 02ed 5E010000 		.4byte	0x15e
 830 02f1 1C       		.uleb128 0x1c
 831 02f2 26000000 		.4byte	.LVL15
 832 02f6 21030000 		.4byte	0x321
 833 02fa 1C       		.uleb128 0x1c
 834 02fb 2A000000 		.4byte	.LVL16
 835 02ff 16010000 		.4byte	0x116
 836 0303 00       		.byte	0
 837 0304 0D       		.uleb128 0xd
 838 0305 59020000 		.4byte	.LASF34
 839 0309 01       		.byte	0x1
 840 030a 85       		.byte	0x85
 841 030b BC000000 		.4byte	0xbc
 842 030f 05       		.uleb128 0x5
 843 0310 03       		.byte	0x3
 844 0311 00000000 		.4byte	uxCriticalNesting
 845 0315 1E       		.uleb128 0x1e
 846 0316 EC010000 		.4byte	.LASF35
 847 031a EC010000 		.4byte	.LASF35
 848 031e 06       		.byte	0x6
 849 031f 5D08     		.2byte	0x85d
 850 0321 1E       		.uleb128 0x1e
 851 0322 90000000 		.4byte	.LASF36
 852 0326 90000000 		.4byte	.LASF36
 853 032a 06       		.byte	0x6
 854 032b B108     		.2byte	0x8b1
 855 032d 00       		.byte	0
 856              		.section	.debug_abbrev,"",%progbits
 857              	.Ldebug_abbrev0:
 858 0000 01       		.uleb128 0x1
 859 0001 11       		.uleb128 0x11
 860 0002 01       		.byte	0x1
 861 0003 25       		.uleb128 0x25
 862 0004 0E       		.uleb128 0xe
 863 0005 13       		.uleb128 0x13
 864 0006 0B       		.uleb128 0xb
 865 0007 03       		.uleb128 0x3
 866 0008 0E       		.uleb128 0xe
 867 0009 1B       		.uleb128 0x1b
 868 000a 0E       		.uleb128 0xe
 869 000b 55       		.uleb128 0x55
 870 000c 17       		.uleb128 0x17
 871 000d 11       		.uleb128 0x11
 872 000e 01       		.uleb128 0x1
 873 000f 10       		.uleb128 0x10
 874 0010 17       		.uleb128 0x17
 875 0011 00       		.byte	0
 876 0012 00       		.byte	0
 877 0013 02       		.uleb128 0x2
 878 0014 24       		.uleb128 0x24
 879 0015 00       		.byte	0
 880 0016 0B       		.uleb128 0xb
 881 0017 0B       		.uleb128 0xb
 882 0018 3E       		.uleb128 0x3e
 883 0019 0B       		.uleb128 0xb
 884 001a 03       		.uleb128 0x3
 885 001b 08       		.uleb128 0x8
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 32


 886 001c 00       		.byte	0
 887 001d 00       		.byte	0
 888 001e 03       		.uleb128 0x3
 889 001f 24       		.uleb128 0x24
 890 0020 00       		.byte	0
 891 0021 0B       		.uleb128 0xb
 892 0022 0B       		.uleb128 0xb
 893 0023 3E       		.uleb128 0x3e
 894 0024 0B       		.uleb128 0xb
 895 0025 03       		.uleb128 0x3
 896 0026 0E       		.uleb128 0xe
 897 0027 00       		.byte	0
 898 0028 00       		.byte	0
 899 0029 04       		.uleb128 0x4
 900 002a 16       		.uleb128 0x16
 901 002b 00       		.byte	0
 902 002c 03       		.uleb128 0x3
 903 002d 0E       		.uleb128 0xe
 904 002e 3A       		.uleb128 0x3a
 905 002f 0B       		.uleb128 0xb
 906 0030 3B       		.uleb128 0x3b
 907 0031 0B       		.uleb128 0xb
 908 0032 49       		.uleb128 0x49
 909 0033 13       		.uleb128 0x13
 910 0034 00       		.byte	0
 911 0035 00       		.byte	0
 912 0036 05       		.uleb128 0x5
 913 0037 0F       		.uleb128 0xf
 914 0038 00       		.byte	0
 915 0039 0B       		.uleb128 0xb
 916 003a 0B       		.uleb128 0xb
 917 003b 49       		.uleb128 0x49
 918 003c 13       		.uleb128 0x13
 919 003d 00       		.byte	0
 920 003e 00       		.byte	0
 921 003f 06       		.uleb128 0x6
 922 0040 15       		.uleb128 0x15
 923 0041 01       		.byte	0x1
 924 0042 27       		.uleb128 0x27
 925 0043 19       		.uleb128 0x19
 926 0044 01       		.uleb128 0x1
 927 0045 13       		.uleb128 0x13
 928 0046 00       		.byte	0
 929 0047 00       		.byte	0
 930 0048 07       		.uleb128 0x7
 931 0049 05       		.uleb128 0x5
 932 004a 00       		.byte	0
 933 004b 49       		.uleb128 0x49
 934 004c 13       		.uleb128 0x13
 935 004d 00       		.byte	0
 936 004e 00       		.byte	0
 937 004f 08       		.uleb128 0x8
 938 0050 0F       		.uleb128 0xf
 939 0051 00       		.byte	0
 940 0052 0B       		.uleb128 0xb
 941 0053 0B       		.uleb128 0xb
 942 0054 00       		.byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 33


 943 0055 00       		.byte	0
 944 0056 09       		.uleb128 0x9
 945 0057 2E       		.uleb128 0x2e
 946 0058 01       		.byte	0x1
 947 0059 03       		.uleb128 0x3
 948 005a 0E       		.uleb128 0xe
 949 005b 3A       		.uleb128 0x3a
 950 005c 0B       		.uleb128 0xb
 951 005d 3B       		.uleb128 0x3b
 952 005e 0B       		.uleb128 0xb
 953 005f 27       		.uleb128 0x27
 954 0060 19       		.uleb128 0x19
 955 0061 20       		.uleb128 0x20
 956 0062 0B       		.uleb128 0xb
 957 0063 01       		.uleb128 0x1
 958 0064 13       		.uleb128 0x13
 959 0065 00       		.byte	0
 960 0066 00       		.byte	0
 961 0067 0A       		.uleb128 0xa
 962 0068 34       		.uleb128 0x34
 963 0069 00       		.byte	0
 964 006a 03       		.uleb128 0x3
 965 006b 0E       		.uleb128 0xe
 966 006c 3A       		.uleb128 0x3a
 967 006d 0B       		.uleb128 0xb
 968 006e 3B       		.uleb128 0x3b
 969 006f 0B       		.uleb128 0xb
 970 0070 49       		.uleb128 0x49
 971 0071 13       		.uleb128 0x13
 972 0072 00       		.byte	0
 973 0073 00       		.byte	0
 974 0074 0B       		.uleb128 0xb
 975 0075 05       		.uleb128 0x5
 976 0076 00       		.byte	0
 977 0077 03       		.uleb128 0x3
 978 0078 0E       		.uleb128 0xe
 979 0079 3A       		.uleb128 0x3a
 980 007a 0B       		.uleb128 0xb
 981 007b 3B       		.uleb128 0x3b
 982 007c 0B       		.uleb128 0xb
 983 007d 49       		.uleb128 0x49
 984 007e 13       		.uleb128 0x13
 985 007f 00       		.byte	0
 986 0080 00       		.byte	0
 987 0081 0C       		.uleb128 0xc
 988 0082 2E       		.uleb128 0x2e
 989 0083 01       		.byte	0x1
 990 0084 03       		.uleb128 0x3
 991 0085 0E       		.uleb128 0xe
 992 0086 3A       		.uleb128 0x3a
 993 0087 0B       		.uleb128 0xb
 994 0088 3B       		.uleb128 0x3b
 995 0089 0B       		.uleb128 0xb
 996 008a 27       		.uleb128 0x27
 997 008b 19       		.uleb128 0x19
 998 008c 11       		.uleb128 0x11
 999 008d 01       		.uleb128 0x1
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 34


 1000 008e 12       		.uleb128 0x12
 1001 008f 06       		.uleb128 0x6
 1002 0090 40       		.uleb128 0x40
 1003 0091 18       		.uleb128 0x18
 1004 0092 9742     		.uleb128 0x2117
 1005 0094 19       		.uleb128 0x19
 1006 0095 01       		.uleb128 0x1
 1007 0096 13       		.uleb128 0x13
 1008 0097 00       		.byte	0
 1009 0098 00       		.byte	0
 1010 0099 0D       		.uleb128 0xd
 1011 009a 34       		.uleb128 0x34
 1012 009b 00       		.byte	0
 1013 009c 03       		.uleb128 0x3
 1014 009d 0E       		.uleb128 0xe
 1015 009e 3A       		.uleb128 0x3a
 1016 009f 0B       		.uleb128 0xb
 1017 00a0 3B       		.uleb128 0x3b
 1018 00a1 0B       		.uleb128 0xb
 1019 00a2 49       		.uleb128 0x49
 1020 00a3 13       		.uleb128 0x13
 1021 00a4 02       		.uleb128 0x2
 1022 00a5 18       		.uleb128 0x18
 1023 00a6 00       		.byte	0
 1024 00a7 00       		.byte	0
 1025 00a8 0E       		.uleb128 0xe
 1026 00a9 1D       		.uleb128 0x1d
 1027 00aa 01       		.byte	0x1
 1028 00ab 31       		.uleb128 0x31
 1029 00ac 13       		.uleb128 0x13
 1030 00ad 11       		.uleb128 0x11
 1031 00ae 01       		.uleb128 0x1
 1032 00af 12       		.uleb128 0x12
 1033 00b0 06       		.uleb128 0x6
 1034 00b1 58       		.uleb128 0x58
 1035 00b2 0B       		.uleb128 0xb
 1036 00b3 59       		.uleb128 0x59
 1037 00b4 0B       		.uleb128 0xb
 1038 00b5 00       		.byte	0
 1039 00b6 00       		.byte	0
 1040 00b7 0F       		.uleb128 0xf
 1041 00b8 0B       		.uleb128 0xb
 1042 00b9 01       		.byte	0x1
 1043 00ba 11       		.uleb128 0x11
 1044 00bb 01       		.uleb128 0x1
 1045 00bc 12       		.uleb128 0x12
 1046 00bd 06       		.uleb128 0x6
 1047 00be 00       		.byte	0
 1048 00bf 00       		.byte	0
 1049 00c0 10       		.uleb128 0x10
 1050 00c1 34       		.uleb128 0x34
 1051 00c2 00       		.byte	0
 1052 00c3 31       		.uleb128 0x31
 1053 00c4 13       		.uleb128 0x13
 1054 00c5 00       		.byte	0
 1055 00c6 00       		.byte	0
 1056 00c7 11       		.uleb128 0x11
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 35


 1057 00c8 35       		.uleb128 0x35
 1058 00c9 00       		.byte	0
 1059 00ca 49       		.uleb128 0x49
 1060 00cb 13       		.uleb128 0x13
 1061 00cc 00       		.byte	0
 1062 00cd 00       		.byte	0
 1063 00ce 12       		.uleb128 0x12
 1064 00cf 2E       		.uleb128 0x2e
 1065 00d0 00       		.byte	0
 1066 00d1 03       		.uleb128 0x3
 1067 00d2 0E       		.uleb128 0xe
 1068 00d3 3A       		.uleb128 0x3a
 1069 00d4 0B       		.uleb128 0xb
 1070 00d5 3B       		.uleb128 0x3b
 1071 00d6 0B       		.uleb128 0xb
 1072 00d7 27       		.uleb128 0x27
 1073 00d8 19       		.uleb128 0x19
 1074 00d9 11       		.uleb128 0x11
 1075 00da 01       		.uleb128 0x1
 1076 00db 12       		.uleb128 0x12
 1077 00dc 06       		.uleb128 0x6
 1078 00dd 40       		.uleb128 0x40
 1079 00de 18       		.uleb128 0x18
 1080 00df 9742     		.uleb128 0x2117
 1081 00e1 19       		.uleb128 0x19
 1082 00e2 00       		.byte	0
 1083 00e3 00       		.byte	0
 1084 00e4 13       		.uleb128 0x13
 1085 00e5 2E       		.uleb128 0x2e
 1086 00e6 01       		.byte	0x1
 1087 00e7 3F       		.uleb128 0x3f
 1088 00e8 19       		.uleb128 0x19
 1089 00e9 03       		.uleb128 0x3
 1090 00ea 0E       		.uleb128 0xe
 1091 00eb 3A       		.uleb128 0x3a
 1092 00ec 0B       		.uleb128 0xb
 1093 00ed 3B       		.uleb128 0x3b
 1094 00ee 0B       		.uleb128 0xb
 1095 00ef 27       		.uleb128 0x27
 1096 00f0 19       		.uleb128 0x19
 1097 00f1 49       		.uleb128 0x49
 1098 00f2 13       		.uleb128 0x13
 1099 00f3 11       		.uleb128 0x11
 1100 00f4 01       		.uleb128 0x1
 1101 00f5 12       		.uleb128 0x12
 1102 00f6 06       		.uleb128 0x6
 1103 00f7 40       		.uleb128 0x40
 1104 00f8 18       		.uleb128 0x18
 1105 00f9 9742     		.uleb128 0x2117
 1106 00fb 19       		.uleb128 0x19
 1107 00fc 01       		.uleb128 0x1
 1108 00fd 13       		.uleb128 0x13
 1109 00fe 00       		.byte	0
 1110 00ff 00       		.byte	0
 1111 0100 14       		.uleb128 0x14
 1112 0101 05       		.uleb128 0x5
 1113 0102 00       		.byte	0
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 36


 1114 0103 03       		.uleb128 0x3
 1115 0104 0E       		.uleb128 0xe
 1116 0105 3A       		.uleb128 0x3a
 1117 0106 0B       		.uleb128 0xb
 1118 0107 3B       		.uleb128 0x3b
 1119 0108 0B       		.uleb128 0xb
 1120 0109 49       		.uleb128 0x49
 1121 010a 13       		.uleb128 0x13
 1122 010b 02       		.uleb128 0x2
 1123 010c 17       		.uleb128 0x17
 1124 010d 00       		.byte	0
 1125 010e 00       		.byte	0
 1126 010f 15       		.uleb128 0x15
 1127 0110 05       		.uleb128 0x5
 1128 0111 00       		.byte	0
 1129 0112 03       		.uleb128 0x3
 1130 0113 0E       		.uleb128 0xe
 1131 0114 3A       		.uleb128 0x3a
 1132 0115 0B       		.uleb128 0xb
 1133 0116 3B       		.uleb128 0x3b
 1134 0117 0B       		.uleb128 0xb
 1135 0118 49       		.uleb128 0x49
 1136 0119 13       		.uleb128 0x13
 1137 011a 02       		.uleb128 0x2
 1138 011b 18       		.uleb128 0x18
 1139 011c 00       		.byte	0
 1140 011d 00       		.byte	0
 1141 011e 16       		.uleb128 0x16
 1142 011f 2E       		.uleb128 0x2e
 1143 0120 00       		.byte	0
 1144 0121 3F       		.uleb128 0x3f
 1145 0122 19       		.uleb128 0x19
 1146 0123 03       		.uleb128 0x3
 1147 0124 0E       		.uleb128 0xe
 1148 0125 3A       		.uleb128 0x3a
 1149 0126 0B       		.uleb128 0xb
 1150 0127 3B       		.uleb128 0x3b
 1151 0128 0B       		.uleb128 0xb
 1152 0129 27       		.uleb128 0x27
 1153 012a 19       		.uleb128 0x19
 1154 012b 11       		.uleb128 0x11
 1155 012c 01       		.uleb128 0x1
 1156 012d 12       		.uleb128 0x12
 1157 012e 06       		.uleb128 0x6
 1158 012f 40       		.uleb128 0x40
 1159 0130 18       		.uleb128 0x18
 1160 0131 9742     		.uleb128 0x2117
 1161 0133 19       		.uleb128 0x19
 1162 0134 00       		.byte	0
 1163 0135 00       		.byte	0
 1164 0136 17       		.uleb128 0x17
 1165 0137 2E       		.uleb128 0x2e
 1166 0138 00       		.byte	0
 1167 0139 3F       		.uleb128 0x3f
 1168 013a 19       		.uleb128 0x19
 1169 013b 03       		.uleb128 0x3
 1170 013c 0E       		.uleb128 0xe
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 37


 1171 013d 3A       		.uleb128 0x3a
 1172 013e 0B       		.uleb128 0xb
 1173 013f 3B       		.uleb128 0x3b
 1174 0140 05       		.uleb128 0x5
 1175 0141 27       		.uleb128 0x27
 1176 0142 19       		.uleb128 0x19
 1177 0143 11       		.uleb128 0x11
 1178 0144 01       		.uleb128 0x1
 1179 0145 12       		.uleb128 0x12
 1180 0146 06       		.uleb128 0x6
 1181 0147 40       		.uleb128 0x40
 1182 0148 18       		.uleb128 0x18
 1183 0149 9742     		.uleb128 0x2117
 1184 014b 19       		.uleb128 0x19
 1185 014c 00       		.byte	0
 1186 014d 00       		.byte	0
 1187 014e 18       		.uleb128 0x18
 1188 014f 2E       		.uleb128 0x2e
 1189 0150 01       		.byte	0x1
 1190 0151 3F       		.uleb128 0x3f
 1191 0152 19       		.uleb128 0x19
 1192 0153 03       		.uleb128 0x3
 1193 0154 0E       		.uleb128 0xe
 1194 0155 3A       		.uleb128 0x3a
 1195 0156 0B       		.uleb128 0xb
 1196 0157 3B       		.uleb128 0x3b
 1197 0158 05       		.uleb128 0x5
 1198 0159 27       		.uleb128 0x27
 1199 015a 19       		.uleb128 0x19
 1200 015b 11       		.uleb128 0x11
 1201 015c 01       		.uleb128 0x1
 1202 015d 12       		.uleb128 0x12
 1203 015e 06       		.uleb128 0x6
 1204 015f 40       		.uleb128 0x40
 1205 0160 18       		.uleb128 0x18
 1206 0161 9742     		.uleb128 0x2117
 1207 0163 19       		.uleb128 0x19
 1208 0164 01       		.uleb128 0x1
 1209 0165 13       		.uleb128 0x13
 1210 0166 00       		.byte	0
 1211 0167 00       		.byte	0
 1212 0168 19       		.uleb128 0x19
 1213 0169 1D       		.uleb128 0x1d
 1214 016a 01       		.byte	0x1
 1215 016b 31       		.uleb128 0x31
 1216 016c 13       		.uleb128 0x13
 1217 016d 11       		.uleb128 0x11
 1218 016e 01       		.uleb128 0x1
 1219 016f 12       		.uleb128 0x12
 1220 0170 06       		.uleb128 0x6
 1221 0171 58       		.uleb128 0x58
 1222 0172 0B       		.uleb128 0xb
 1223 0173 59       		.uleb128 0x59
 1224 0174 05       		.uleb128 0x5
 1225 0175 00       		.byte	0
 1226 0176 00       		.byte	0
 1227 0177 1A       		.uleb128 0x1a
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 38


 1228 0178 05       		.uleb128 0x5
 1229 0179 00       		.byte	0
 1230 017a 31       		.uleb128 0x31
 1231 017b 13       		.uleb128 0x13
 1232 017c 02       		.uleb128 0x2
 1233 017d 17       		.uleb128 0x17
 1234 017e 00       		.byte	0
 1235 017f 00       		.byte	0
 1236 0180 1B       		.uleb128 0x1b
 1237 0181 1D       		.uleb128 0x1d
 1238 0182 01       		.byte	0x1
 1239 0183 31       		.uleb128 0x31
 1240 0184 13       		.uleb128 0x13
 1241 0185 11       		.uleb128 0x11
 1242 0186 01       		.uleb128 0x1
 1243 0187 12       		.uleb128 0x12
 1244 0188 06       		.uleb128 0x6
 1245 0189 58       		.uleb128 0x58
 1246 018a 0B       		.uleb128 0xb
 1247 018b 59       		.uleb128 0x59
 1248 018c 05       		.uleb128 0x5
 1249 018d 01       		.uleb128 0x1
 1250 018e 13       		.uleb128 0x13
 1251 018f 00       		.byte	0
 1252 0190 00       		.byte	0
 1253 0191 1C       		.uleb128 0x1c
 1254 0192 898201   		.uleb128 0x4109
 1255 0195 00       		.byte	0
 1256 0196 11       		.uleb128 0x11
 1257 0197 01       		.uleb128 0x1
 1258 0198 31       		.uleb128 0x31
 1259 0199 13       		.uleb128 0x13
 1260 019a 00       		.byte	0
 1261 019b 00       		.byte	0
 1262 019c 1D       		.uleb128 0x1d
 1263 019d 2E       		.uleb128 0x2e
 1264 019e 01       		.byte	0x1
 1265 019f 3F       		.uleb128 0x3f
 1266 01a0 19       		.uleb128 0x19
 1267 01a1 03       		.uleb128 0x3
 1268 01a2 0E       		.uleb128 0xe
 1269 01a3 3A       		.uleb128 0x3a
 1270 01a4 0B       		.uleb128 0xb
 1271 01a5 3B       		.uleb128 0x3b
 1272 01a6 05       		.uleb128 0x5
 1273 01a7 27       		.uleb128 0x27
 1274 01a8 19       		.uleb128 0x19
 1275 01a9 49       		.uleb128 0x49
 1276 01aa 13       		.uleb128 0x13
 1277 01ab 11       		.uleb128 0x11
 1278 01ac 01       		.uleb128 0x1
 1279 01ad 12       		.uleb128 0x12
 1280 01ae 06       		.uleb128 0x6
 1281 01af 40       		.uleb128 0x40
 1282 01b0 18       		.uleb128 0x18
 1283 01b1 9742     		.uleb128 0x2117
 1284 01b3 19       		.uleb128 0x19
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 39


 1285 01b4 01       		.uleb128 0x1
 1286 01b5 13       		.uleb128 0x13
 1287 01b6 00       		.byte	0
 1288 01b7 00       		.byte	0
 1289 01b8 1E       		.uleb128 0x1e
 1290 01b9 2E       		.uleb128 0x2e
 1291 01ba 00       		.byte	0
 1292 01bb 3F       		.uleb128 0x3f
 1293 01bc 19       		.uleb128 0x19
 1294 01bd 3C       		.uleb128 0x3c
 1295 01be 19       		.uleb128 0x19
 1296 01bf 6E       		.uleb128 0x6e
 1297 01c0 0E       		.uleb128 0xe
 1298 01c1 03       		.uleb128 0x3
 1299 01c2 0E       		.uleb128 0xe
 1300 01c3 3A       		.uleb128 0x3a
 1301 01c4 0B       		.uleb128 0xb
 1302 01c5 3B       		.uleb128 0x3b
 1303 01c6 05       		.uleb128 0x5
 1304 01c7 00       		.byte	0
 1305 01c8 00       		.byte	0
 1306 01c9 00       		.byte	0
 1307              		.section	.debug_loc,"",%progbits
 1308              	.Ldebug_loc0:
 1309              	.LLST0:
 1310 0000 00000000 		.4byte	.LVL1
 1311 0004 00000000 		.4byte	.LVL1
 1312 0008 0100     		.2byte	0x1
 1313 000a 50       		.byte	0x50
 1314 000b 00000000 		.4byte	.LVL1
 1315 000f 08000000 		.4byte	.LVL2
 1316 0013 0300     		.2byte	0x3
 1317 0015 70       		.byte	0x70
 1318 0016 7C       		.sleb128 -4
 1319 0017 9F       		.byte	0x9f
 1320 0018 08000000 		.4byte	.LVL2
 1321 001c 10000000 		.4byte	.LVL4
 1322 0020 0300     		.2byte	0x3
 1323 0022 70       		.byte	0x70
 1324 0023 78       		.sleb128 -8
 1325 0024 9F       		.byte	0x9f
 1326 0025 10000000 		.4byte	.LVL4
 1327 0029 16000000 		.4byte	.LVL5
 1328 002d 0300     		.2byte	0x3
 1329 002f 70       		.byte	0x70
 1330 0030 74       		.sleb128 -12
 1331 0031 9F       		.byte	0x9f
 1332 0032 16000000 		.4byte	.LVL5
 1333 0036 1A000000 		.4byte	.LVL6
 1334 003a 0300     		.2byte	0x3
 1335 003c 70       		.byte	0x70
 1336 003d 60       		.sleb128 -32
 1337 003e 9F       		.byte	0x9f
 1338 003f 1A000000 		.4byte	.LVL6
 1339 0043 1C000000 		.4byte	.LVL7
 1340 0047 0300     		.2byte	0x3
 1341 0049 70       		.byte	0x70
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 40


 1342 004a 40       		.sleb128 -64
 1343 004b 9F       		.byte	0x9f
 1344 004c 1C000000 		.4byte	.LVL7
 1345 0050 24000000 		.4byte	.LFE5
 1346 0054 0100     		.2byte	0x1
 1347 0056 50       		.byte	0x50
 1348 0057 00000000 		.4byte	0
 1349 005b 00000000 		.4byte	0
 1350              	.LLST1:
 1351 005f 00000000 		.4byte	.LVL1
 1352 0063 0C000000 		.4byte	.LVL3
 1353 0067 0100     		.2byte	0x1
 1354 0069 51       		.byte	0x51
 1355 006a 0C000000 		.4byte	.LVL3
 1356 006e 24000000 		.4byte	.LFE5
 1357 0072 0400     		.2byte	0x4
 1358 0074 F3       		.byte	0xf3
 1359 0075 01       		.uleb128 0x1
 1360 0076 51       		.byte	0x51
 1361 0077 9F       		.byte	0x9f
 1362 0078 00000000 		.4byte	0
 1363 007c 00000000 		.4byte	0
 1364              	.LLST2:
 1365 0080 0A000000 		.4byte	.LVL8
 1366 0084 0E000000 		.4byte	.LVL9
 1367 0088 0200     		.2byte	0x2
 1368 008a 30       		.byte	0x30
 1369 008b 9F       		.byte	0x9f
 1370 008c 00000000 		.4byte	0
 1371 0090 00000000 		.4byte	0
 1372              	.LLST3:
 1373 0094 20000000 		.4byte	.LVL11
 1374 0098 26000000 		.4byte	.LVL12
 1375 009c 0200     		.2byte	0x2
 1376 009e 30       		.byte	0x30
 1377 009f 9F       		.byte	0x9f
 1378 00a0 00000000 		.4byte	0
 1379 00a4 00000000 		.4byte	0
 1380              		.section	.debug_aranges,"",%progbits
 1381 0000 6C000000 		.4byte	0x6c
 1382 0004 0200     		.2byte	0x2
 1383 0006 00000000 		.4byte	.Ldebug_info0
 1384 000a 04       		.byte	0x4
 1385 000b 00       		.byte	0
 1386 000c 0000     		.2byte	0
 1387 000e 0000     		.2byte	0
 1388 0010 00000000 		.4byte	.LFB6
 1389 0014 20000000 		.4byte	.LFE6-.LFB6
 1390 0018 00000000 		.4byte	.LFB8
 1391 001c 1A000000 		.4byte	.LFE8-.LFB8
 1392 0020 00000000 		.4byte	.LFB5
 1393 0024 24000000 		.4byte	.LFE5-.LFB5
 1394 0028 00000000 		.4byte	.LFB7
 1395 002c 24000000 		.4byte	.LFE7-.LFB7
 1396 0030 00000000 		.4byte	.LFB10
 1397 0034 02000000 		.4byte	.LFE10-.LFB10
 1398 0038 00000000 		.4byte	.LFB11
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 41


 1399 003c 20000000 		.4byte	.LFE11-.LFB11
 1400 0040 00000000 		.4byte	.LFB12
 1401 0044 14000000 		.4byte	.LFE12-.LFB12
 1402 0048 00000000 		.4byte	.LFB13
 1403 004c 44000000 		.4byte	.LFE13-.LFB13
 1404 0050 00000000 		.4byte	.LFB14
 1405 0054 2C000000 		.4byte	.LFE14-.LFB14
 1406 0058 00000000 		.4byte	.LFB15
 1407 005c 24000000 		.4byte	.LFE15-.LFB15
 1408 0060 00000000 		.4byte	.LFB9
 1409 0064 38000000 		.4byte	.LFE9-.LFB9
 1410 0068 00000000 		.4byte	0
 1411 006c 00000000 		.4byte	0
 1412              		.section	.debug_ranges,"",%progbits
 1413              	.Ldebug_ranges0:
 1414 0000 00000000 		.4byte	.LFB6
 1415 0004 20000000 		.4byte	.LFE6
 1416 0008 00000000 		.4byte	.LFB8
 1417 000c 1A000000 		.4byte	.LFE8
 1418 0010 00000000 		.4byte	.LFB5
 1419 0014 24000000 		.4byte	.LFE5
 1420 0018 00000000 		.4byte	.LFB7
 1421 001c 24000000 		.4byte	.LFE7
 1422 0020 00000000 		.4byte	.LFB10
 1423 0024 02000000 		.4byte	.LFE10
 1424 0028 00000000 		.4byte	.LFB11
 1425 002c 20000000 		.4byte	.LFE11
 1426 0030 00000000 		.4byte	.LFB12
 1427 0034 14000000 		.4byte	.LFE12
 1428 0038 00000000 		.4byte	.LFB13
 1429 003c 44000000 		.4byte	.LFE13
 1430 0040 00000000 		.4byte	.LFB14
 1431 0044 2C000000 		.4byte	.LFE14
 1432 0048 00000000 		.4byte	.LFB15
 1433 004c 24000000 		.4byte	.LFE15
 1434 0050 00000000 		.4byte	.LFB9
 1435 0054 38000000 		.4byte	.LFE9
 1436 0058 00000000 		.4byte	0
 1437 005c 00000000 		.4byte	0
 1438              		.section	.debug_line,"",%progbits
 1439              	.Ldebug_line0:
 1440 0000 48020000 		.section	.debug_str,"MS",%progbits,1
 1440      02003901 
 1440      00000201 
 1440      FB0E0D00 
 1440      01010101 
 1441              	.LASF16:
 1442 0000 5469636B 		.ascii	"TickType_t\000"
 1442      54797065 
 1442      5F7400
 1443              	.LASF26:
 1444 000b 76506F72 		.ascii	"vPortEnterCritical\000"
 1444      74456E74 
 1444      65724372 
 1444      69746963 
 1444      616C00
 1445              	.LASF22:
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 42


 1446 001e 7078436F 		.ascii	"pxCode\000"
 1446      646500
 1447              	.LASF25:
 1448 0025 76506F72 		.ascii	"vPortEndScheduler\000"
 1448      74456E64 
 1448      53636865 
 1448      64756C65 
 1448      7200
 1449              	.LASF39:
 1450 0037 443A5C4E 		.ascii	"D:\\Notes 202324\\ELECH410\\Labs\\Lab3\\ex2_periodi"
 1450      6F746573 
 1450      20323032 
 1450      3332345C 
 1450      454C4543 
 1451 0065 63697479 		.ascii	"city\\periodicity.cydsn\000"
 1451      5C706572 
 1451      696F6469 
 1451      63697479 
 1451      2E637964 
 1452              	.LASF38:
 1453 007c 46726565 		.ascii	"FreeRTOS\\src\\port.c\000"
 1453      52544F53 
 1453      5C737263 
 1453      5C706F72 
 1453      742E6300 
 1454              	.LASF36:
 1455 0090 76546173 		.ascii	"vTaskSwitchContext\000"
 1455      6B537769 
 1455      74636843 
 1455      6F6E7465 
 1455      787400
 1456              	.LASF7:
 1457 00a3 6C6F6E67 		.ascii	"long int\000"
 1457      20696E74 
 1457      00
 1458              	.LASF13:
 1459 00ac 53746163 		.ascii	"StackType_t\000"
 1459      6B547970 
 1459      655F7400 
 1460              	.LASF5:
 1461 00b8 73686F72 		.ascii	"short int\000"
 1461      7420696E 
 1461      7400
 1462              	.LASF28:
 1463 00c2 78506F72 		.ascii	"xPortPendSVHandler\000"
 1463      7450656E 
 1463      64535648 
 1463      616E646C 
 1463      657200
 1464              	.LASF42:
 1465 00d5 70727654 		.ascii	"prvTaskExitError\000"
 1465      61736B45 
 1465      78697445 
 1465      72726F72 
 1465      00
 1466              	.LASF12:
 1467 00e6 5461736B 		.ascii	"TaskFunction_t\000"
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 43


 1467      46756E63 
 1467      74696F6E 
 1467      5F7400
 1468              	.LASF33:
 1469 00f5 756C4475 		.ascii	"ulDummy\000"
 1469      6D6D7900 
 1470              	.LASF4:
 1471 00fd 756E7369 		.ascii	"unsigned char\000"
 1471      676E6564 
 1471      20636861 
 1471      7200
 1472              	.LASF37:
 1473 010b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1473      43313120 
 1473      352E342E 
 1473      31203230 
 1473      31363036 
 1474 013e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1474      20726576 
 1474      6973696F 
 1474      6E203233 
 1474      37373135 
 1475 0171 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1475      66756E63 
 1475      74696F6E 
 1475      2D736563 
 1475      74696F6E 
 1476              	.LASF8:
 1477 0199 6C6F6E67 		.ascii	"long unsigned int\000"
 1477      20756E73 
 1477      69676E65 
 1477      6420696E 
 1477      7400
 1478              	.LASF6:
 1479 01ab 73686F72 		.ascii	"short unsigned int\000"
 1479      7420756E 
 1479      7369676E 
 1479      65642069 
 1479      6E7400
 1480              	.LASF10:
 1481 01be 5F5F7569 		.ascii	"__uint32_t\000"
 1481      6E743332 
 1481      5F7400
 1482              	.LASF40:
 1483 01c9 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1483      77424153 
 1483      45505249 
 1483      00
 1484              	.LASF31:
 1485 01d6 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1485      7274496E 
 1485      69746961 
 1485      6C697365 
 1485      53746163 
 1486              	.LASF35:
 1487 01ec 78546173 		.ascii	"xTaskIncrementTick\000"
 1487      6B496E63 
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 44


 1487      72656D65 
 1487      6E745469 
 1487      636B00
 1488              	.LASF20:
 1489 01ff 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1489      74536574 
 1489      42415345 
 1489      50524900 
 1490              	.LASF29:
 1491 020f 78506F72 		.ascii	"xPortSysTickHandler\000"
 1491      74537973 
 1491      5469636B 
 1491      48616E64 
 1491      6C657200 
 1492              	.LASF0:
 1493 0223 756E7369 		.ascii	"unsigned int\000"
 1493      676E6564 
 1493      20696E74 
 1493      00
 1494              	.LASF9:
 1495 0230 6C6F6E67 		.ascii	"long long unsigned int\000"
 1495      206C6F6E 
 1495      6720756E 
 1495      7369676E 
 1495      65642069 
 1496              	.LASF19:
 1497 0247 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1497      74526169 
 1497      73654241 
 1497      53455052 
 1497      4900
 1498              	.LASF34:
 1499 0259 75784372 		.ascii	"uxCriticalNesting\000"
 1499      69746963 
 1499      616C4E65 
 1499      7374696E 
 1499      6700
 1500              	.LASF30:
 1501 026b 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1501      74536574 
 1501      75705469 
 1501      6D657249 
 1501      6E746572 
 1502              	.LASF17:
 1503 0284 73697A65 		.ascii	"sizetype\000"
 1503      74797065 
 1503      00
 1504              	.LASF1:
 1505 028d 6C6F6E67 		.ascii	"long long int\000"
 1505      206C6F6E 
 1505      6720696E 
 1505      7400
 1506              	.LASF18:
 1507 029b 63686172 		.ascii	"char\000"
 1507      00
 1508              	.LASF23:
 1509 02a0 70765061 		.ascii	"pvParameters\000"
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 45


 1509      72616D65 
 1509      74657273 
 1509      00
 1510              	.LASF24:
 1511 02ad 76506F72 		.ascii	"vPortSVCHandler\000"
 1511      74535643 
 1511      48616E64 
 1511      6C657200 
 1512              	.LASF21:
 1513 02bd 7078546F 		.ascii	"pxTopOfStack\000"
 1513      704F6653 
 1513      7461636B 
 1513      00
 1514              	.LASF27:
 1515 02ca 76506F72 		.ascii	"vPortExitCritical\000"
 1515      74457869 
 1515      74437269 
 1515      74696361 
 1515      6C00
 1516              	.LASF11:
 1517 02dc 75696E74 		.ascii	"uint32_t\000"
 1517      33325F74 
 1517      00
 1518              	.LASF41:
 1519 02e5 756C4E65 		.ascii	"ulNewMaskValue\000"
 1519      774D6173 
 1519      6B56616C 
 1519      756500
 1520              	.LASF43:
 1521 02f4 70727650 		.ascii	"prvPortStartFirstTask\000"
 1521      6F727453 
 1521      74617274 
 1521      46697273 
 1521      74546173 
 1522              	.LASF2:
 1523 030a 6C6F6E67 		.ascii	"long double\000"
 1523      20646F75 
 1523      626C6500 
 1524              	.LASF3:
 1525 0316 7369676E 		.ascii	"signed char\000"
 1525      65642063 
 1525      68617200 
 1526              	.LASF32:
 1527 0322 78506F72 		.ascii	"xPortStartScheduler\000"
 1527      74537461 
 1527      72745363 
 1527      68656475 
 1527      6C657200 
 1528              	.LASF15:
 1529 0336 55426173 		.ascii	"UBaseType_t\000"
 1529      65547970 
 1529      655F7400 
 1530              	.LASF14:
 1531 0342 42617365 		.ascii	"BaseType_t\000"
 1531      54797065 
 1531      5F7400
 1532              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\nicol\AppData\Local\Temp\cc16dX1B.s 			page 46


